"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  HiddenRadio: () => HiddenRadio,
  Radio: () => Radio,
  RadioGroup: () => RadioGroup
});
module.exports = __toCommonJS(src_exports);

// src/Radio.tsx
var import_base_radio_checkbox = require("@twilio-paste/base-radio-checkbox");
var import_box = require("@twilio-paste/box");
var import_uid_library = require("@twilio-paste/uid-library");
var React2 = __toESM(require("react"));

// src/RadioContext.tsx
var React = __toESM(require("react"));
var RadioContext = React.createContext({
  name: "",
  value: "",
  disabled: false,
  hasError: false,
  onChange: () => {
  }
});

// src/Radio.tsx
var HiddenRadio = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(
  import_box.Box,
  {
    as: "input",
    type: "radio",
    size: "size0",
    border: "none",
    overflow: "hidden",
    padding: "space0",
    margin: "space0",
    whiteSpace: "nowrap",
    textTransform: "none",
    position: "absolute",
    clip: "rect(0 0 0 0)",
    ref,
    ...props
  }
));
HiddenRadio.displayName = "HiddenRadio";
var Radio = React2.forwardRef(
  ({
    id,
    name,
    element = "RADIO",
    value,
    checked,
    defaultChecked,
    disabled,
    hasError,
    onChange,
    children,
    helpText,
    ...props
  }, ref) => {
    if (checked != null && defaultChecked != null) {
      throw new Error(
        `[Paste Radio] Do not provide both 'defaultChecked' and 'checked' to Radio at the same time. Please consider if you want this component to be controlled or uncontrolled.`
      );
    }
    const [checkedState, setCheckedState] = React2.useState(defaultChecked);
    const radioGroupContext = React2.useContext(RadioContext);
    const helpTextId = (0, import_uid_library.useUID)();
    const radioId = id ? id : (0, import_uid_library.useUID)();
    const isControlled = React2.useMemo(() => checked !== void 0 || radioGroupContext.value !== "", []);
    const handleChange = React2.useCallback(
      (event) => {
        if (onChange) {
          onChange(event);
        } else {
          radioGroupContext.onChange(event);
        }
        if (!isControlled) {
          setCheckedState(event.target.checked);
        }
      },
      [onChange, radioGroupContext, isControlled]
    );
    const state = {
      name: name != null ? name : radioGroupContext.name,
      disabled: disabled != null ? disabled : radioGroupContext.disabled,
      hasError: hasError != null ? hasError : radioGroupContext.hasError
    };
    if (isControlled) {
      if (radioGroupContext.value !== "") {
        state.checked = radioGroupContext.value === value;
      } else {
        state.checked = checked;
      }
    } else {
      state.defaultChecked = defaultChecked;
    }
    const mergedChecked = isControlled ? state.checked || state.defaultChecked : checkedState;
    return /* @__PURE__ */ React2.createElement(
      import_box.Box,
      {
        element,
        position: "relative",
        display: "inline-flex",
        alignItems: "flex-start",
        flexDirection: "column",
        verticalAlign: "top"
      },
      /* @__PURE__ */ React2.createElement(
        HiddenRadio,
        {
          ...props,
          ...state,
          value,
          "aria-describedby": helpTextId,
          "aria-invalid": state.hasError,
          onChange: handleChange,
          id: radioId,
          ref
        }
      ),
      /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabel, { disabled: state.disabled, htmlFor: radioId }, /* @__PURE__ */ React2.createElement(
        import_base_radio_checkbox.BaseRadioCheckboxControl,
        {
          element: `${element}_CONTROL`,
          borderRadius: "borderRadiusCircle",
          disabled: state.disabled,
          type: "radio",
          _checkedAndDisabledSibling: {
            color: "colorTextWeaker"
          }
        },
        /* @__PURE__ */ React2.createElement(
          import_box.Box,
          {
            as: "span",
            element: `${element}_CONTROL_CIRCLE`,
            lineHeight: "lineHeight0",
            display: mergedChecked ? "block" : "none",
            color: "inherit",
            size: "sizeIcon10"
          },
          /* @__PURE__ */ React2.createElement("svg", { role: "img", "aria-hidden": true, width: "100%", height: "100%", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ React2.createElement("circle", { fill: "currentColor", cx: 8, cy: 8, r: 3 }))
        )
      ), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabelText, { element: `${element}_LABEL_TEXT`, fontWeight: "fontWeightMedium" }, children)),
      helpText && /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxHelpText, { element: `${element}_HELP_TEXT_WRAPPER`, helpTextId }, helpText)
    );
  }
);
Radio.displayName = "Radio";

// src/RadioGroup.tsx
var import_inline_control_group = require("@twilio-paste/inline-control-group");
var React3 = __toESM(require("react"));
var RadioGroup = React3.forwardRef(
  ({
    name,
    element = "RADIO_GROUP",
    value,
    onChange,
    disabled = false,
    errorText,
    children,
    i18nRequiredLabel = "(required)",
    ...props
  }, ref) => {
    const onChangeHandler = React3.useCallback(
      (event) => {
        if (onChange != null) {
          onChange(event.target.value);
        }
      },
      [onChange]
    );
    const contextValue = React3.useMemo(() => {
      return {
        name,
        value: value || "",
        disabled,
        hasError: errorText != null,
        onChange: onChangeHandler
      };
    }, [name, value, disabled, errorText, onChangeHandler]);
    return /* @__PURE__ */ React3.createElement(RadioContext.Provider, { value: contextValue }, /* @__PURE__ */ React3.createElement(
      import_inline_control_group.InlineControlGroup,
      {
        element,
        ...props,
        disabled,
        errorText,
        name,
        ref,
        i18nRequiredLabel
      },
      children
    ));
  }
);
RadioGroup.displayName = "RadioGroup";
