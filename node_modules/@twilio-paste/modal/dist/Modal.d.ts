import type { BoxElementProps } from "@twilio-paste/box";
import type { HTMLPasteProps } from "@twilio-paste/types";
import * as React from "react";
type Sizes = "default" | "wide";
export declare const ModalDialogOverlay: import("@react-spring/web").AnimatedComponent<import("@twilio-paste/styling-library").StyledComponent<Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, "as" | keyof import("@reach/dialog/dist/declarations/src").DialogOverlayProps> & import("@reach/dialog/dist/declarations/src").DialogOverlayProps & {
    as?: "div" | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    variant?: Sizes | undefined;
}, {}, {}>>;
export interface ModalDialogContentProps {
    size?: Sizes;
    children: React.ReactNode;
    element?: BoxElementProps["element"];
}
export declare const ModalDialogContent: import("@react-spring/web").AnimatedComponent<import("@twilio-paste/styling-library").StyledComponent<Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, "children" | "as"> & import("@reach/dialog/dist/declarations/src").DialogContentProps & {
    as?: "div" | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & ModalDialogContentProps, {}, {}>>;
export interface ModalProps extends HTMLPasteProps<"div"> {
    children: NonNullable<React.ReactNode>;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'MODAL'
     * @type {BoxProps['element']}
     * @memberof ModalProps
     */
    element?: BoxElementProps["element"];
    /**
     * Determins the state of the Modal.
     *
     * @type {boolean}
     * @memberof ModalProps
     */
    isOpen: boolean;
    /**
     * Function to call when whenever the user hits "Escape" or clicks outside the dialog. It's important to close the Modal `onDismiss`.
     *
     * @memberof ModalProps
     */
    onDismiss: VoidFunction;
    /**
     * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.
     *
     * @type {boolean}
     * @default true
     * @memberof ModalProps
     */
    allowPinchZoom?: boolean;
    /**
     * Control whether the Modal is default width or wide.
     *
     * @type {Sizes}
     * @memberof ModalProps
     */
    size: Sizes;
    /**
     * By default the first focusable element will receive focus when the Modal opens but you can provide a ref to focus instead.
     *
     * @type {Sizes}
     * @memberof ModalProps
     */
    initialFocusRef?: React.RefObject<any>;
    /**
     * Accessible title for the Modal.
     *
     * @type {string}
     * @memberof ModalProps
     */
    ariaLabelledby: string;
}
declare const Modal: React.ForwardRefExoticComponent<ModalProps & React.RefAttributes<HTMLDivElement>>;
export { Modal };
//# sourceMappingURL=Modal.d.ts.map