"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Modal: () => Modal,
  ModalBody: () => ModalBody,
  ModalContext: () => ModalContext,
  ModalDialogContent: () => ModalDialogContent,
  ModalDialogOverlay: () => ModalDialogOverlay,
  ModalFooter: () => ModalFooter,
  ModalFooterActions: () => ModalFooterActions,
  ModalHeader: () => ModalHeader,
  ModalHeading: () => ModalHeading
});
module.exports = __toCommonJS(src_exports);

// src/Modal.tsx
var import_animation_library = require("@twilio-paste/animation-library");
var import_box = require("@twilio-paste/box");
var import_modal_dialog_primitive = require("@twilio-paste/modal-dialog-primitive");
var import_styling_library = require("@twilio-paste/styling-library");
var import_theme = require("@twilio-paste/theme");
var React2 = __toESM(require("react"));

// src/ModalContext.tsx
var React = __toESM(require("react"));
var ModalContext = React.createContext(null);
var useModalContext = () => {
  const context = React.useContext(ModalContext);
  if (!context) {
    throw new Error("useModalContext must be used with ModalContextProvider");
  }
  return context;
};

// src/Modal.tsx
var ModalDialogOverlay = (0, import_animation_library.animated)(
  (0, import_styling_library.styled)(import_modal_dialog_primitive.ModalDialogPrimitiveOverlay)(
    (0, import_styling_library.css)({
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
      backgroundColor: "colorBackgroundOverlay",
      zIndex: "zIndex80"
    }),
    import_theme.pasteBaseStyles,
    import_box.getCustomElementStyles
  )
);
var ModalDialogContent = (0, import_animation_library.animated)(
  (0, import_styling_library.styled)(import_modal_dialog_primitive.ModalDialogPrimitiveContent)(
    ({ size }) => (0, import_styling_library.css)({
      width: "100%",
      maxWidth: size === "wide" ? "size80" : "size60",
      maxHeight: "90%",
      minHeight: "170px",
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadow",
      display: "flex",
      flexDirection: "column"
    })
  )
);
var getAnimationStates = () => ({
  from: { opacity: 0, transform: `scale(0.675)` },
  enter: { opacity: 1, transform: `scale(1)` },
  leave: { opacity: 0, transform: `scale(0.675)` },
  config: {
    mass: 0.5,
    tension: 370,
    friction: 26
  }
});
var Modal = React2.forwardRef(
  ({
    children,
    element = "MODAL",
    isOpen,
    onDismiss,
    allowPinchZoom = true,
    initialFocusRef,
    ariaLabelledby,
    size,
    ...props
  }, ref) => {
    const transitions = (0, import_animation_library.useTransition)(isOpen, getAnimationStates());
    return /* @__PURE__ */ React2.createElement(ModalContext.Provider, { value: { onDismiss } }, transitions(
      (styles, item) => item && /* @__PURE__ */ React2.createElement(
        ModalDialogOverlay,
        {
          onDismiss,
          allowPinchZoom,
          initialFocusRef,
          style: { opacity: styles.opacity },
          "data-paste-element": `${element}_OVERLAY`,
          variant: size
        },
        /* @__PURE__ */ React2.createElement(
          import_box.Box,
          {
            as: ModalDialogContent,
            "aria-labelledby": ariaLabelledby,
            ...(0, import_box.safelySpreadBoxProps)(props),
            element,
            ref,
            style: styles,
            size,
            variant: size
          },
          children
        )
      )
    ));
  }
);
Modal.displayName = "Modal";

// src/ModalHeader.tsx
var import_box2 = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_flex = require("@twilio-paste/flex");
var import_CloseIcon = require("@twilio-paste/icons/cjs/CloseIcon");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React3 = __toESM(require("react"));
var ModalHeader = React3.forwardRef(
  ({ children, element = "MODAL_HEADER", i18nDismissLabel = "Close modal", ...props }, ref) => {
    const { onDismiss } = useModalContext();
    return /* @__PURE__ */ React3.createElement(import_box2.Box, { ...(0, import_box2.safelySpreadBoxProps)(props), as: "div", element, ref, padding: "space90", flexShrink: 0 }, /* @__PURE__ */ React3.createElement(import_flex.Flex, { hAlignContent: "between" }, /* @__PURE__ */ React3.createElement(import_flex.Flex, { vAlignContent: "center", grow: 1, marginRight: "space70" }, children), /* @__PURE__ */ React3.createElement(import_button.Button, { element: `${element}_CLOSE_BUTTON`, variant: "secondary_icon", size: "reset", onClick: () => onDismiss() }, /* @__PURE__ */ React3.createElement(import_CloseIcon.CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon60" }), /* @__PURE__ */ React3.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nDismissLabel))));
  }
);
ModalHeader.displayName = "ModalHeader";

// src/ModalHeading.tsx
var import_heading = require("@twilio-paste/heading");
var React4 = __toESM(require("react"));
var ModalHeading = React4.forwardRef(
  ({ children, as = "h2", element = "MODAL_HEADING", ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(import_heading.Heading, { ...props, as, element, marginBottom: "space0", variant: "heading30", ref }, children);
  }
);
ModalHeading.displayName = "ModalHeading";

// src/ModalBody.tsx
var import_box3 = require("@twilio-paste/box");
var React5 = __toESM(require("react"));
var ModalBody = React5.forwardRef(
  ({ children, element = "MODAL_BODY", ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        overflowY: "auto",
        paddingX: "space90",
        paddingY: "space10",
        as: "div",
        element,
        ref
      },
      children
    );
  }
);
ModalBody.displayName = "ModalBody";

// src/ModalFooter.tsx
var import_box4 = require("@twilio-paste/box");
var React6 = __toESM(require("react"));
var ModalFooter = React6.forwardRef(
  ({ children, element = "MODAL_FOOTER", ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      import_box4.Box,
      {
        ...(0, import_box4.safelySpreadBoxProps)(props),
        flexShrink: 0,
        display: "flex",
        padding: "space90",
        as: "div",
        element,
        ref
      },
      children
    );
  }
);
ModalFooter.displayName = "ModalFooter";

// src/ModalFooterActions.tsx
var import_box5 = require("@twilio-paste/box");
var React7 = __toESM(require("react"));
var ModalFooterActions = React7.forwardRef(
  ({ children, element = "MODAL_FOOTER_ACTIONS", justify, ...props }, ref) => {
    const count = React7.Children.count(children);
    return /* @__PURE__ */ React7.createElement(
      import_box5.Box,
      {
        ...(0, import_box5.safelySpreadBoxProps)(props),
        display: "flex",
        justifyContent: justify === "start" ? "flex-start" : "flex-end",
        flexShrink: justify === "start" ? null : 0,
        flexWrap: "wrap",
        flexGrow: 1,
        element,
        alignItems: "center",
        ref
      },
      React7.Children.map(children, (child, index) => {
        return /* @__PURE__ */ React7.createElement(import_box5.Box, { marginRight: count !== index + 1 ? "space50" : null, element: `${element}_ITEM` }, child);
      })
    );
  }
);
ModalFooterActions.displayName = "ModalFooterActions";
