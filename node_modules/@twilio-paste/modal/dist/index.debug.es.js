// src/Modal.tsx
import { animated, useTransition } from "@twilio-paste/animation-library";
import { Box, getCustomElementStyles, safelySpreadBoxProps } from "@twilio-paste/box";
import { ModalDialogPrimitiveContent, ModalDialogPrimitiveOverlay } from "@twilio-paste/modal-dialog-primitive";
import { css, styled } from "@twilio-paste/styling-library";
import { pasteBaseStyles } from "@twilio-paste/theme";
import * as React2 from "react";

// src/ModalContext.tsx
import * as React from "react";
var ModalContext = React.createContext(null);
var useModalContext = () => {
  const context = React.useContext(ModalContext);
  if (!context) {
    throw new Error("useModalContext must be used with ModalContextProvider");
  }
  return context;
};

// src/Modal.tsx
var ModalDialogOverlay = animated(
  styled(ModalDialogPrimitiveOverlay)(
    css({
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
      backgroundColor: "colorBackgroundOverlay",
      zIndex: "zIndex80"
    }),
    pasteBaseStyles,
    getCustomElementStyles
  )
);
var ModalDialogContent = animated(
  styled(ModalDialogPrimitiveContent)(
    ({ size }) => css({
      width: "100%",
      maxWidth: size === "wide" ? "size80" : "size60",
      maxHeight: "90%",
      minHeight: "170px",
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadow",
      display: "flex",
      flexDirection: "column"
    })
  )
);
var getAnimationStates = () => ({
  from: { opacity: 0, transform: `scale(0.675)` },
  enter: { opacity: 1, transform: `scale(1)` },
  leave: { opacity: 0, transform: `scale(0.675)` },
  config: {
    mass: 0.5,
    tension: 370,
    friction: 26
  }
});
var Modal = React2.forwardRef(
  ({
    children,
    element = "MODAL",
    isOpen,
    onDismiss,
    allowPinchZoom = true,
    initialFocusRef,
    ariaLabelledby,
    size,
    ...props
  }, ref) => {
    const transitions = useTransition(isOpen, getAnimationStates());
    return /* @__PURE__ */ React2.createElement(ModalContext.Provider, { value: { onDismiss } }, transitions(
      (styles, item) => item && /* @__PURE__ */ React2.createElement(
        ModalDialogOverlay,
        {
          onDismiss,
          allowPinchZoom,
          initialFocusRef,
          style: { opacity: styles.opacity },
          "data-paste-element": `${element}_OVERLAY`,
          variant: size
        },
        /* @__PURE__ */ React2.createElement(
          Box,
          {
            as: ModalDialogContent,
            "aria-labelledby": ariaLabelledby,
            ...safelySpreadBoxProps(props),
            element,
            ref,
            style: styles,
            size,
            variant: size
          },
          children
        )
      )
    ));
  }
);
Modal.displayName = "Modal";

// src/ModalHeader.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { Flex } from "@twilio-paste/flex";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React3 from "react";
var ModalHeader = React3.forwardRef(
  ({ children, element = "MODAL_HEADER", i18nDismissLabel = "Close modal", ...props }, ref) => {
    const { onDismiss } = useModalContext();
    return /* @__PURE__ */ React3.createElement(Box2, { ...safelySpreadBoxProps2(props), as: "div", element, ref, padding: "space90", flexShrink: 0 }, /* @__PURE__ */ React3.createElement(Flex, { hAlignContent: "between" }, /* @__PURE__ */ React3.createElement(Flex, { vAlignContent: "center", grow: 1, marginRight: "space70" }, children), /* @__PURE__ */ React3.createElement(Button, { element: `${element}_CLOSE_BUTTON`, variant: "secondary_icon", size: "reset", onClick: () => onDismiss() }, /* @__PURE__ */ React3.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon60" }), /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, i18nDismissLabel))));
  }
);
ModalHeader.displayName = "ModalHeader";

// src/ModalHeading.tsx
import { Heading } from "@twilio-paste/heading";
import * as React4 from "react";
var ModalHeading = React4.forwardRef(
  ({ children, as = "h2", element = "MODAL_HEADING", ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(Heading, { ...props, as, element, marginBottom: "space0", variant: "heading30", ref }, children);
  }
);
ModalHeading.displayName = "ModalHeading";

// src/ModalBody.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React5 from "react";
var ModalBody = React5.forwardRef(
  ({ children, element = "MODAL_BODY", ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(
      Box3,
      {
        ...safelySpreadBoxProps3(props),
        overflowY: "auto",
        paddingX: "space90",
        paddingY: "space10",
        as: "div",
        element,
        ref
      },
      children
    );
  }
);
ModalBody.displayName = "ModalBody";

// src/ModalFooter.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import * as React6 from "react";
var ModalFooter = React6.forwardRef(
  ({ children, element = "MODAL_FOOTER", ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      Box4,
      {
        ...safelySpreadBoxProps4(props),
        flexShrink: 0,
        display: "flex",
        padding: "space90",
        as: "div",
        element,
        ref
      },
      children
    );
  }
);
ModalFooter.displayName = "ModalFooter";

// src/ModalFooterActions.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React7 from "react";
var ModalFooterActions = React7.forwardRef(
  ({ children, element = "MODAL_FOOTER_ACTIONS", justify, ...props }, ref) => {
    const count = React7.Children.count(children);
    return /* @__PURE__ */ React7.createElement(
      Box5,
      {
        ...safelySpreadBoxProps5(props),
        display: "flex",
        justifyContent: justify === "start" ? "flex-start" : "flex-end",
        flexShrink: justify === "start" ? null : 0,
        flexWrap: "wrap",
        flexGrow: 1,
        element,
        alignItems: "center",
        ref
      },
      React7.Children.map(children, (child, index) => {
        return /* @__PURE__ */ React7.createElement(Box5, { marginRight: count !== index + 1 ? "space50" : null, element: `${element}_ITEM` }, child);
      })
    );
  }
);
ModalFooterActions.displayName = "ModalFooterActions";
export {
  Modal,
  ModalBody,
  ModalContext,
  ModalDialogContent,
  ModalDialogOverlay,
  ModalFooter,
  ModalFooterActions,
  ModalHeader,
  ModalHeading
};
