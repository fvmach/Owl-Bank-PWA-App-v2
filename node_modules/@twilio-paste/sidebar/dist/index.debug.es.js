// src/Sidebar.tsx
import { animated, useSpring } from "@twilio-paste/animation-library";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { useTheme } from "@twilio-paste/theme";
import { useUID } from "@twilio-paste/uid-library";
import { useWindowSize } from "@twilio-paste/utils";
import * as React3 from "react";

// src/SidebarContext.tsx
import * as React from "react";
var SidebarContext = React.createContext({});

// src/SidebarSkipLinks.tsx
import { Anchor } from "@twilio-paste/anchor";
import { Box } from "@twilio-paste/box";
import * as React2 from "react";
var SidebarSkipLinkContainer = ({
  element,
  children
}) => {
  return /* @__PURE__ */ React2.createElement(
    Box,
    {
      element,
      backgroundColor: "colorBackgroundBody",
      borderRadius: "borderRadius20",
      boxShadow: "shadowLow",
      left: 10,
      paddingX: "space60",
      paddingY: "space30",
      position: "fixed",
      top: 10,
      transform: "translateY(-150%)",
      transition: "transform 0.1s",
      zIndex: "zIndex90",
      display: "flex",
      columnGap: "space60",
      _focusWithin: { transform: "translateY(0%)" }
    },
    children
  );
};
SidebarSkipLinkContainer.displayName = "SkipLinkContainer";
var SidebarSkipLinks = ({
  element = "SIDEBAR_SKIPLINKS",
  mainContentSkipLinkID,
  sidebarNavigationSkipLinkID,
  topbarSkipLinkID,
  i18nMainContentSkipLinkText = "Skip to content",
  i18nNavigationSkipLinkText = "Skip to navigation",
  i18nTopbarSkipLinkText = "Skip to topbar"
}) => {
  return /* @__PURE__ */ React2.createElement(SidebarSkipLinkContainer, { element }, /* @__PURE__ */ React2.createElement(Anchor, { element: `${element}_LINK`, href: `#${mainContentSkipLinkID}` }, i18nMainContentSkipLinkText), /* @__PURE__ */ React2.createElement(Anchor, { element: `${element}_LINK`, href: `#${sidebarNavigationSkipLinkID}` }, i18nNavigationSkipLinkText), /* @__PURE__ */ React2.createElement(Anchor, { element: `${element}_LINK`, href: `#${topbarSkipLinkID}` }, i18nTopbarSkipLinkText));
};
SidebarSkipLinks.displayName = "SkipLinks";

// src/Sidebar.tsx
var StyledSidebar = React3.forwardRef((props, ref) => /* @__PURE__ */ React3.createElement(
  Box2,
  {
    ...props,
    as: "aside",
    overflow: "visible",
    display: "flex",
    flexDirection: "column",
    ref,
    borderRightStyle: "solid",
    borderRightWidth: "borderWidth10",
    borderRightColor: "colorBorderInverseWeaker",
    backgroundColor: "colorBackgroundInverse",
    zIndex: "zIndex50",
    position: "fixed",
    top: 0,
    left: 0,
    bottom: 0
  }
));
StyledSidebar.displayName = "StyledSidebar";
var AnimatedStyledSidebar = animated(StyledSidebar);
var config = {
  mass: 0.3,
  tension: 288,
  friction: 20
};
var getCompactSpringConfig = (collapsed, sizeSidebar, sizeSidebarCompact) => ({
  opacity: 1,
  width: collapsed ? sizeSidebarCompact : sizeSidebar,
  transform: `translateX(0%)`,
  config
});
var getHiddenSpringConfig = (collapsed, sizeSidebar) => ({
  opacity: collapsed ? 0 : 1,
  width: sizeSidebar,
  transform: collapsed ? `translateX(-100%)` : `translateX(0%)`,
  config
});
var getMobileSpringConfig = (collapsed) => ({
  opacity: collapsed ? 0 : 1,
  width: "100%",
  transform: collapsed ? `translateX(-100%)` : `translateX(0%)`,
  config
});
var Sidebar = React3.forwardRef(
  ({
    collapsed = false,
    variant = "default",
    element = "SIDEBAR",
    mainContentSkipLinkID,
    sidebarNavigationSkipLinkID,
    topbarSkipLinkID,
    i18nMainContentSkipLinkText,
    i18nNavigationSkipLinkText,
    i18nTopbarSkipLinkText,
    children,
    ...props
  }, ref) => {
    const sidebarId = useUID();
    const { breakpointIndex } = useWindowSize();
    const theme = useTheme();
    const isMobile = breakpointIndex === 0;
    const isCompact = variant === "compact";
    let springConfig;
    if (isMobile) {
      springConfig = getMobileSpringConfig(collapsed);
    } else if (isCompact) {
      springConfig = getCompactSpringConfig(collapsed, theme.sizes.sizeSidebar, theme.sizes.sizeSidebarCompact);
    } else {
      springConfig = getHiddenSpringConfig(collapsed, theme.sizes.sizeSidebar);
    }
    const styles = useSpring(springConfig);
    return /* @__PURE__ */ React3.createElement(SidebarContext.Provider, { value: { collapsed, variant, sidebarId, sidebarNavigationSkipLinkID } }, /* @__PURE__ */ React3.createElement(
      SidebarSkipLinks,
      {
        element: `${element}_SKIPLINKS`,
        mainContentSkipLinkID,
        sidebarNavigationSkipLinkID,
        topbarSkipLinkID,
        i18nMainContentSkipLinkText,
        i18nNavigationSkipLinkText,
        i18nTopbarSkipLinkText
      }
    ), /* @__PURE__ */ React3.createElement(
      AnimatedStyledSidebar,
      {
        ...safelySpreadBoxProps(props),
        ref,
        element,
        width: ["100%", isCompact && collapsed ? "sizeSidebarCompact" : "sizeSidebar"],
        style: styles,
        id: sidebarId
      },
      children
    ));
  }
);
Sidebar.displayName = "Sidebar";

// src/SidebarBody.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React4 from "react";
var SidebarBody = React4.forwardRef(
  ({ element = "SIDEBAR_BODY", children, ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(
      Box3,
      {
        ...safelySpreadBoxProps2(props),
        as: "div",
        element,
        ref,
        maxHeight: "100%",
        overflow: "hidden",
        flexGrow: 1
      },
      children
    );
  }
);
SidebarBody.displayName = "SidebarBody";

// src/content-wrappers/SidebarPushContentWrapper.tsx
import { animated as animated2, useSpring as useSpring2 } from "@twilio-paste/animation-library";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { useTheme as useTheme2 } from "@twilio-paste/theme";
import { useWindowSize as useWindowSize2 } from "@twilio-paste/utils";
import * as React5 from "react";
var StyledContentWrapper = React5.forwardRef((props, ref) => /* @__PURE__ */ React5.createElement(Box4, { ...props, as: "div", position: "relative", ref }));
StyledContentWrapper.displayName = "StyledContentWrapper";
var AnimatedStyledContentWrapper = animated2(StyledContentWrapper);
var SidebarPushContentWrapper = React5.forwardRef(
  ({ collapsed = false, variant = "default", element = "SIDEBAR_PUSH_CONTENT_WRAPPER", children, ...props }, ref) => {
    const theme = useTheme2();
    const isCompact = variant === "compact";
    const { breakpointIndex } = useWindowSize2();
    const styles = useSpring2({
      marginLeft: !collapsed ? theme.sizes.sizeSidebar : isCompact ? theme.sizes.sizeSidebarCompact : `0rem`,
      config: {
        mass: 0.3,
        tension: 288,
        friction: 20
      }
    });
    return /* @__PURE__ */ React5.createElement(
      AnimatedStyledContentWrapper,
      {
        ...safelySpreadBoxProps3(props),
        ref,
        element,
        style: breakpointIndex === void 0 || breakpointIndex === 0 ? void 0 : styles,
        marginLeft: ["space0", theme.sizes.sizeSidebar]
      },
      children
    );
  }
);
SidebarPushContentWrapper.displayName = "SidebarPushContentWrapper";

// src/content-wrappers/SidebarOverlayContentWrapper.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { useWindowSize as useWindowSize3 } from "@twilio-paste/utils";
import * as React6 from "react";
var SidebarOverlayContentWrapper = React6.forwardRef(
  ({ variant = "default", element = "SIDEBAR_OVERLAY_CONTENT_WRAPPER", children, ...props }, ref) => {
    const { breakpointIndex } = useWindowSize3();
    const isMobile = breakpointIndex === 0;
    if (!isMobile && variant === "compact") {
      return /* @__PURE__ */ React6.createElement(Box5, { display: "flex", justifyContent: "flex-start" }, /* @__PURE__ */ React6.createElement(Box5, { role: "presentation", width: "sizeSidebarCompact", height: "100%", minHeight: "1px", flexShrink: 0 }), /* @__PURE__ */ React6.createElement(Box5, { ...safelySpreadBoxProps4(props), element, as: "div", ref, width: "100%" }, children));
    }
    return /* @__PURE__ */ React6.createElement(Box5, { ...safelySpreadBoxProps4(props), element, as: "div", ref }, children);
  }
);
SidebarOverlayContentWrapper.displayName = "SidebarOverlayContentWrapper";

// src/header/SidebarHeader.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React7 from "react";
var SidebarHeader = React7.forwardRef(
  ({ element = "SIDEBAR_HEADER", children, ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      Box6,
      {
        ...safelySpreadBoxProps5(props),
        element,
        ref,
        paddingX: "space60",
        minHeight: "sizeTopbar",
        borderBottomWidth: "borderWidth10",
        borderBottomStyle: "solid",
        borderBottomColor: "colorBorderInverseWeaker",
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-start",
        flexShrink: 0,
        columnGap: "space50",
        overflow: "hidden"
      },
      children
    );
  }
);
SidebarHeader.displayName = "SidebarHeader";

// src/header/SidebarHeaderLabel.tsx
import { Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
import * as React8 from "react";
var SidebarHeaderLabel = React8.forwardRef(
  ({ element = "SIDEBAR_HEADER_LABEL", children, ...props }, ref) => {
    const { collapsed } = React8.useContext(SidebarContext);
    return /* @__PURE__ */ React8.createElement(
      Box7,
      {
        ref,
        ...safelySpreadBoxProps6(props),
        opacity: collapsed ? "0" : "1",
        element,
        fontSize: "fontSize30",
        fontWeight: "fontWeightSemibold",
        lineHeight: "lineHeight30",
        letterSpacing: "-.02em",
        color: "colorTextInverse",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis",
        overflow: "hidden",
        margin: "space0"
      },
      children
    );
  }
);
SidebarHeaderLabel.displayName = "SidebarHeaderLabel";

// src/header/SidebarHeaderIconButton.tsx
import { Button } from "@twilio-paste/button";
import * as React9 from "react";
var SidebarHeaderIconButton = React9.forwardRef(
  ({ element = "SIDEBAR_HEADER_ICON_BUTTON", ...props }, ref) => {
    return /* @__PURE__ */ React9.createElement(Button, { ...props, size: "icon", variant: "inverse", element, ref });
  }
);
SidebarHeaderIconButton.displayName = "SidebarHeaderIconButton";

// src/footer/SidebarFooter.tsx
import { Box as Box8, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
import * as React10 from "react";
var SidebarFooter = React10.forwardRef(
  ({ element = "SIDEBAR_FOOTER", ...props }, ref) => {
    return /* @__PURE__ */ React10.createElement(
      Box8,
      {
        ...safelySpreadBoxProps7(props),
        flexShrink: 0,
        position: "relative",
        padding: "space60",
        transition: "padding-right 100ms ease",
        ref,
        element
      }
    );
  }
);
SidebarFooter.displayName = "SidebarFooter";

// src/footer/SidebarCollapseButton.tsx
import { Box as Box9 } from "@twilio-paste/box";
import { Button as Button2 } from "@twilio-paste/button";
import { ChevronDoubleLeftIcon } from "@twilio-paste/icons/esm/ChevronDoubleLeftIcon";
import { ChevronDoubleRightIcon } from "@twilio-paste/icons/esm/ChevronDoubleRightIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React11 from "react";
var SidebarCollapseButton = React11.forwardRef(
  ({ i18nExpandLabel, i18nCollapseLabel, element = "SIDEBAR_COLLAPSE_BUTTON", ...props }, ref) => {
    const { collapsed, sidebarId } = React11.useContext(SidebarContext);
    return /* @__PURE__ */ React11.createElement(Box9, { display: "flex", justifyContent: "flex-end" }, /* @__PURE__ */ React11.createElement(
      Button2,
      {
        ref,
        size: "icon",
        variant: "inverse",
        element,
        ...props,
        tabIndex: 0,
        "aria-expanded": !collapsed,
        "aria-controls": sidebarId
      },
      collapsed ? /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(ChevronDoubleRightIcon, { size: "sizeIcon20", decorative: true, element: `${element}_EXPAND` }), /* @__PURE__ */ React11.createElement(ScreenReaderOnly, null, i18nExpandLabel)) : /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(ChevronDoubleLeftIcon, { size: "sizeIcon20", decorative: true, element: `${element}_COLLAPSE` }), /* @__PURE__ */ React11.createElement(ScreenReaderOnly, null, i18nCollapseLabel))
    ));
  }
);
SidebarCollapseButton.displayName = "SidebarCollapseButton";

// src/navigation/SidebarNavigation.tsx
import { Box as Box10, safelySpreadBoxProps as safelySpreadBoxProps8 } from "@twilio-paste/box";
import { css, styled } from "@twilio-paste/styling-library";
import * as React13 from "react";

// src/navigation/SidebarNavigationContext.tsx
import * as React12 from "react";
var SidebarNavigationContext = React12.createContext({});

// src/navigation/SidebarNavigation.tsx
var SidebarNavigationWrapper = styled.nav(({ theme }) => {
  const { colorBackgroundInverse, colorBackgroundInverseStronger } = theme.backgroundColors;
  return css({
    overflowScrolling: "touch",
    background: `linear-gradient(${colorBackgroundInverse} 33%, rgba(20,28,44, 0)),
    linear-gradient(rgba(20,28,44, 0), ${colorBackgroundInverse} 66%) 0 100%,
    radial-gradient(farthest-side at 50% 100%, rgba(57, 71, 98, 0.5), rgba(0,0,0,0)) 0 100%`,
    backgroundRepeat: "no-repeat",
    backgroundSize: "100% 15px, 100% 15px, 100% 5px, 100% 5px",
    backgroundAttachment: `local, local, scroll, scroll`,
    "::-webkit-scrollbar": {
      width: "6px"
    },
    "::-webkit-scrollbar-track": {
      marginTop: "8px",
      background: colorBackgroundInverse
    },
    "::-webkit-scrollbar-thumb": {
      background: colorBackgroundInverseStronger,
      borderRadius: "10px"
    },
    "::-webkit-scrollbar-thumb:hover": {
      background: colorBackgroundInverseStronger
    }
  });
});
var SidebarNavigation = React13.forwardRef(
  ({ element = "SIDEBAR_NAVIGATION", hideItemsOnCollapse = false, hierarchical = false, children, ...props }, ref) => {
    const { collapsed, sidebarNavigationSkipLinkID } = React13.useContext(SidebarContext);
    return /* @__PURE__ */ React13.createElement(
      SidebarNavigationContext.Provider,
      {
        value: {
          hideItemsOnCollapse,
          hierarchical
        }
      },
      /* @__PURE__ */ React13.createElement(
        Box10,
        {
          ...safelySpreadBoxProps8(props),
          as: SidebarNavigationWrapper,
          id: sidebarNavigationSkipLinkID,
          "aria-label": props["aria-label"],
          element,
          ref,
          transition: "opacity 150ms ease",
          maxHeight: "100%",
          overflowY: "auto",
          overflowX: "hidden",
          paddingY: "space50",
          paddingLeft: "space60",
          paddingRight: collapsed ? "space40" : "space60",
          flexGrow: 1
        },
        children
      )
    );
  }
);
SidebarNavigation.displayName = "SidebarNavigation";

// src/navigation/SidebarNavigationDisclosure.tsx
import { Box as Box11, safelySpreadBoxProps as safelySpreadBoxProps9 } from "@twilio-paste/box";
import { useDisclosurePrimitiveState } from "@twilio-paste/disclosure-primitive";
import * as React15 from "react";

// src/navigation/SidebarNavigationDisclosureContext.tsx
import * as React14 from "react";
var SidebarNavigationDisclosureContext = React14.createContext({});

// src/navigation/SidebarNavigationDisclosure.tsx
var SidebarNavigationDisclosure = React15.forwardRef(
  ({ children, element = "SIDEBAR_NAVIGATION_DISCLOSURE", state, ...props }, ref) => {
    const { collapsed } = React15.useContext(SidebarContext);
    const { disclosure: parentDisclosure } = React15.useContext(SidebarNavigationDisclosureContext);
    const disclosure = state || useDisclosurePrimitiveState({ animated: false, ...props });
    const disclosureContext = {
      disclosure,
      nested: parentDisclosure != null
    };
    return /* @__PURE__ */ React15.createElement(SidebarNavigationDisclosureContext.Provider, { value: disclosureContext }, /* @__PURE__ */ React15.createElement(
      Box11,
      {
        ...safelySpreadBoxProps9(props),
        element,
        ref,
        display: collapsed ? "none" : "block",
        marginBottom: "space30"
      },
      children
    ));
  }
);
SidebarNavigationDisclosure.displayName = "SidebarNavigationDisclosure";

// src/navigation/SidebarNavigationDisclosureHeadingWrapper.tsx
import { Box as Box12, safelySpreadBoxProps as safelySpreadBoxProps10 } from "@twilio-paste/box";
import * as React16 from "react";
var SidebarNavigationDisclosureHeadingWrapper = React16.forwardRef(({ element = "SIDEBAR_NAVIGATION_DISCLOSURE_HEADING_WRAPPER", ...props }, ref) => {
  return /* @__PURE__ */ React16.createElement(
    Box12,
    {
      ...safelySpreadBoxProps10(props),
      element,
      ref,
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      columnGap: "space30"
    }
  );
});
SidebarNavigationDisclosureHeadingWrapper.displayName = "SidebarNavigationDisclosureHeadingWrapper";

// src/navigation/SidebarNavigationDisclosureHeading.tsx
import { Box as Box13, safelySpreadBoxProps as safelySpreadBoxProps11 } from "@twilio-paste/box";
import { DisclosurePrimitive } from "@twilio-paste/disclosure-primitive";
import { ChevronDisclosureIcon } from "@twilio-paste/icons/esm/ChevronDisclosureIcon";
import { useTheme as useTheme3 } from "@twilio-paste/theme";
import * as React17 from "react";

// src/navigation/styles.tsx
var sidebarNavigationLabelStyles = {
  fontStyle: "normal",
  fontWeight: "fontWeightNormal",
  fontSize: "fontSize30",
  lineHeight: "lineHeight20",
  color: "colorTextInverseWeak",
  transition: "all 120ms ease",
  borderRadius: "borderRadius20",
  cursor: "pointer",
  display: "flex",
  flexGrow: 1,
  columnGap: "space20",
  outline: "none",
  paddingY: "space30",
  position: "relative",
  textDecoration: "none",
  _focus: {
    boxShadow: "shadowFocusInverseInset"
  }
};
var sidebarNavigationLabelNestedStyles = {
  ...sidebarNavigationLabelStyles,
  paddingY: "space20",
  fontSize: "fontSize20"
};
var sidebarNavigationLabelSelectedStyles = {
  fontWeight: "fontWeightSemibold",
  color: "colorTextInverse"
};
var sidebarNavigationItemStyles = {
  ...sidebarNavigationLabelStyles,
  background: "none",
  border: "none",
  outline: "none",
  overflow: "hidden",
  paddingLeft: "space30",
  paddingRight: "space30",
  marginBottom: "space30",
  columnGap: "space30",
  _hover: {
    textDecoration: "underline"
  }
};
var sidebarNavigationItemHierarchicalStyles = {
  paddingLeft: "space70"
};
var sidebarNavigationItemNestedStyles = {
  paddingY: "space20",
  flexGrow: 1,
  width: "100%",
  fontSize: "fontSize20",
  marginBottom: "space20",
  paddingLeft: "space80"
};
var sidebarNavigationItemCollapsedStyles = {
  color: "colorTextIconInverse",
  _hover: {
    background: "none",
    color: "colorTextInverse"
  }
};
var sidebarNavigationItemSelectedStyles = {
  ...sidebarNavigationLabelSelectedStyles,
  backgroundColor: "colorBackgroundInverseStrong",
  color: "colorTextInverse"
};

// src/navigation/SidebarNavigationDisclosureHeading.tsx
var useComputeDisclosureHeadingStyles = ({ nested, selected }) => {
  let styles = {};
  if (nested) {
    styles = sidebarNavigationLabelNestedStyles;
  } else {
    styles = sidebarNavigationLabelStyles;
  }
  if (selected) {
    styles = { ...styles, ...sidebarNavigationLabelSelectedStyles };
  }
  return styles;
};
var useAdjustIconColor = ({ icon, selected }) => {
  return React17.useMemo(() => {
    if (!icon) {
      return null;
    }
    if (icon && React17.isValidElement(icon) && !selected) {
      const iconElement = icon;
      return React17.cloneElement(iconElement, {
        color: "colorTextIconInverse"
      });
    }
    return icon;
  }, [icon, selected]);
};
var StyledDisclosureHeading = React17.forwardRef(
  ({ children, element = "SIDEBAR_NAVIGATION_DISCLOSURE_HEADING", selected, icon, ...props }, ref) => {
    const { collapsed, variant } = React17.useContext(SidebarContext);
    const [shouldIconMove, setShouldIconMove] = React17.useState(false);
    const { nested } = React17.useContext(SidebarNavigationDisclosureContext);
    const isExpanded = props["aria-expanded"];
    const theme = useTheme3();
    const isCompact = variant === "compact";
    const [visible, setVisible] = React17.useState(!isCompact ? true : !isExpanded);
    const timeout = React17.useRef(0);
    React17.useEffect(() => {
      clearTimeout(timeout.current);
      if (!isCompact) {
        return;
      }
      timeout.current = setTimeout(() => {
        setVisible(!collapsed);
      }, 120);
    }, [collapsed, isCompact]);
    const disclosureHeadingStyles = useComputeDisclosureHeadingStyles({ nested, selected });
    const adjustedIcon = useAdjustIconColor({ icon, selected });
    return /* @__PURE__ */ React17.createElement(
      Box13,
      {
        ...safelySpreadBoxProps11(props),
        ref,
        element,
        onMouseEnter: () => setShouldIconMove(true),
        onMouseLeave: () => setShouldIconMove(false),
        ...disclosureHeadingStyles
      },
      /* @__PURE__ */ React17.createElement(
        Box13,
        {
          as: "span",
          element: `${element}_EXPAND_ICON`,
          display: "flex",
          color: "colorTextIconInverse",
          height: "sizeIcon20",
          width: "sizeIcon20",
          transition: "transform 150ms ease",
          transform: `
          ${shouldIconMove ? `translateX(${theme.space.space10})` : "translateX(0)"}
          ${isExpanded ? `rotate(90deg)` : "rotate(0deg)"}`
        },
        /* @__PURE__ */ React17.createElement(ChevronDisclosureIcon, { color: "inherit", decorative: true, size: "sizeIcon20" })
      ),
      adjustedIcon,
      /* @__PURE__ */ React17.createElement(
        Box13,
        {
          as: "span",
          display: "block",
          marginLeft: "space20",
          transition: "all 120ms ease",
          float: visible ? "none" : "left",
          opacity: visible ? 1 : 0,
          whiteSpace: visible ? "normal" : "nowrap"
        },
        collapsed ? null : children
      )
    );
  }
);
StyledDisclosureHeading.displayName = "StyledDisclosureHeading";
var SidebarNavigationDisclosureHeading = React17.forwardRef(
  (props, ref) => {
    const { disclosure } = React17.useContext(SidebarNavigationDisclosureContext);
    return /* @__PURE__ */ React17.createElement(DisclosurePrimitive, { ...disclosure, ref, ...props, as: StyledDisclosureHeading });
  }
);
SidebarNavigationDisclosureHeading.displayName = "SidebarNavigationDisclosureHeading";

// src/navigation/SidebarNavigationDisclosureContent.tsx
import { Box as Box14, safelySpreadBoxProps as safelySpreadBoxProps12 } from "@twilio-paste/box";
import { DisclosurePrimitiveContent } from "@twilio-paste/disclosure-primitive";
import * as React18 from "react";
var SidebarNavigationDisclosureContent = React18.forwardRef(
  ({ children, element = "SIDEBAR_NAVIGATION_DISCLOSURE_CONTENT", ...props }, ref) => {
    const { disclosure } = React18.useContext(SidebarNavigationDisclosureContext);
    return /* @__PURE__ */ React18.createElement(
      DisclosurePrimitiveContent,
      {
        ...disclosure,
        ...safelySpreadBoxProps12(props),
        as: Box14,
        element,
        paddingLeft: "space70",
        color: "colorTextInverseWeak",
        marginTop: "space20",
        ref
      },
      children
    );
  }
);
SidebarNavigationDisclosureContent.displayName = "SidebarNavigationDisclosureContent";

// src/navigation/SidebarNavigationItem.tsx
import { secureExternalLink } from "@twilio-paste/anchor";
import { Box as Box15, safelySpreadBoxProps as safelySpreadBoxProps13 } from "@twilio-paste/box";
import * as React19 from "react";
var SidebarNavigationItem = React19.forwardRef(
  ({ element = "SIDEBAR_NAVIGATION_ITEM", selected, children, icon, ...props }, ref) => {
    const { collapsed, variant } = React19.useContext(SidebarContext);
    const { disclosure } = React19.useContext(SidebarNavigationDisclosureContext);
    const { hideItemsOnCollapse, hierarchical } = React19.useContext(SidebarNavigationContext);
    const isCompact = variant === "compact";
    const [visible, setVisible] = React19.useState(!isCompact ? true : !collapsed);
    const timeout = React19.useRef(0);
    React19.useEffect(() => {
      clearTimeout(timeout.current);
      if (!isCompact) {
        return;
      }
      timeout.current = setTimeout(() => {
        setVisible(!collapsed);
      }, 120);
    }, [collapsed, isCompact]);
    const isNested = disclosure != null;
    const styles = React19.useMemo(
      () => ({
        ...sidebarNavigationItemStyles,
        ...hierarchical && sidebarNavigationItemHierarchicalStyles,
        ...isNested && sidebarNavigationItemNestedStyles,
        ...collapsed && sidebarNavigationItemCollapsedStyles,
        ...selected && sidebarNavigationItemSelectedStyles,
        display: collapsed && hideItemsOnCollapse ? "none" : "flex",
        width: collapsed ? "36px" : "100%"
      }),
      [isNested, selected, collapsed, hideItemsOnCollapse, hierarchical]
    );
    return /* @__PURE__ */ React19.createElement(
      Box15,
      {
        ...safelySpreadBoxProps13(props),
        ...props.href ? secureExternalLink(props.href) : {},
        ref,
        element,
        as: "a",
        "aria-current": selected ? "page" : void 0,
        ...styles
      },
      icon && /* @__PURE__ */ React19.createElement(Box15, { as: "span", color: selected ? "colorTextInverse" : "colorTextIconInverse" }, icon),
      /* @__PURE__ */ React19.createElement(
        Box15,
        {
          as: "span",
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          columnGap: "space20",
          transition: "all 120ms ease",
          flexGrow: 1,
          float: visible ? "none" : "left",
          opacity: visible ? 1 : 0,
          whiteSpace: visible ? "normal" : "nowrap"
        },
        collapsed ? null : children
      )
    );
  }
);
SidebarNavigationItem.displayName = "SidebarNavigationItem";

// src/navigation/SidebarNavigationSeparator.tsx
import { Box as Box16, safelySpreadBoxProps as safelySpreadBoxProps14 } from "@twilio-paste/box";
import * as React20 from "react";
var SidebarNavigationSeparator = React20.forwardRef(
  ({ element = "SIDEBAR_NAVIGATION_SEPARATOR", ...props }, ref) => {
    const { collapsed } = React20.useContext(SidebarContext);
    return /* @__PURE__ */ React20.createElement(
      Box16,
      {
        ...safelySpreadBoxProps14(props),
        display: collapsed ? "none" : "block",
        "aria-orientation": "horizontal",
        element,
        marginY: "space50",
        as: "hr",
        borderWidth: "borderWidth0",
        borderColor: "colorBorderInverseWeaker",
        borderStyle: "solid",
        borderBottomWidth: "borderWidth10",
        ref
      }
    );
  }
);
SidebarNavigationSeparator.displayName = "SidebarNavigationSeparator";

// src/SidebarBetaBadge.tsx
import { badgeBaseStyles, useResizeChildIcons } from "@twilio-paste/badge";
import { Box as Box17, safelySpreadBoxProps as safelySpreadBoxProps15 } from "@twilio-paste/box";
import * as React21 from "react";
var SidebarBetaBadgeSpanStyles = {
  ...badgeBaseStyles,
  paddingX: "space20",
  paddingY: "space10",
  boxShadow: "shadowBorderInverseNewWeaker",
  backgroundColor: "colorBackgroundInverseStrong",
  color: "colorTextInverseNew"
};
var SidebarBetaBadgeButtonStyles = {
  ...SidebarBetaBadgeSpanStyles,
  boxShadow: "shadowBorderBottomInverseNewWeaker",
  cursor: "pointer",
  _hover: { top: "1px", boxShadow: "none" },
  _focus: { top: "1px", boxShadow: "shadowFocusInverse" }
};
var SidebarBetaBadge = React21.forwardRef(
  ({ children, as, element = "SIDEBAR_BETA_BADGE", onClick, ...props }, ref) => {
    const resizedChildren = useResizeChildIcons(children);
    const styles = as === "button" ? SidebarBetaBadgeButtonStyles : SidebarBetaBadgeSpanStyles;
    const handleOnClick = as === "button" ? onClick : void 0;
    return /* @__PURE__ */ React21.createElement(Box17, { ...safelySpreadBoxProps15(props), ...styles, as, ref, element, onClick: handleOnClick }, resizedChildren);
  }
);
SidebarBetaBadge.displayName = "SidebarBetaBadge";
export {
  Sidebar,
  SidebarBetaBadge,
  SidebarBody,
  SidebarCollapseButton,
  SidebarContext,
  SidebarFooter,
  SidebarHeader,
  SidebarHeaderIconButton,
  SidebarHeaderLabel,
  SidebarNavigation,
  SidebarNavigationDisclosure,
  SidebarNavigationDisclosureContent,
  SidebarNavigationDisclosureHeading,
  SidebarNavigationDisclosureHeadingWrapper,
  SidebarNavigationItem,
  SidebarNavigationSeparator,
  SidebarOverlayContentWrapper,
  SidebarPushContentWrapper,
  useDisclosurePrimitiveState as useSidebarNavigationDisclosureState
};
