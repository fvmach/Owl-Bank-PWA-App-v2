// src/MinimizableDialog.tsx
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { StyledBase } from "@twilio-paste/theme";
import * as React3 from "react";

// src/MinimizableDialogContext.tsx
import * as React from "react";
var MinimizableDialogContext = React.createContext({});

// src/StyledMinimizableDialog.tsx
import { Box } from "@twilio-paste/box";
import * as React2 from "react";
var StyledMinimizableDialog = ({
  element,
  children
}) => /* @__PURE__ */ React2.createElement(
  Box,
  {
    element,
    borderRadius: "borderRadius20",
    display: "flex",
    flexDirection: "column",
    backgroundColor: "colorBackgroundBody",
    width: "size40",
    boxShadow: "shadow"
  },
  children
);
StyledMinimizableDialog.displayName = "StyledMinimizableDialog";

// src/MinimizableDialog.tsx
var StyledMinimizableDialogContainer = React3.forwardRef(
  ({ minimized, style, ...props }, ref) => /* @__PURE__ */ React3.createElement(
    Box2,
    {
      ...safelySpreadBoxProps(props),
      ref,
      zIndex: "zIndex80",
      transform: "none!important",
      position: "absolute",
      inset: `auto 1.5rem ${minimized === true ? "0" : "1.5"}rem auto!important`,
      _focus: { outline: "none" },
      style
    }
  )
);
StyledMinimizableDialogContainer.displayName = "StyledMinimizableDialog";
var MinimizableDialog = React3.forwardRef(
  ({ children, element = "MINIMIZABLE_DIALOG", ...props }, ref) => {
    const dialog = React3.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React3.createElement(
      NonModalDialogPrimitive,
      {
        ...dialog,
        ...props,
        as: StyledMinimizableDialogContainer,
        ref,
        preventBodyScroll: false,
        hideOnClickOutside: false
      },
      /* @__PURE__ */ React3.createElement(StyledBase, null, /* @__PURE__ */ React3.createElement(StyledMinimizableDialog, { element }, children))
    );
  }
);
MinimizableDialog.displayName = "MinimizableDialog";

// src/MinimizableDialogButton.tsx
import { Button } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import * as React4 from "react";
var MinimizableDialogButton = React4.forwardRef(
  ({ children, element = "MINIMIZABLE_DIALOG_BUTTON", ...props }, ref) => {
    const dialog = React4.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React4.createElement(NonModalDialogDisclosurePrimitive, { element, ...dialog, ...props, as: Button, ref }, children);
  }
);
MinimizableDialogButton.displayName = "MinimizableDialogButton";

// src/MinimizableDialogHeader.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Button as Button2 } from "@twilio-paste/button";
import { ChevronUpIcon } from "@twilio-paste/icons/esm/ChevronUpIcon";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { MinusIcon } from "@twilio-paste/icons/esm/MinusIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React5 from "react";
var MinimizableDialogHeader = React5.forwardRef(
  ({
    children,
    element = "MINIMIZABLE_DIALOG_HEADER",
    i18nDismissLabel = "close",
    i18nMinimizeLabel = "minimize",
    ...props
  }, ref) => {
    const { hide, minimized, minimize, expand } = React5.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React5.createElement(
      Box3,
      {
        ...safelySpreadBoxProps2(props),
        ref,
        display: "grid",
        gridTemplateColumns: "1fr auto auto",
        columnGap: "space30",
        backgroundColor: "colorBackground",
        paddingX: "space70",
        paddingY: "space40",
        color: "colorTextWeak",
        overflow: "hidden",
        borderBottomWidth: "borderWidth10",
        borderBottomStyle: "solid",
        borderBottomColor: "colorBorderWeaker",
        borderTopRightRadius: "borderRadius20",
        borderTopLeftRadius: "borderRadius20",
        element
      },
      /* @__PURE__ */ React5.createElement(
        Box3,
        {
          as: "h2",
          element: `${element}_HEADING`,
          fontWeight: "fontWeightSemibold",
          fontSize: "fontSize30",
          lineHeight: "lineHeight30",
          margin: "space0"
        },
        children
      ),
      /* @__PURE__ */ React5.createElement(
        Button2,
        {
          element: `${element}_MINIMIZE_BUTTON`,
          variant: "secondary_icon",
          size: "reset",
          onClick: minimized ? expand : minimize,
          "aria-pressed": minimized === void 0 ? false : minimized
        },
        minimized ? /* @__PURE__ */ React5.createElement(ChevronUpIcon, { element: `${element}_MINIMIZE_ICON`, decorative: true, size: "sizeIcon20" }) : /* @__PURE__ */ React5.createElement(MinusIcon, { element: `${element}_MINIMIZE_ICON`, decorative: true, size: "sizeIcon20" }),
        /* @__PURE__ */ React5.createElement(ScreenReaderOnly, null, i18nMinimizeLabel)
      ),
      /* @__PURE__ */ React5.createElement(Button2, { element: `${element}_CLOSE_BUTTON`, variant: "secondary_icon", size: "reset", onClick: hide }, /* @__PURE__ */ React5.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React5.createElement(ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
MinimizableDialogHeader.displayName = "MinimizableDialogHeader";

// src/MinimizableDialogContainer.tsx
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
import * as React6 from "react";
var useMinimizableDialogState = ({
  minimized: minimizedArg,
  ...initialState
}) => {
  const [minimized, setMinimized] = React6.useState(minimizedArg);
  const minimize = () => setMinimized(true);
  const expand = () => setMinimized(false);
  const toggleMinimized = () => setMinimized((prev) => !prev);
  const dialog = useNonModalDialogPrimitiveState({ ...initialState });
  return { ...dialog, minimized, minimize, expand, toggleMinimized };
};
var BaseMinimizableDialogContainer = ({
  gutter,
  children,
  placement,
  modal,
  state,
  minimized: minimizedProp,
  ...initialState
}) => {
  const dialog = state || useMinimizableDialogState({
    minimized: minimizedProp,
    modal: true,
    ...initialState
  });
  return /* @__PURE__ */ React6.createElement(MinimizableDialogContext.Provider, { value: { ...dialog } }, children);
};
BaseMinimizableDialogContainer.displayName = "BaseMinimizableDialogContainer";
var MinimizableDialogContainer = React6.memo(BaseMinimizableDialogContainer);
MinimizableDialogContainer.displayName = "MinimizableDialogContainer";

// src/MinimizableDialogContent.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React7 from "react";
var MinimizableDialogContent = React7.forwardRef(
  ({ children, element = "MINIMIZABLE_DIALOG_CONTENT", ...props }, ref) => {
    const { minimized } = React7.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React7.createElement(
      Box4,
      {
        ...safelySpreadBoxProps3(props),
        element,
        ref,
        display: minimized ? "none" : "block",
        borderBottomLeftRadius: "borderRadius20",
        borderBottomRightRadius: "borderRadius20"
      },
      children
    );
  }
);
MinimizableDialogContent.displayName = "MinimizableDialogContent";
export {
  MinimizableDialog,
  MinimizableDialogButton,
  MinimizableDialogContainer,
  MinimizableDialogContent,
  MinimizableDialogHeader,
  useMinimizableDialogState
};
