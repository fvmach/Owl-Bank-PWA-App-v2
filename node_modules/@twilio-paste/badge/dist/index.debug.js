"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Badge: () => Badge,
  BadgeVariants: () => BadgeVariants,
  badgeBaseStyles: () => badgeBaseStyles,
  badgeButtonStyles: () => badgeButtonStyles,
  badgeVariantStyles: () => badgeVariantStyles,
  getBadgeButtonStyles: () => getBadgeButtonStyles,
  useResizeChildIcons: () => useResizeChildIcons
});
module.exports = __toCommonJS(src_exports);

// src/hooks.tsx
var import_uid_library = require("@twilio-paste/uid-library");
var React = __toESM(require("react"));
var DEFAULT_ICON_SIZE = "sizeIcon10";
var useResizeChildIcons = (children) => {
  const seed = (0, import_uid_library.useUIDSeed)();
  if (!Array.isArray(children)) {
    return children;
  }
  return React.Children.map(children, (child) => {
    if (typeof child === "object" && !Array.isArray(child) && typeof child?.type?.displayName === "string" && child?.type?.displayName.includes("Icon")) {
      return React.cloneElement(child, {
        ...child.props,
        key: seed(child),
        size: DEFAULT_ICON_SIZE
      });
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, { key: seed(child) }, child);
  });
};

// src/styles.ts
var badgeBaseStyles = {
  alignItems: "center",
  border: "unset",
  borderRadius: "borderRadius20",
  columnGap: "space20",
  display: "flex",
  fontSize: "fontSize20",
  fontWeight: "fontWeightSemibold",
  lineHeight: "lineHeight10",
  maxWidth: "max-content",
  appearance: "none",
  background: "none",
  outline: "none",
  fontFamily: "inherit",
  position: "relative"
};
var badgeVariantStyles = {
  success: {
    backgroundColor: "colorBackgroundSuccessWeakest",
    color: "colorTextSuccess",
    boxShadow: "shadowBorderSuccessWeaker"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError",
    boxShadow: "shadowBorderErrorWeaker"
  },
  warning: {
    backgroundColor: "colorBackgroundWarningWeakest",
    color: "colorTextWarning",
    boxShadow: "shadowBorderWarningWeaker"
  },
  new: {
    backgroundColor: "colorBackgroundNewWeakest",
    color: "colorTextNew",
    boxShadow: "shadowBorderNewWeaker"
  },
  neutral: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral",
    boxShadow: "shadowBorderNeutralWeaker"
  },
  subaccount: {
    backgroundColor: "colorBackgroundSubaccount",
    color: "colorTextSubaccount",
    boxShadow: "shadowBorderSubaccount"
  },
  decorative10: {
    backgroundColor: "colorBackgroundDecorative10Weakest",
    color: "colorTextDecorative10",
    boxShadow: "shadowBorderDecorative10Weaker"
  },
  decorative20: {
    backgroundColor: "colorBackgroundDecorative20Weakest",
    color: "colorTextDecorative20",
    boxShadow: "shadowBorderDecorative20Weaker"
  },
  decorative30: {
    backgroundColor: "colorBackgroundDecorative30Weakest",
    color: "colorTextDecorative30",
    boxShadow: "shadowBorderDecorative30Weaker"
  },
  decorative40: {
    backgroundColor: "colorBackgroundDecorative40Weakest",
    color: "colorTextDecorative40",
    boxShadow: "shadowBorderDecorative40Weaker"
  },
  brand10: {
    backgroundColor: "colorBackgroundBrand10",
    color: "colorTextBrand",
    boxShadow: "shadowBorderBrand10"
  },
  brand20: {
    backgroundColor: "colorBackgroundBrand20",
    color: "colorTextBrand",
    boxShadow: "shadowBorderBrand20"
  },
  brand30: {
    backgroundColor: "colorBackgroundBrand30",
    color: "colorTextBrand",
    boxShadow: "shadowBorderBrand30"
  },
  neutral_counter: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral",
    borderRadius: "borderRadiusPill",
    boxShadow: "shadowBorderNeutralWeaker"
  },
  error_counter: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError",
    borderRadius: "borderRadiusPill",
    boxShadow: "shadowBorderErrorWeaker"
  },
  default: {
    backgroundColor: "colorBackgroundBody",
    color: "colorText",
    boxShadow: "shadowBorderWeaker"
  },
  notification_counter: {
    borderRadius: "borderRadiusPill",
    backgroundColor: "colorBackgroundNotification",
    color: "colorTextInverse",
    boxShadow: "shadowBorderNotification"
  },
  info: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral",
    boxShadow: "shadowBorderNeutralWeaker"
  }
};
var badgeButtonStyles = {
  success: {
    boxShadow: "shadowBorderBottomSuccessWeaker"
  },
  error: {
    boxShadow: "shadowBorderBottomErrorWeaker"
  },
  warning: {
    boxShadow: "shadowBorderBottomWarningWeaker"
  },
  new: {
    boxShadow: "shadowBorderBottomNewWeaker"
  },
  neutral: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  },
  subaccount: {
    boxShadow: "shadowBorderBottomSubaccount"
  },
  decorative10: {
    boxShadow: "shadowBorderBottomDecorative10Weaker"
  },
  decorative20: {
    boxShadow: "shadowBorderBottomDecorative20Weaker"
  },
  decorative30: {
    boxShadow: "shadowBorderBottomDecorative30Weaker"
  },
  decorative40: {
    boxShadow: "shadowBorderBottomDecorative40Weaker"
  },
  brand10: {
    boxShadow: "shadowBorderBottomBrand10Strong"
  },
  brand20: {
    boxShadow: "shadowBorderBottomBrand20Strong"
  },
  brand30: {
    boxShadow: "shadowBorderBottomBrand30Strong"
  },
  neutral_counter: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  },
  error_counter: {
    boxShadow: "shadowBorderBottomErrorWeaker"
  },
  notification_counter: {
    boxShadow: "shadowBorderBottomNotificationStronger"
  },
  default: {
    boxShadow: "shadowBorderBottomDecorative10Weaker"
  },
  info: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  }
};
var badgeAnchorStyles = {
  textDecoration: "underline",
  cursor: "pointer",
  _hover: { textDecoration: "none" },
  _focus: { textDecoration: "none", boxShadow: "shadowFocus" }
};
var getBadgeButtonStyles = (variant) => {
  const variantButtonStyle = badgeButtonStyles[variant];
  return {
    ...variantButtonStyle,
    cursor: "pointer",
    _hover: { top: "1px", boxShadow: "none" },
    _focus: { top: "1px", boxShadow: "shadowFocus" }
  };
};

// src/constants.ts
var BadgeVariants = [
  "neutral",
  "warning",
  "error",
  "success",
  "new",
  "subaccount",
  "decorative10",
  "decorative20",
  "decorative30",
  "decorative40",
  "brand10",
  "brand20",
  "brand30",
  "neutral_counter",
  "error_counter",
  "default",
  "notification_counter",
  "info"
];

// src/Badge.tsx
var import_anchor = require("@twilio-paste/anchor");
var import_box = require("@twilio-paste/box");
var import_ErrorIcon = require("@twilio-paste/icons/cjs/ErrorIcon");
var React2 = __toESM(require("react"));
var Badge = React2.forwardRef(
  ({ as, href, variant, size = "default", children, element = "BADGE", ...props }, ref) => {
    const resizedChildren = useResizeChildIcons(children);
    let badgeStyles = { ...badgeBaseStyles, ...badgeVariantStyles[variant] };
    if (as === "a") {
      badgeStyles = { ...badgeStyles, ...badgeAnchorStyles };
    }
    if (as === "button") {
      badgeStyles = { ...badgeStyles, ...getBadgeButtonStyles(variant) };
    }
    return /* @__PURE__ */ React2.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        ...href ? (0, import_anchor.secureExternalLink)(href) : {},
        href,
        as,
        element,
        paddingX: size === "small" ? "space20" : "space30",
        paddingY: size === "small" ? "space10" : "space20",
        minWidth: size === "small" ? "sizeBase50" : "size0",
        justifyContent: "center",
        variant,
        ref,
        ...badgeStyles
      },
      variant === "error_counter" ? /* @__PURE__ */ React2.createElement(import_ErrorIcon.ErrorIcon, { element: `${element}_ICON`, decorative: true, size: "sizeIcon10" }) : null,
      resizedChildren
    );
  }
);
Badge.displayName = "Badge";
