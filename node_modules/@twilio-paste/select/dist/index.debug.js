"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Option: () => Option,
  OptionGroup: () => OptionGroup,
  Select: () => Select,
  SelectElement: () => SelectElement
});
module.exports = __toCommonJS(src_exports);

// src/Option.tsx
var import_box = require("@twilio-paste/box");
var React = __toESM(require("react"));
var Option = React.forwardRef(({ children, element = "OPTION", ...props }, ref) => {
  if (props.selected) {
    console.warn('"selected" is a blocked prop on this component, please use "value" on the select element.');
  }
  return /* @__PURE__ */ React.createElement(
    import_box.Box,
    {
      as: "option",
      ref,
      ...(0, import_box.safelySpreadBoxProps)(props),
      element,
      size: void 0,
      height: void 0,
      width: void 0,
      backgroundColor: "inherit",
      color: "inherit",
      fontFamily: "inherit",
      lineHeight: "lineHeight50",
      paddingTop: "space30",
      paddingBottom: "space30",
      paddingLeft: "space20"
    },
    children
  );
});
Option.displayName = "Option";

// src/OptionGroup.tsx
var import_box2 = require("@twilio-paste/box");
var React2 = __toESM(require("react"));
var OptionGroup = React2.forwardRef(
  ({ label, children, element = "OPTION_GROUP", ...props }, ref) => /* @__PURE__ */ React2.createElement(
    import_box2.Box,
    {
      ref,
      label,
      ...(0, import_box2.safelySpreadBoxProps)(props),
      element,
      as: "optgroup",
      backgroundColor: "inherit",
      color: "inherit",
      fontFamily: "inherit",
      fontWeight: "fontWeightMedium",
      fontStyle: "normal",
      margin: "space20"
    },
    children
  )
);
OptionGroup.displayName = "OptionGroup";

// src/Select.tsx
var import_box3 = require("@twilio-paste/box");
var import_ChevronDownIcon = require("@twilio-paste/icons/cjs/ChevronDownIcon");
var import_input_box = require("@twilio-paste/input-box");
var React3 = __toESM(require("react"));
var SelectElement = React3.forwardRef(
  ({ element = "SELECT_ELEMENT", variant, size, ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        element,
        as: "select",
        ref,
        size,
        height: void 0,
        appearance: "none",
        backgroundColor: variant === "inverse" ? "colorBackgroundInverse" : "colorBackgroundBody",
        border: "none",
        borderRadius: "borderRadius20",
        boxShadow: "none",
        color: "inherit",
        cursor: "pointer",
        display: "block",
        fontFamily: "inherit",
        fontSize: "fontSize30",
        fontWeight: "fontWeightMedium",
        lineHeight: "lineHeight20",
        margin: "space0",
        outline: "none",
        paddingBottom: "space30",
        paddingLeft: "space40",
        paddingRight: "space100",
        paddingTop: "space30",
        resize: "none",
        width: "100%",
        _disabled: {
          color: variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
          backgroundColor: "transparent",
          cursor: "not-allowed",
          opacity: 1
        },
        variant
      }
    );
  }
);
SelectElement.displayName = "SelectElement";
var Select = React3.forwardRef(
  ({
    disabled,
    element = "SELECT",
    hasError,
    insertBefore,
    insertAfter,
    children,
    size,
    multiple,
    variant = "default",
    ...props
  }, ref) => {
    const [showOptions, setShowOptions] = React3.useState(false);
    React3.useEffect(() => {
      setShowOptions(true);
    }, []);
    return /* @__PURE__ */ React3.createElement(
      import_input_box.InputBox,
      {
        disabled,
        element,
        hasError,
        insertAfter,
        insertBefore,
        variant
      },
      /* @__PURE__ */ React3.createElement(import_box3.Box, { display: "flex", width: "100%", position: "relative" }, showOptions ? /* @__PURE__ */ React3.createElement(
        SelectElement,
        {
          "aria-invalid": hasError,
          "data-not-selectize": "true",
          disabled,
          ref,
          element: `${element}_ELEMENT`,
          ...props,
          multiple,
          size: multiple ? size : 0,
          variant,
          key: "mounted"
        },
        children
      ) : /* @__PURE__ */ React3.createElement(SelectElement, { key: "unmounted" }), !multiple && /* @__PURE__ */ React3.createElement(import_input_box.InputChevronWrapper, { element: `${element}_CHEVRON_WRAPPER` }, /* @__PURE__ */ React3.createElement(
        import_ChevronDownIcon.ChevronDownIcon,
        {
          "aria-hidden": "true",
          decorative: true,
          element: `${element}_ICON`,
          color: (0, import_input_box.getInputChevronIconColor)(variant, disabled, false),
          size: "sizeIcon30"
        }
      )))
    );
  }
);
Select.displayName = "Select";
