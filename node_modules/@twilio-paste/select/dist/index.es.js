import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import*as React from"react";var Option=React.forwardRef(({children,element="OPTION",...props},ref)=>(props.selected&&console.warn('"selected" is a blocked prop on this component, please use "value" on the select element.'),React.createElement(Box,{as:"option",ref,...safelySpreadBoxProps(props),element,size:void 0,height:void 0,width:void 0,backgroundColor:"inherit",color:"inherit",fontFamily:"inherit",lineHeight:"lineHeight50",paddingTop:"space30",paddingBottom:"space30",paddingLeft:"space20"},children)));Option.displayName="Option";import{Box as Box2,safelySpreadBoxProps as safelySpreadBoxProps2}from"@twilio-paste/box";import*as React2 from"react";var OptionGroup=React2.forwardRef(({label,children,element="OPTION_GROUP",...props},ref)=>React2.createElement(Box2,{ref,label,...safelySpreadBoxProps2(props),element,as:"optgroup",backgroundColor:"inherit",color:"inherit",fontFamily:"inherit",fontWeight:"fontWeightMedium",fontStyle:"normal",margin:"space20"},children));OptionGroup.displayName="OptionGroup";import{Box as Box3,safelySpreadBoxProps as safelySpreadBoxProps3}from"@twilio-paste/box";import{ChevronDownIcon}from"@twilio-paste/icons/esm/ChevronDownIcon";import{InputBox,InputChevronWrapper,getInputChevronIconColor}from"@twilio-paste/input-box";import*as React3 from"react";var SelectElement=React3.forwardRef(({element="SELECT_ELEMENT",variant,size,...props},ref)=>React3.createElement(Box3,{...safelySpreadBoxProps3(props),element,as:"select",ref,size,height:void 0,appearance:"none",backgroundColor:variant==="inverse"?"colorBackgroundInverse":"colorBackgroundBody",border:"none",borderRadius:"borderRadius20",boxShadow:"none",color:"inherit",cursor:"pointer",display:"block",fontFamily:"inherit",fontSize:"fontSize30",fontWeight:"fontWeightMedium",lineHeight:"lineHeight20",margin:"space0",outline:"none",paddingBottom:"space30",paddingLeft:"space40",paddingRight:"space100",paddingTop:"space30",resize:"none",width:"100%",_disabled:{color:variant==="inverse"?"colorTextInverseWeakest":"colorTextWeaker",backgroundColor:"transparent",cursor:"not-allowed",opacity:1},variant}));SelectElement.displayName="SelectElement";var Select=React3.forwardRef(({disabled,element="SELECT",hasError,insertBefore,insertAfter,children,size,multiple,variant="default",...props},ref)=>{let[showOptions,setShowOptions]=React3.useState(!1);return React3.useEffect(()=>{setShowOptions(!0)},[]),React3.createElement(InputBox,{disabled,element,hasError,insertAfter,insertBefore,variant},React3.createElement(Box3,{display:"flex",width:"100%",position:"relative"},showOptions?React3.createElement(SelectElement,{"aria-invalid":hasError,"data-not-selectize":"true",disabled,ref,element:`${element}_ELEMENT`,...props,multiple,size:multiple?size:0,variant,key:"mounted"},children):React3.createElement(SelectElement,{key:"unmounted"}),!multiple&&React3.createElement(InputChevronWrapper,{element:`${element}_CHEVRON_WRAPPER`},React3.createElement(ChevronDownIcon,{"aria-hidden":"true",decorative:!0,element:`${element}_ICON`,color:getInputChevronIconColor(variant,disabled,!1),size:"sizeIcon30"}))))});Select.displayName="Select";export{Option,OptionGroup,Select,SelectElement};
