var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// src/FormPill.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { CompositeItem } from "@twilio-paste/reakit-library";
import * as React3 from "react";

// src/FormPill.styles.ts
var wrapperStyles = {
  default: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextLinkStronger"
    }
  },
  error: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextErrorStronger"
    }
  }
};
var selectedWrapperStyles = {
  default: {
    color: "colorTextWeakest",
    _hover: {
      color: "colorTextInverse"
    }
  },
  error: {
    color: "colorTextInverse",
    _hover: {
      color: "colorTextWeakest"
    }
  }
};
var pillStyles = {
  default: {
    color: "colorText",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryWeaker",
    _focus: {
      boxShadow: "shadowFocus",
      color: "colorText"
    },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryStronger",
      boxShadow: "shadowBorderPrimaryStronger",
      color: "colorTextWeakest"
    },
    _selected_focus: {
      boxShadow: "shadowFocus",
      color: "colorTextWeakest"
    },
    _disabled: {
      backgroundColor: "colorBackgroundStrong",
      boxShadow: "shadowBorderWeaker",
      cursor: "not-allowed",
      color: "colorText"
    }
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    boxShadow: "shadowBorderErrorWeaker",
    color: "colorTextError",
    _focus: {
      boxShadow: "shadowFocus",
      color: "colorTextErrorStrong"
    },
    _selected: {
      backgroundColor: "colorBackgroundError",
      boxShadow: "shadowBorderError",
      color: "colorTextInverse"
    },
    _selected_focus: {
      boxShadow: "shadowFocus",
      color: "colorTextInverse"
    },
    _disabled: {
      backgroundColor: "colorBackgroundStrong",
      boxShadow: "shadowBorderWeaker",
      cursor: "not-allowed",
      color: "colorText"
    }
  }
};
var hoverPillStyles = {
  default: {
    cursor: "pointer",
    color: "colorText",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryWeaker",
    _hover: {
      boxShadow: "shadowBorderPrimaryStronger",
      color: "colorTextPrimaryStronger"
    },
    _selected_hover: {
      backgroundColor: "colorBackgroundPrimary",
      boxShadow: "shadowBorderPrimary",
      color: "colorTextInverse"
    },
    _focus_hover: {
      boxShadow: "shadowFocus"
    }
  },
  error: {
    cursor: "pointer",
    backgroundColor: "colorBackgroundErrorWeakest",
    boxShadow: "shadowBorderErrorWeaker",
    color: "colorTextError",
    _hover: {
      boxShadow: "shadowBorderErrorStronger",
      color: "colorTextErrorStronger"
    },
    _selected_hover: {
      backgroundColor: "colorBackgroundErrorStrongest",
      boxShadow: "shadowBorderErrorStrongest",
      color: "colorTextWeakest"
    },
    _focus_hover: {
      boxShadow: "shadowFocus"
    }
  }
};
var baseCloseStyles = {
  default: {
    _hover: {
      cursor: "pointer",
      boxShadow: "shadowBorderPrimaryStronger"
    }
  },
  error: {
    _hover: {
      backgroundColor: "colorBackgroundErrorWeakest",
      boxShadow: "shadowBorderErrorStronger",
      cursor: "pointer"
    }
  }
};
var selectedBaseCloseStyles = {
  default: {
    _hover: {
      cursor: "pointer",
      backgroundColor: "colorBackgroundPrimary",
      boxShadow: "shadowBorderPrimary"
    }
  },
  error: {
    _hover: {
      cursor: "pointer",
      backgroundColor: "colorBackgroundErrorStrongest",
      boxShadow: "shadowBorderErrorStrongest"
    }
  }
};
var closeInheritColorStyles = {
  color: "inherit",
  _hover: {
    color: "inherit"
  }
};
var closeColorStyles = {
  default: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextPrimaryStronger"
    }
  },
  error: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextErrorStronger"
    }
  }
};
var selectedCloseColorStyles = {
  default: {
    color: "colorTextWeakest",
    _hover: {
      color: "colorTextInverse"
    }
  },
  error: {
    color: "colorTextInverse",
    _hover: {
      color: "colorTextWeakest"
    }
  }
};

// src/FormPillButton.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { Truncate } from "@twilio-paste/truncate";
import * as React from "react";

// src/useFormPillState.tsx
import { useCompositeState } from "@twilio-paste/reakit-library";
import { createContext } from "react";
var useFormPillState = (config = {}) => {
  return {
    ...useCompositeState({
      ...config,
      orientation: "horizontal",
      loop: true
    })
  };
};
var FormPillGroupContext = createContext({
  size: "default",
  variant: "listbox"
});

// src/FormPillButton.tsx
var sizeStyles = {
  default: {
    fontSize: "fontSize20",
    height: "sizeIcon40"
  },
  large: {
    fontSize: "fontSize30",
    height: "sizeIcon50"
  }
};
var FormPillButton = React.forwardRef(
  ({
    element = "FORM_PILL",
    selected = false,
    variant = "default",
    isHoverable = false,
    isDisabled = false,
    isDismissable = false,
    i18nErrorLabel = "(error)",
    ...props
  }, ref) => {
    const computedStyles = React.useMemo(() => {
      const hasHoverStyles = isHoverable && !isDisabled;
      return hasHoverStyles ? { ...pillStyles[variant], ...hoverPillStyles[variant] } : pillStyles[variant];
    }, [isHoverable, isDisabled, variant]);
    const { size, variant: groupVariant } = React.useContext(FormPillGroupContext);
    const { height, fontSize } = sizeStyles[size];
    const renderChildren = (children) => {
      if (typeof children === "string") {
        return /* @__PURE__ */ React.createElement(Truncate, { title: children }, children);
      }
      if (React.isValidElement(children)) {
        if (children.props.children && typeof children.props.children === "string") {
          return /* @__PURE__ */ React.createElement(Box, { minWidth: "0", element: `${element}_TEXT_TRUNCATE_WRAPPER` }, /* @__PURE__ */ React.createElement(children.type, { ...children.props }, renderChildren(children.props.children)));
        }
        return /* @__PURE__ */ React.createElement(children.type, { ...children.props }, renderChildren(children.props.children));
      }
      if (Array.isArray(children)) {
        return children.map((child) => renderChildren(child));
      }
      return children;
    };
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        element,
        ref,
        "aria-selected": selected,
        "aria-disabled": isDisabled,
        role: groupVariant === "tree" ? "treeitem" : "option",
        type: groupVariant === "tree" ? void 0 : "button",
        as: groupVariant === "tree" ? "div" : "button",
        margin: "space0",
        position: "relative",
        borderRadius: "borderRadiusPill",
        borderStyle: "none",
        cursor: "default",
        height,
        fontFamily: "inherit",
        fontSize,
        fontWeight: "fontWeightMedium",
        outline: "none",
        paddingLeft: "space30",
        paddingRight: isDismissable ? size === "large" ? "space90" : "space80" : "space30",
        transition: "background-color 150ms ease-in, border-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in",
        maxWidth: "100%",
        ...computedStyles
      },
      /* @__PURE__ */ React.createElement(Box, { display: "flex", height: "100%", alignItems: "center", columnGap: "space20", opacity: isDisabled ? 0.3 : 1 }, variant === "error" ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ErrorIcon, { decorative: true, size: size === "large" ? "sizeIcon20" : "sizeIcon10" }), /* @__PURE__ */ React.createElement(ScreenReaderOnly, null, i18nErrorLabel)) : null, renderChildren(props.children))
    );
  }
);
FormPillButton.displayName = "FormPillButton";

// src/PillCloseIcon.tsx
var import_deepmerge = __toESM(require_cjs());
import { Box as Box2 } from "@twilio-paste/box";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import * as React2 from "react";
var PillCloseIcon = ({
  element = "FORM_PILL_CLOSE",
  onClick = () => {
  },
  selected = false,
  variant = "default",
  pillIsHoverable = false
}) => {
  const { size } = React2.useContext(FormPillGroupContext);
  const baseStyles = selected ? selectedBaseCloseStyles[variant] : baseCloseStyles[variant];
  let colorStyles = selected ? selectedCloseColorStyles[variant] : closeColorStyles[variant];
  if (pillIsHoverable) {
    colorStyles = closeInheritColorStyles;
  }
  const computedStyles = (0, import_deepmerge.default)(baseStyles, colorStyles);
  return /* @__PURE__ */ React2.createElement(
    Box2,
    {
      element,
      onClick,
      ...computedStyles,
      position: "absolute",
      right: 0,
      top: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: size === "large" ? "sizeIcon50" : "sizeIcon40",
      width: size === "large" ? "sizeIcon50" : "sizeIcon40",
      borderRadius: "borderRadiusCircle",
      borderWidth: "borderWidth10",
      borderStyle: "solid",
      borderColor: "transparent",
      transition: "color 150ms ease-in, border-color 150ms ease-in, background-color 150ms ease-in"
    },
    /* @__PURE__ */ React2.createElement(CloseIcon, { decorative: true, size: size === "large" ? "sizeIcon20" : "sizeIcon10", color: "inherit" })
  );
};
PillCloseIcon.displayName = "PillCloseIcon";

// src/FormPill.tsx
var FormPill = React3.forwardRef(
  ({
    element = "FORM_PILL",
    onDismiss,
    onSelect,
    next,
    selected,
    variant = "default",
    disabled = false,
    i18nErrorLabel,
    ...props
  }, ref) => {
    if (selected && disabled) {
      throw new Error("[Paste FormPill] FormPills cannot be selected and disabled at the same time.");
    }
    const isHoverable = onSelect != null;
    const isDismissable = onDismiss != null;
    let computedStyles = {};
    if (isHoverable) {
      computedStyles = selected ? selectedWrapperStyles[variant] : wrapperStyles[variant];
    }
    const handleKeydown = React3.useCallback(
      (event) => {
        if ((event.key === "Backspace" || event.key === "Delete") && typeof onDismiss === "function") {
          onDismiss(event);
          if (typeof next === "function") {
            next();
          }
        }
      },
      [onDismiss, next]
    );
    return /* @__PURE__ */ React3.createElement(
      Box3,
      {
        element: `${element}_WRAPPER`,
        position: "relative",
        display: "inline-block",
        borderRadius: "borderRadiusPill",
        maxWidth: "100%",
        ...computedStyles
      },
      /* @__PURE__ */ React3.createElement(
        CompositeItem,
        {
          ...safelySpreadBoxProps2(props),
          element,
          ref,
          as: FormPillButton,
          focusable: disabled,
          onKeyDown: disabled ? void 0 : handleKeydown,
          onClick: disabled ? void 0 : onSelect,
          next,
          isDisabled: disabled,
          isDismissable,
          isHoverable,
          selected,
          variant,
          i18nErrorLabel
        },
        props.children
      ),
      isDismissable && !disabled ? /* @__PURE__ */ React3.createElement(
        PillCloseIcon,
        {
          element: `${element}_CLOSE`,
          onClick: onDismiss,
          selected,
          variant,
          pillIsHoverable: isHoverable
        }
      ) : null
    );
  }
);
FormPill.displayName = "FormPill";

// src/FormPillGroup.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { Composite } from "@twilio-paste/reakit-library";
import { ScreenReaderOnly as ScreenReaderOnly2 } from "@twilio-paste/screen-reader-only";
import { useUID } from "@twilio-paste/uid-library";
import * as React4 from "react";
var SizeStyles = {
  default: {
    columnGap: "space20",
    rowGap: "space20"
  },
  large: {
    columnGap: "space30",
    rowGap: "space30"
  }
};
var FormPillGroupStyles = React4.forwardRef(
  ({ element = "FORM_PILL_GROUP", display = "flex", size = "default", variant = "listbox", ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(FormPillGroupContext.Provider, { value: { size, variant } }, /* @__PURE__ */ React4.createElement(
      Box4,
      {
        ...safelySpreadBoxProps3(props),
        element,
        ref,
        role: variant === "tree" ? "tree" : "listbox",
        lineHeight: "lineHeight30",
        margin: "space0",
        padding: "space0",
        display,
        flexWrap: "wrap",
        maxWidth: "100%",
        ...SizeStyles[size]
      },
      props.children
    ));
  }
);
FormPillGroupStyles.displayName = "StyledFormPillGroup";
var FormPillGroup = React4.forwardRef(
  ({ i18nKeyboardControls = "Press Delete or Backspace to remove. Press Enter to toggle selection.", ...props }, ref) => {
    const keyboardControlsId = useUID();
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(ScreenReaderOnly2, { id: keyboardControlsId }, i18nKeyboardControls), /* @__PURE__ */ React4.createElement(Composite, { as: FormPillGroupStyles, ref, "aria-describedby": keyboardControlsId, ...props }, props.children));
  }
);
FormPillGroup.displayName = "FormPillGroup";
export {
  FormPill,
  FormPillGroup,
  useFormPillState
};
