// src/Pagination.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import * as React from "react";
var Pagination = React.forwardRef(
  ({ children, element = "PAGINATION", label, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(Box, { ...safelySpreadBoxProps(props), element, ref, "aria-label": label, as: "nav", role: "navigation" }, children);
  }
);
Pagination.displayName = "Pagination";

// src/PaginationItems.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { useUIDSeed } from "@twilio-paste/uid-library";
import * as React2 from "react";

// src/styles.ts
var ULStyles = {
  display: "inline-flex",
  margin: "space0",
  padding: "space0"
};
var LIStyles = {
  listStyleType: "none",
  margin: "space0",
  padding: "space0"
};

// src/PaginationItems.tsx
var PaginationItems = React2.forwardRef(
  ({ children, element = "PAGINATION_ITEMS", ...props }, ref) => {
    const [validChildren] = React2.useMemo(
      () => [React2.Children.toArray(children).filter((child) => React2.isValidElement(child))],
      [children]
    );
    const keySeed = useUIDSeed();
    return /* @__PURE__ */ React2.createElement(Box2, { ...ULStyles, ...safelySpreadBoxProps2(props), ref, element, as: "ul" }, validChildren.map((child, index) => {
      return /* @__PURE__ */ React2.createElement(
        Box2,
        {
          ...LIStyles,
          key: keySeed(`pagination-items-${index}`),
          element: `${element}_ITEM`,
          as: "li",
          marginRight: "space90",
          _last: {
            marginRight: "space0"
          }
        },
        child
      );
    }));
  }
);
PaginationItems.displayName = "PaginationItems";

// src/PaginationArrow/index.tsx
import * as React7 from "react";

// src/utils.ts
var handleLinkValidation = ({ as, href }) => {
  const hasHref = href != null && href !== "";
  if (as !== "a" && hasHref) {
    throw new Error(
      `[Paste: Pagination] You cannot pass href into button pagination without the 'a' tag.  Use 'as="a"'.`
    );
  }
  if (as === "a" && !hasHref) {
    throw new Error(`[Paste: Pagination] Missing href prop for link pagination.`);
  }
};

// src/PaginationArrow/PaginationBackArrow.tsx
import { ArrowBackIcon } from "@twilio-paste/icons/esm/ArrowBackIcon";
import { Text } from "@twilio-paste/text";
import * as React5 from "react";

// src/PaginationArrow/PaginationArrowButton.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React3 from "react";
var PaginationArrowButton = React3.forwardRef(
  ({ children, element = "PAGINATION_ARROW_BUTTON", disabled, visibleLabel, ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      Box3,
      {
        ...safelySpreadBoxProps3(props),
        element,
        ref,
        "aria-hidden": disabled,
        alignItems: "center",
        appearance: "none",
        border: "none",
        background: "none",
        borderColor: "colorBorder",
        borderRadius: visibleLabel ? "borderRadius10" : "borderRadiusCircle",
        color: "colorText",
        display: "flex",
        fontFamily: "inherit",
        fontVariantNumeric: "tabular-nums",
        fontWeight: "fontWeightNormal",
        lineHeight: "lineHeight30",
        margin: "space0",
        outline: "none",
        opacity: disabled ? "0" : "1",
        padding: "space0",
        position: "relative",
        textDecoration: "none",
        transition: "border-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in, opacity 150ms ease-in, visibility 150ms ease-in",
        visibility: disabled ? "hidden" : "visible",
        _hover: {
          borderColor: "colorBorderPrimaryStronger",
          color: "colorTextLinkStronger",
          cursor: "pointer",
          textDecoration: "none"
        },
        _focus: {
          borderColor: "colorBorderPrimaryStronger",
          boxShadow: "shadowFocus",
          color: "colorTextLinkStronger",
          textDecoration: "none"
        },
        _active: { textDecoration: "none" }
      },
      children
    );
  }
);
PaginationArrowButton.displayName = "PaginationArrowButton";

// src/PaginationArrow/PaginationArrowIconWrapper.tsx
import { Box as Box4 } from "@twilio-paste/box";
import * as React4 from "react";
var PaginationArrowIconWrapper = ({
  children,
  element = "PAGINATION_ARROW_ICON_WRAPPER",
  isFocused,
  isHovered
}) => {
  return /* @__PURE__ */ React4.createElement(
    Box4,
    {
      element,
      alignItems: "center",
      backgroundColor: "colorBackgroundBody",
      boxShadow: isHovered && !isFocused ? "shadowBorderPrimary" : "shadowBorderWeak",
      borderRadius: "borderRadiusCircle",
      display: "flex",
      height: "sizeSquare80",
      justifyContent: "center",
      transition: "background-color 100ms ease-in",
      width: "sizeSquare80"
    },
    children
  );
};
PaginationArrowIconWrapper.displayName = "PaginationArrowIconWrapper";

// src/PaginationArrow/PaginationBackArrow.tsx
var PaginationBackArrow = React5.forwardRef(
  ({ as = "button", element = "PAGINATION_ARROW", disabled, isFocused, isHovered, label, visibleLabel, ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(
      PaginationArrowButton,
      {
        ...props,
        ref,
        as,
        disabled,
        visibleLabel,
        element: `${element}_BUTTON`
      },
      /* @__PURE__ */ React5.createElement(PaginationArrowIconWrapper, { isFocused, isHovered, element: `${element}_ICON_WRAPPER` }, /* @__PURE__ */ React5.createElement(
        ArrowBackIcon,
        {
          decorative: false,
          color: isHovered ? "colorTextPrimary" : "colorText",
          display: "block",
          title: label,
          element: `${element}_ICON`
        }
      )),
      visibleLabel ? /* @__PURE__ */ React5.createElement(
        Text,
        {
          "aria-hidden": "true",
          as: "span",
          color: isHovered ? "colorTextLink" : "colorText",
          fontWeight: "fontWeightMedium",
          marginLeft: "space30",
          element: `${element}_TEXT`
        },
        visibleLabel
      ) : null
    );
  }
);
PaginationBackArrow.displayName = "PaginationBackArrow";

// src/PaginationArrow/PaginationForwardArrow.tsx
import { ArrowForwardIcon } from "@twilio-paste/icons/esm/ArrowForwardIcon";
import { Text as Text2 } from "@twilio-paste/text";
import * as React6 from "react";
var PaginationForwardArrow = React6.forwardRef(
  ({ as = "button", element = "PAGINATION_ARROW", disabled, isFocused, isHovered, label, visibleLabel, ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      PaginationArrowButton,
      {
        ...props,
        ref,
        element: `${element}_BUTTON`,
        as,
        disabled,
        visibleLabel
      },
      visibleLabel ? /* @__PURE__ */ React6.createElement(
        Text2,
        {
          "aria-hidden": "true",
          as: "span",
          color: isHovered ? "colorTextLink" : "inherit",
          fontWeight: "fontWeightMedium",
          marginRight: "space30",
          element: `${element}_TEXT`
        },
        visibleLabel
      ) : null,
      /* @__PURE__ */ React6.createElement(PaginationArrowIconWrapper, { isFocused, isHovered, element: `${element}_ICON_WRAPPER` }, /* @__PURE__ */ React6.createElement(
        ArrowForwardIcon,
        {
          decorative: false,
          color: isHovered ? "colorTextPrimary" : "colorText",
          display: "block",
          title: label,
          element: `${element}_ICON`
        }
      ))
    );
  }
);
PaginationForwardArrow.displayName = "PaginationForwardArrow";

// src/PaginationArrow/index.tsx
var PaginationArrow = React7.forwardRef(
  ({
    as = "button",
    element = "PAGINATION_ARROW",
    disabled,
    href,
    isHovered = false,
    isFocused = false,
    label,
    variant = "back",
    visibleLabel,
    ...props
  }, ref) => {
    const [hovered, setHovered] = React7.useState(isHovered);
    const [focused, setFocused] = React7.useState(isFocused);
    handleLinkValidation({ as, href });
    return variant === "back" ? /* @__PURE__ */ React7.createElement(
      PaginationBackArrow,
      {
        ...props,
        element,
        ref,
        as,
        disabled,
        href,
        isFocused: focused,
        isHovered: hovered,
        label,
        variant,
        visibleLabel,
        onMouseEnter: (event) => {
          if (typeof props.onMouseEnter === "function") {
            props.onMouseEnter(event);
          }
          setHovered(true);
        },
        onMouseLeave: (event) => {
          if (typeof props.onMouseLeave === "function") {
            props.onMouseLeave(event);
          }
          setHovered(false);
        },
        onFocus: (event) => {
          if (typeof props.onFocus === "function") {
            props.onFocus(event);
          }
          setFocused(true);
        },
        onBlur: (event) => {
          if (typeof props.onBlur === "function") {
            props.onBlur(event);
          }
          setFocused(false);
        }
      }
    ) : /* @__PURE__ */ React7.createElement(
      PaginationForwardArrow,
      {
        ...props,
        element,
        ref,
        as,
        disabled,
        href,
        isFocused: focused,
        isHovered: hovered,
        label,
        variant,
        visibleLabel,
        onMouseEnter: (event) => {
          if (typeof props.onMouseEnter === "function") {
            props.onMouseEnter(event);
          }
          setHovered(true);
        },
        onMouseLeave: (event) => {
          if (typeof props.onMouseLeave === "function") {
            props.onMouseLeave(event);
          }
          setHovered(false);
        },
        onFocus: (event) => {
          if (typeof props.onFocus === "function") {
            props.onFocus(event);
          }
          setFocused(true);
        },
        onBlur: (event) => {
          if (typeof props.onBlur === "function") {
            props.onBlur(event);
          }
          setFocused(false);
        }
      }
    );
  }
);
PaginationArrow.displayName = "PaginationArrow";

// src/PaginationLabel.tsx
import { Text as Text3, safelySpreadTextProps } from "@twilio-paste/text";
import * as React8 from "react";
var PaginationLabel = React8.forwardRef(
  ({ children, element = "PAGINATION_LABEL", ...props }, ref) => {
    return /* @__PURE__ */ React8.createElement(
      Text3,
      {
        ...safelySpreadTextProps(props),
        ref,
        element,
        as: "div",
        color: "colorTextWeak",
        textAlign: "center",
        fontWeight: "fontWeightNormal",
        lineHeight: "lineHeight50"
      },
      children
    );
  }
);
PaginationLabel.displayName = "PaginationLabel";

// src/PaginationEllipsis.tsx
import { Text as Text4, safelySpreadTextProps as safelySpreadTextProps2 } from "@twilio-paste/text";
import * as React9 from "react";
var PaginationEllipsis = React9.forwardRef(
  ({ label, element = "PAGINATION_ELLIPSIS", ...props }, ref) => {
    return /* @__PURE__ */ React9.createElement(
      Text4,
      {
        ...safelySpreadTextProps2(props),
        ref,
        element,
        "aria-label": label,
        as: "span",
        display: "inline-block",
        paddingBottom: "space20",
        paddingLeft: "space30",
        paddingRight: "space30",
        paddingTop: "space20",
        fontWeight: "fontWeightMedium"
      },
      "\u2026"
    );
  }
);
PaginationEllipsis.displayName = "PaginationEllipsis";

// src/PaginationNumber.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { Text as Text5 } from "@twilio-paste/text";
import * as React10 from "react";
var PaginationNumber = React10.forwardRef(
  ({ as = "button", element = "PAGINATION_NUMBER", children, href, isCurrent, label, ...props }, ref) => {
    handleLinkValidation({ as, href });
    return /* @__PURE__ */ React10.createElement(
      Box5,
      {
        ...safelySpreadBoxProps4(props),
        ref,
        element,
        "aria-label": label,
        "aria-current": isCurrent,
        as,
        href,
        appearance: "none",
        background: "none",
        backgroundColor: isCurrent ? "colorBackgroundPrimaryWeakest" : "transparent",
        borderColor: isCurrent ? "colorBorderPrimary" : "transparent",
        borderRadius: "borderRadius20",
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        color: isCurrent ? "colorTextLink" : "colorTextWeak",
        display: "inline-block",
        fontFamily: "inherit",
        fontSize: "fontSize30",
        fontVariantNumeric: "tabular-nums",
        fontWeight: "fontWeightNormal",
        lineHeight: "lineHeight30",
        margin: "space0",
        outline: "none",
        paddingBottom: "space20",
        paddingLeft: "space30",
        paddingRight: "space30",
        paddingTop: "space20",
        position: "relative",
        textDecoration: "none",
        transition: "background-color 100ms ease-in, border-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in",
        _hover: {
          backgroundColor: "colorBackgroundPrimaryWeakest",
          borderColor: isCurrent ? "colorBorderPrimaryStronger" : "transparent",
          boxShadow: isCurrent ? "none" : "shadowBorderPrimaryStronger",
          color: "colorTextLinkStronger",
          cursor: "pointer",
          textDecoration: "none"
        },
        _focus: {
          boxShadow: "shadowFocus",
          borderColor: "transparent",
          textDecoration: "none",
          color: "colorTextLink"
        },
        _active: { textDecoration: "none" }
      },
      children ? /* @__PURE__ */ React10.createElement(Text5, { "aria-hidden": "true", as: "span", color: "inherit", fontWeight: "fontWeightMedium", element: `${element}_TEXT` }, children) : null
    );
  }
);
PaginationNumber.displayName = "PaginationNumber";

// src/PaginationNumbers.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import { useUIDSeed as useUIDSeed2 } from "@twilio-paste/uid-library";
import * as React11 from "react";
var PaginationNumbers = React11.forwardRef(
  ({ children, element = "PAGINATION_NUMBERS", pageLabel, ...props }, ref) => {
    const [validChildren] = React11.useMemo(
      () => [React11.Children.toArray(children).filter((child) => React11.isValidElement(child))],
      [children]
    );
    const keySeed = useUIDSeed2();
    return /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(
      Box6,
      {
        ...ULStyles,
        ...safelySpreadBoxProps5(props),
        element,
        ref,
        as: "ul",
        justifyContent: "center",
        paddingLeft: "space40",
        paddingRight: "space40",
        paddingBottom: "space20",
        width: "100%"
      },
      validChildren.map((child, index) => {
        return /* @__PURE__ */ React11.createElement(
          Box6,
          {
            ...LIStyles,
            key: keySeed(`pagination-numbers-${index}`),
            element: `${element}_ITEM`,
            as: "li",
            marginRight: "space30",
            _last: {
              marginRight: "space0"
            }
          },
          child
        );
      })
    ), pageLabel ? /* @__PURE__ */ React11.createElement(PaginationLabel, null, pageLabel) : null);
  }
);
PaginationNumbers.displayName = "PaginationNumbers";
export {
  Pagination,
  PaginationArrow,
  PaginationEllipsis,
  PaginationItems,
  PaginationLabel,
  PaginationNumber,
  PaginationNumbers
};
