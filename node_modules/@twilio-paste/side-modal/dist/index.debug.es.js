// src/index.tsx
import {
  useNonModalDialogPrimitiveState as useNonModalDialogPrimitiveState2
} from "@twilio-paste/non-modal-dialog-primitive";

// src/SideModal.tsx
import { animated, useTransition } from "@twilio-paste/animation-library";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { StyledBase } from "@twilio-paste/theme";
import * as React2 from "react";

// src/SideModalContext.tsx
import * as React from "react";
var SideModalContext = React.createContext({});

// src/SideModal.tsx
var AnimatedBox = animated(Box);
var getAnimationStates = () => ({
  from: { opacity: 0, transform: `translateX(100%)` },
  enter: { opacity: 1, transform: `translateX(0%)` },
  leave: { opacity: 0, transform: `translateX(100%)` },
  config: {
    mass: 0.5,
    tension: 220,
    friction: 20
  }
});
var SideModal = React2.forwardRef(
  ({ children, element = "SIDE_MODAL", hideOnEsc = true, ...props }, ref) => {
    const dialog = React2.useContext(SideModalContext);
    const transitions = useTransition(dialog.visible, getAnimationStates());
    return /* @__PURE__ */ React2.createElement(
      NonModalDialogPrimitive,
      {
        ...dialog,
        ...safelySpreadBoxProps(props),
        preventBodyScroll: false,
        hideOnClickOutside: false,
        hideOnEsc,
        element: `${element}_CONTAINER`,
        ref,
        as: Box,
        zIndex: "zIndex80",
        position: "fixed",
        top: "0 !important",
        right: "0 !important",
        bottom: "0 !important",
        left: "auto !important",
        transform: "none !important",
        _focus: {
          outline: "none"
        }
      },
      /* @__PURE__ */ React2.createElement(StyledBase, null, transitions((styles, item) => {
        return item && /* @__PURE__ */ React2.createElement(
          AnimatedBox,
          {
            style: styles,
            element,
            display: "grid",
            gridTemplateRows: "auto 1fr auto",
            height: "100vh",
            backgroundColor: "colorBackgroundBody",
            boxShadow: "shadow",
            width: "size80"
          },
          children
        );
      }))
    );
  }
);
SideModal.displayName = "SideModal";

// src/SideModalButton.tsx
import { Button } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import * as React3 from "react";
var SideModalButton = React3.forwardRef(
  ({ children, element = "SIDE_MODAL_BUTTON", ...props }, ref) => {
    const dialog = React3.useContext(SideModalContext);
    return /* @__PURE__ */ React3.createElement(NonModalDialogDisclosurePrimitive, { element, ...dialog, ...props, as: Button, ref }, children);
  }
);
SideModalButton.displayName = "SideModalButton";

// src/SideModalHeader.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Button as Button2 } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React4 from "react";
var SideModalHeader = React4.forwardRef(
  ({ children, element = "SIDE_MODAL_HEADER", i18nDismissLabel = "close", ...props }, ref) => {
    const { hide } = React4.useContext(SideModalContext);
    return /* @__PURE__ */ React4.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        ref,
        paddingRight: "space90",
        paddingLeft: "space90",
        paddingTop: "space90",
        element,
        display: "flex",
        flexDirection: "row",
        alignItems: "flex-start"
      },
      /* @__PURE__ */ React4.createElement(Box2, { display: "flex", flexGrow: 1, marginRight: "space70" }, children),
      /* @__PURE__ */ React4.createElement(Button2, { element: `${element}_CLOSE_BUTTON`, variant: "secondary_icon", size: "reset", onClick: hide }, /* @__PURE__ */ React4.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon50" }), /* @__PURE__ */ React4.createElement(ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
SideModalHeader.displayName = "SideModalHeader";

// src/SideModalHeading.tsx
import { Heading } from "@twilio-paste/heading";
import * as React5 from "react";
var SideModalHeading = React5.forwardRef(
  ({ children, as = "h2", element = "SIDE_MODAL_HEADING", ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(Heading, { ...props, as, element, marginBottom: "space0", variant: "heading30", ref }, children);
  }
);
SideModalHeading.displayName = "SideModalHeading";

// src/SideModalContainer.tsx
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
import * as React6 from "react";
var BaseSideModalContainer = ({
  gutter,
  placement,
  modal,
  children,
  state,
  ...initialState
}) => {
  const dialog = state || useNonModalDialogPrimitiveState({
    modal: true,
    unstable_fixed: true,
    ...initialState
  });
  return /* @__PURE__ */ React6.createElement(SideModalContext.Provider, { value: { ...dialog } }, children);
};
BaseSideModalContainer.displayName = "BaseSideModalContainer";
var SideModalContainer = React6.memo(BaseSideModalContainer);
SideModalContainer.displayName = "SideModalContainer";

// src/SideModalBody.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React7 from "react";
var SideModalBody = React7.forwardRef(
  ({ children, element = "SIDE_MODAL_BODY", ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(Box3, { ...safelySpreadBoxProps3(props), element, ref, overflowY: "auto", padding: "space90" }, children);
  }
);
SideModalBody.displayName = "SideModalBody";

// src/SideModalFooter.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import * as React8 from "react";
var SideModalFooter = React8.forwardRef(
  ({ children, element = "SIDE_MODAL_FOOTER", ...props }, ref) => {
    return /* @__PURE__ */ React8.createElement(
      Box4,
      {
        ...safelySpreadBoxProps4(props),
        as: "div",
        element,
        ref,
        paddingRight: "space90",
        paddingLeft: "space90",
        paddingBottom: "space90",
        display: "flex"
      },
      children
    );
  }
);
SideModalFooter.displayName = "SideModalFooter";

// src/SideModalFooterActions.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React9 from "react";
var SideModalFooterActions = React9.forwardRef(
  ({ children, element = "SIDE_MODAL_FOOTER_ACTIONS", justifyContent = "flex-start", ...props }, ref) => {
    return /* @__PURE__ */ React9.createElement(
      Box5,
      {
        ...safelySpreadBoxProps5(props),
        display: "flex",
        justifyContent,
        flexWrap: "wrap",
        flexGrow: 1,
        element,
        columnGap: "space50",
        alignItems: "center",
        ref
      },
      children
    );
  }
);
SideModalFooterActions.displayName = "SideModalFooterActions";

// src/index.tsx
var useSideModalState = (options) => {
  return useNonModalDialogPrimitiveState2({ modal: true, unstable_fixed: true, ...options });
};
export {
  SideModal,
  SideModalBody,
  SideModalButton,
  SideModalContainer,
  SideModalFooter,
  SideModalFooterActions,
  SideModalHeader,
  SideModalHeading,
  useSideModalState
};
