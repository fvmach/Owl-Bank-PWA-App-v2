"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var src_exports={};__export(src_exports,{KeyboardKey:()=>KeyboardKey,KeyboardKeyGroup:()=>KeyboardKeyGroup,useKeyCombination:()=>useKeyCombination,useKeyCombinations:()=>useKeyCombinations});module.exports=__toCommonJS(src_exports);var import_box=require("@twilio-paste/box"),React2=__toESM(require("react"));var React=__toESM(require("react")),KeyboardKeyCombinationContext=React.createContext({});var BaseStyles={default:{borderColor:"colorBorderWeak",backgroundColor:"colorBackgroundWeak",boxShadow:"shadowBorderBottomWeak"},inverse:{borderColor:"colorBorderInverseWeaker",backgroundColor:"colorBackgroundInverse",color:"colorTextInverse",boxShadow:"shadowBorderBottomInverseWeaker"}},DisabledStyles={default:{color:"colorTextWeak",borderColor:"colorBorderWeakest",boxShadow:void 0},inverse:{color:"colorTextInverseWeaker",borderColor:"colorBorderInverseWeakest",boxShadow:void 0}},PressedStyles={default:{backgroundColor:"colorBackgroundStrong",boxShadow:void 0},inverse:{backgroundColor:"colorBackgroundInverseStronger",boxShadow:void 0}},KeyboardKey=React2.forwardRef(({element="KEYBOARD_KEY",keyEvent,...props},ref)=>{let{disabled,activeKeys,enablePressStyles,variant="default"}=React2.useContext(KeyboardKeyCombinationContext),isKeyActive=!disabled&&activeKeys&&keyEvent&&activeKeys.map(k=>k.toLowerCase()).includes(keyEvent.toLowerCase());return React2.createElement(import_box.Box,{...(0,import_box.safelySpreadBoxProps)(props),element,ref,borderWidth:"borderWidth10",borderRadius:"borderRadius20",borderStyle:"solid",width:"fit-content",minWidth:"sizeBase60",display:"inline-flex",justifyContent:"center",paddingX:"space20",as:"kbd",fontFamily:"fontFamilyText",...BaseStyles[variant],...disabled?DisabledStyles[variant]:{},...isKeyActive&&enablePressStyles?PressedStyles[variant]:{}},props.children)});KeyboardKey.displayName="KeyboardKey";var import_box2=require("@twilio-paste/box"),React3=__toESM(require("react"));var KeyboardKeyGroup=React3.forwardRef(({element="KEYBOARD_KEY_GROUP",activeKeys,disabled=!1,enablePressStyles=!1,variant="default",...props},ref)=>React3.createElement(KeyboardKeyCombinationContext.Provider,{value:{activeKeys,disabled,enablePressStyles,variant}},React3.createElement(import_box2.Box,{...(0,import_box2.safelySpreadBoxProps)(props),element,ref,display:"inline-flex",columnGap:"space20"},props.children)));KeyboardKeyGroup.displayName="KeyboardKeyGroup";var React4=__toESM(require("react")),useKeyEvents=()=>{let[activeKeys,setActiveKeys]=React4.useState([]),handleKeyDown=e=>{e.repeat||setActiveKeys(prev=>Array.from(new Set([...prev,e.key.toLowerCase()])))},handleKeyUp=e=>{e.key==="Meta"?setActiveKeys([]):setActiveKeys(prev=>[...prev].filter(k=>k.toLowerCase()!==e.key.toLowerCase()))};return React4.useEffect(()=>(window.addEventListener("keydown",handleKeyDown),window.addEventListener("keyup",handleKeyUp),()=>{window.removeEventListener("keydown",handleKeyDown),window.removeEventListener("keyup",handleKeyUp)}),[]),{activeKeys}},stringArrayMatches=(arr1,arr2)=>JSON.stringify(arr1.sort((a,b)=>a.localeCompare(b)).map(s=>s.toLowerCase()))===JSON.stringify(arr2.sort((a,b)=>a.localeCompare(b))),useKeyCombination=({keys,onCombinationPress,disabled,enablePressStyles})=>{let{activeKeys}=useKeyEvents();return React4.useEffect(()=>{stringArrayMatches(keys,activeKeys)&&!disabled&&onCombinationPress()},[activeKeys]),{activeKeys,disabled,enablePressStyles}},useKeyCombinations=({combinations})=>{let{activeKeys}=useKeyEvents();return React4.useEffect(()=>{let combinationMatch=combinations.find(combos=>stringArrayMatches(combos.keys,activeKeys));combinationMatch&&!combinationMatch.disabled&&combinationMatch.onCombinationPress()},[activeKeys,combinations]),{activeKeys}};
