// src/KeyboardKey.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import * as React2 from "react";

// src/KeyboardKeyContext.tsx
import * as React from "react";
var KeyboardKeyCombinationContext = React.createContext(
  {}
);

// src/KeyboardKey.tsx
var BaseStyles = {
  default: {
    borderColor: "colorBorderWeak",
    backgroundColor: "colorBackgroundWeak",
    boxShadow: "shadowBorderBottomWeak"
  },
  inverse: {
    borderColor: "colorBorderInverseWeaker",
    backgroundColor: "colorBackgroundInverse",
    color: "colorTextInverse",
    boxShadow: "shadowBorderBottomInverseWeaker"
  }
};
var DisabledStyles = {
  default: {
    color: "colorTextWeak",
    borderColor: "colorBorderWeakest",
    boxShadow: void 0
  },
  inverse: {
    color: "colorTextInverseWeaker",
    borderColor: "colorBorderInverseWeakest",
    boxShadow: void 0
  }
};
var PressedStyles = {
  default: {
    backgroundColor: "colorBackgroundStrong",
    boxShadow: void 0
  },
  inverse: {
    backgroundColor: "colorBackgroundInverseStronger",
    boxShadow: void 0
  }
};
var KeyboardKey = React2.forwardRef(
  ({ element = "KEYBOARD_KEY", keyEvent, ...props }, ref) => {
    const {
      disabled,
      activeKeys,
      enablePressStyles,
      variant = "default"
    } = React2.useContext(KeyboardKeyCombinationContext);
    const isKeyActive = !disabled && activeKeys && keyEvent && activeKeys.map((k) => k.toLowerCase()).includes(keyEvent.toLowerCase());
    return /* @__PURE__ */ React2.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        element,
        ref,
        borderWidth: "borderWidth10",
        borderRadius: "borderRadius20",
        borderStyle: "solid",
        width: "fit-content",
        minWidth: "sizeBase60",
        display: "inline-flex",
        justifyContent: "center",
        paddingX: "space20",
        as: "kbd",
        fontFamily: "fontFamilyText",
        ...BaseStyles[variant],
        ...disabled ? DisabledStyles[variant] : {},
        ...isKeyActive && enablePressStyles ? PressedStyles[variant] : {}
      },
      props.children
    );
  }
);
KeyboardKey.displayName = "KeyboardKey";

// src/KeyboardKeyGroup.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React3 from "react";
var KeyboardKeyGroup = React3.forwardRef(
  ({
    element = "KEYBOARD_KEY_GROUP",
    activeKeys,
    disabled = false,
    enablePressStyles = false,
    variant = "default",
    ...props
  }, ref) => {
    return /* @__PURE__ */ React3.createElement(KeyboardKeyCombinationContext.Provider, { value: { activeKeys, disabled, enablePressStyles, variant } }, /* @__PURE__ */ React3.createElement(Box2, { ...safelySpreadBoxProps2(props), element, ref, display: "inline-flex", columnGap: "space20" }, props.children));
  }
);
KeyboardKeyGroup.displayName = "KeyboardKeyGroup";

// src/hooks.ts
import * as React4 from "react";
var useKeyEvents = () => {
  const [activeKeys, setActiveKeys] = React4.useState([]);
  const handleKeyDown = (e) => {
    if (!e.repeat) {
      setActiveKeys((prev) => {
        return Array.from(/* @__PURE__ */ new Set([...prev, e.key.toLowerCase()]));
      });
    }
  };
  const handleKeyUp = (e) => {
    if (e.key === "Meta") {
      setActiveKeys([]);
    } else {
      setActiveKeys((prev) => [...prev].filter((k) => k.toLowerCase() !== e.key.toLowerCase()));
    }
  };
  React4.useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, []);
  return { activeKeys };
};
var stringArrayMatches = (arr1, arr2) => JSON.stringify(arr1.sort((a, b) => a.localeCompare(b)).map((s) => s.toLowerCase())) === JSON.stringify(arr2.sort((a, b) => a.localeCompare(b)));
var useKeyCombination = ({
  keys,
  onCombinationPress,
  disabled,
  enablePressStyles
}) => {
  const { activeKeys } = useKeyEvents();
  React4.useEffect(() => {
    const combinationMatch = stringArrayMatches(keys, activeKeys);
    if (combinationMatch && !disabled) {
      onCombinationPress();
    }
  }, [activeKeys]);
  return { activeKeys, disabled, enablePressStyles };
};
var useKeyCombinations = ({ combinations }) => {
  const { activeKeys } = useKeyEvents();
  React4.useEffect(() => {
    const combinationMatch = combinations.find((combos) => stringArrayMatches(combos.keys, activeKeys));
    if (combinationMatch && !combinationMatch.disabled) {
      combinationMatch.onCombinationPress();
    }
  }, [activeKeys, combinations]);
  return { activeKeys };
};
export {
  KeyboardKey,
  KeyboardKeyGroup,
  useKeyCombination,
  useKeyCombinations
};
