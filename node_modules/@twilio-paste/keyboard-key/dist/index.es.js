import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import*as React2 from"react";import*as React from"react";var KeyboardKeyCombinationContext=React.createContext({});var BaseStyles={default:{borderColor:"colorBorderWeak",backgroundColor:"colorBackgroundWeak",boxShadow:"shadowBorderBottomWeak"},inverse:{borderColor:"colorBorderInverseWeaker",backgroundColor:"colorBackgroundInverse",color:"colorTextInverse",boxShadow:"shadowBorderBottomInverseWeaker"}},DisabledStyles={default:{color:"colorTextWeak",borderColor:"colorBorderWeakest",boxShadow:void 0},inverse:{color:"colorTextInverseWeaker",borderColor:"colorBorderInverseWeakest",boxShadow:void 0}},PressedStyles={default:{backgroundColor:"colorBackgroundStrong",boxShadow:void 0},inverse:{backgroundColor:"colorBackgroundInverseStronger",boxShadow:void 0}},KeyboardKey=React2.forwardRef(({element="KEYBOARD_KEY",keyEvent,...props},ref)=>{let{disabled,activeKeys,enablePressStyles,variant="default"}=React2.useContext(KeyboardKeyCombinationContext),isKeyActive=!disabled&&activeKeys&&keyEvent&&activeKeys.map(k=>k.toLowerCase()).includes(keyEvent.toLowerCase());return React2.createElement(Box,{...safelySpreadBoxProps(props),element,ref,borderWidth:"borderWidth10",borderRadius:"borderRadius20",borderStyle:"solid",width:"fit-content",minWidth:"sizeBase60",display:"inline-flex",justifyContent:"center",paddingX:"space20",as:"kbd",fontFamily:"fontFamilyText",...BaseStyles[variant],...disabled?DisabledStyles[variant]:{},...isKeyActive&&enablePressStyles?PressedStyles[variant]:{}},props.children)});KeyboardKey.displayName="KeyboardKey";import{Box as Box2,safelySpreadBoxProps as safelySpreadBoxProps2}from"@twilio-paste/box";import*as React3 from"react";var KeyboardKeyGroup=React3.forwardRef(({element="KEYBOARD_KEY_GROUP",activeKeys,disabled=!1,enablePressStyles=!1,variant="default",...props},ref)=>React3.createElement(KeyboardKeyCombinationContext.Provider,{value:{activeKeys,disabled,enablePressStyles,variant}},React3.createElement(Box2,{...safelySpreadBoxProps2(props),element,ref,display:"inline-flex",columnGap:"space20"},props.children)));KeyboardKeyGroup.displayName="KeyboardKeyGroup";import*as React4 from"react";var useKeyEvents=()=>{let[activeKeys,setActiveKeys]=React4.useState([]),handleKeyDown=e=>{e.repeat||setActiveKeys(prev=>Array.from(new Set([...prev,e.key.toLowerCase()])))},handleKeyUp=e=>{e.key==="Meta"?setActiveKeys([]):setActiveKeys(prev=>[...prev].filter(k=>k.toLowerCase()!==e.key.toLowerCase()))};return React4.useEffect(()=>(window.addEventListener("keydown",handleKeyDown),window.addEventListener("keyup",handleKeyUp),()=>{window.removeEventListener("keydown",handleKeyDown),window.removeEventListener("keyup",handleKeyUp)}),[]),{activeKeys}},stringArrayMatches=(arr1,arr2)=>JSON.stringify(arr1.sort((a,b)=>a.localeCompare(b)).map(s=>s.toLowerCase()))===JSON.stringify(arr2.sort((a,b)=>a.localeCompare(b))),useKeyCombination=({keys,onCombinationPress,disabled,enablePressStyles})=>{let{activeKeys}=useKeyEvents();return React4.useEffect(()=>{stringArrayMatches(keys,activeKeys)&&!disabled&&onCombinationPress()},[activeKeys]),{activeKeys,disabled,enablePressStyles}},useKeyCombinations=({combinations})=>{let{activeKeys}=useKeyEvents();return React4.useEffect(()=>{let combinationMatch=combinations.find(combos=>stringArrayMatches(combos.keys,activeKeys));combinationMatch&&!combinationMatch.disabled&&combinationMatch.onCombinationPress()},[activeKeys,combinations]),{activeKeys}};export{KeyboardKey,KeyboardKeyGroup,useKeyCombination,useKeyCombinations};
