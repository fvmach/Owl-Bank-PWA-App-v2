// src/Anchor.tsx
import { Box as Box3, safelySpreadBoxProps } from "@twilio-paste/box";
import { LinkExternalIcon } from "@twilio-paste/icons/esm/LinkExternalIcon";
import * as React3 from "react";

// src/DefaultAnchor.tsx
import { Box } from "@twilio-paste/box";
import * as React from "react";
var DefaultAnchor = React.forwardRef((props, ref) => /* @__PURE__ */ React.createElement(
  Box,
  {
    ...props,
    as: "a",
    color: "colorTextLink",
    fontSize: "inherit",
    fontWeight: "inherit",
    lineHeight: "inherit",
    outline: "none",
    ref,
    textDecoration: "underline",
    _active: {
      color: "colorTextLinkStrongest",
      textDecoration: "none"
    },
    _focus: {
      boxShadow: "shadowFocus",
      color: "colorTextLink",
      textDecoration: "underline",
      borderRadius: "borderRadius20"
    },
    _hover: {
      color: "colorTextLinkStronger",
      textDecoration: "none"
    }
  },
  props.children
));
DefaultAnchor.displayName = "DefaultAnchor";

// src/InverseAnchor.tsx
import { Box as Box2 } from "@twilio-paste/box";
import * as React2 from "react";
var InverseAnchor = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(
  Box2,
  {
    ...props,
    as: "a",
    color: "colorTextInverse",
    fontSize: "inherit",
    fontWeight: "inherit",
    lineHeight: "inherit",
    outline: "none",
    ref,
    textDecoration: "underline",
    _active: {
      color: "colorTextInverse",
      textDecoration: "none"
    },
    _focus: {
      boxShadow: "shadowFocusInverse",
      color: "colorTextInverse",
      textDecoration: "underline",
      borderRadius: "borderRadius20"
    },
    _hover: {
      color: "colorTextInverse",
      textDecoration: "none"
    }
  },
  props.children
));
InverseAnchor.displayName = "InverseAnchor";

// src/Anchor.tsx
var AnchorVariants = {
  inverse: InverseAnchor,
  default: DefaultAnchor
};
var EXTERNAL_URL_REGEX = /^(https?:)\S*$/;
var EXTERNAL_TARGET_DEFAULT = "_blank";
var EXTERNAL_REL_DEFAULT = "noreferrer noopener";
var isExternalUrl = (url) => EXTERNAL_URL_REGEX.test(url);
var secureExternalLink = (href) => {
  if (!isExternalUrl(href))
    return void 0;
  return {
    rel: EXTERNAL_REL_DEFAULT,
    target: EXTERNAL_TARGET_DEFAULT
  };
};
var Anchor = React3.forwardRef(
  ({
    element = "ANCHOR",
    variant = "default",
    showExternal,
    display,
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    size,
    margin,
    marginBottom,
    marginLeft,
    marginRight,
    marginTop,
    marginX = null,
    marginY = null,
    padding,
    paddingBottom,
    paddingLeft,
    paddingRight,
    paddingTop,
    paddingX = null,
    paddingY = null,
    verticalAlign,
    i18nExternalLinkLabel = "(link takes you to an external page)",
    ...props
  }, ref) => {
    const AnchorComponent = AnchorVariants[variant];
    return /* @__PURE__ */ React3.createElement(
      AnchorComponent,
      {
        href: props.href,
        ref,
        variant,
        ...secureExternalLink(props.href),
        ...safelySpreadBoxProps(props),
        element,
        display,
        height,
        minHeight,
        maxHeight,
        width,
        minWidth,
        maxWidth,
        size,
        margin,
        marginBottom,
        marginLeft,
        marginRight,
        marginTop,
        marginX,
        marginY,
        padding,
        paddingBottom,
        paddingLeft,
        paddingRight,
        paddingTop,
        paddingX,
        paddingY,
        verticalAlign
      },
      showExternal ? /* @__PURE__ */ React3.createElement(Box3, { as: "span" }, props.children, /* @__PURE__ */ React3.createElement(Box3, { as: "span", display: "inline-block", flexShrink: 0, verticalAlign: "middle" }, /* @__PURE__ */ React3.createElement(LinkExternalIcon, { decorative: false, title: i18nExternalLinkLabel }))) : props.children
    );
  }
);
Anchor.displayName = "Anchor";
export {
  Anchor,
  isExternalUrl,
  secureExternalLink
};
