"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  BaseRadioCheckboxControl: () => BaseRadioCheckboxControl,
  BaseRadioCheckboxHelpText: () => BaseRadioCheckboxHelpText,
  BaseRadioCheckboxLabel: () => BaseRadioCheckboxLabel,
  BaseRadioCheckboxLabelText: () => BaseRadioCheckboxLabelText
});
module.exports = __toCommonJS(src_exports);

// src/BaseRadioCheckbox.tsx
var import_box = require("@twilio-paste/box");
var import_help_text = require("@twilio-paste/help-text");
var import_label = require("@twilio-paste/label");
var import_sibling_box = require("@twilio-paste/sibling-box");
var import_text = require("@twilio-paste/text");
var React = __toESM(require("react"));
var BaseRadioCheckboxControl = React.forwardRef(
  ({ children, disabled, applyHoverStyles = false, element = "BASE_RADIO_CHECKBOX_CONTROL", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_sibling_box.SiblingBox,
      {
        as: "span",
        ref,
        display: "flex",
        element,
        backgroundColor: "colorBackgroundBody",
        borderColor: applyHoverStyles ? "colorBorderPrimaryStronger" : "colorBorder",
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        height: "sizeSquare50",
        marginRight: "space20",
        marginY: "space10",
        width: "sizeSquare50",
        color: "colorTextWeakest",
        _hoverSibling: {
          borderColor: "colorBorderPrimaryStronger",
          color: "colorTextWeakest"
        },
        _focusSibling: {
          borderColor: "colorBorder",
          boxShadow: "shadowFocus",
          color: "colorTextInverse"
        },
        _activeSibling: !disabled ? {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger",
          color: "colorTextWeakest"
        } : void 0,
        _checkedSibling: {
          borderColor: "colorBorderPrimary",
          backgroundColor: "colorBackgroundPrimary",
          color: "colorTextInverse"
        },
        _disabledSibling: {
          borderColor: "colorBorderWeaker",
          backgroundColor: "colorBackgroundStrong"
        },
        _invalidSibling: {
          borderColor: "colorBorderError"
        },
        _invalidAndHoverSibling: {
          borderColor: "colorBorderErrorStronger"
        },
        _invalidAndDisabledSibling: {
          borderColor: "colorBorderWeaker"
        },
        _checkedAndHoverSibling: {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger",
          color: "colorTextWeakest"
        },
        _checkedAndFocusSibling: {
          borderColor: "colorBorderPrimary",
          backgroundColor: "colorBackgroundPrimary",
          color: "colorTextInverse"
        },
        _checkedAndActiveSibling: !disabled ? {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger"
        } : void 0,
        _checkedAndDisabledSibling: {
          borderColor: "colorBorderWeaker",
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeaker"
        },
        _checkedAndInvalidSibling: {
          borderColor: "colorBorderError",
          backgroundColor: "colorBackgroundError",
          color: "colorTextInverse"
        },
        _checkedAndInvalidAndHoverSibling: {
          borderColor: "colorBorderErrorStronger",
          backgroundColor: "colorBackgroundErrorStronger"
        },
        _checkedAndInvalidAndDisabledSibling: {
          borderColor: "colorBorderWeaker",
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeaker"
        },
        ...props
      },
      children
    );
  }
);
BaseRadioCheckboxControl.displayName = "BaseRadioCheckboxControl";
var BaseRadioCheckboxLabel = React.forwardRef(
  ({ children, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(import_label.Label, { ...props, marginBottom: "space0", ref }, /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", display: "flex" }, children));
  }
);
BaseRadioCheckboxLabel.displayName = "BaseRadioCheckboxLabel";
var BaseRadioCheckboxLabelText = React.forwardRef(
  ({ children, element = "BASE_RADIO_CHECKBOX_LABEL_TEXT", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(import_text.Text, { as: "span", color: "currentColor", marginLeft: "space20", element, ref, ...props }, children);
  }
);
BaseRadioCheckboxLabelText.displayName = "BaseRadioCheckboxLabelText";
var BaseRadioCheckboxHelpText = React.forwardRef(
  ({ children, helpTextId, element = "BASE_RADIO_CHECKBOX_HELP_TEXT_WRAPPER" }, ref) => {
    return /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", display: "block", element, marginLeft: "space70", ref }, /* @__PURE__ */ React.createElement(import_help_text.HelpText, { id: helpTextId, marginTop: "space0" }, children));
  }
);
BaseRadioCheckboxHelpText.displayName = "BaseRadioCheckboxHelpText";
