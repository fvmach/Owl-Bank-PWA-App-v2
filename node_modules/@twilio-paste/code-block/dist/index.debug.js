"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  CodeBlock: () => CodeBlock,
  CodeBlockHeader: () => CodeBlockHeader,
  CodeBlockTab: () => CodeBlockTab,
  CodeBlockTabList: () => CodeBlockTabList,
  CodeBlockTabPanel: () => CodeBlockTabPanel,
  CodeBlockWrapper: () => CodeBlockWrapper
});
module.exports = __toCommonJS(src_exports);

// src/CodeBlock.tsx
var import_box2 = require("@twilio-paste/box");
var import_syntax_highlighter_library = require("@twilio-paste/syntax-highlighter-library");
var React3 = __toESM(require("react"));

// src/CodeBlockTheme.ts
var import_styling_library = require("@twilio-paste/styling-library");
var import_theme = require("@twilio-paste/theme");
var getPasteSyntaxTheme = (maxLines) => {
  const theme = (0, import_theme.useTheme)();
  return (0, import_styling_library.css)({
    'code[class*="language-"]': {
      color: "#d6deeb",
      fontFamily: "fontFamilyCode",
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      fontSize: "1em",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none"
    },
    'pre[class*="language-"]': {
      color: "white",
      fontFamily: "fontFamilyCode",
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      fontSize: "1em",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none",
      margin: "0",
      overflow: "auto",
      background: "inherit",
      display: "-webkit-box",
      WebkitLineClamp: `${maxLines}`,
      WebkitBoxOrient: "vertical",
      width: "100%"
    },
    'pre[class*="language-"]::-moz-selection': {
      textShadow: "none",
      background: "inherit"
    },
    'pre[class*="language-"] ::-moz-selection': {
      textShadow: "none",
      background: "inherit"
    },
    'code[class*="language-"]::-moz-selection': {
      textShadow: "none",
      background: "inherit"
    },
    'code[class*="language-"] ::-moz-selection': {
      textShadow: "none",
      background: "inherit"
    },
    'pre[class*="language-"]::selection': {
      textShadow: "none",
      background: "inherit"
    },
    'pre[class*="language-"] ::selection': {
      textShadow: "none",
      background: "inherit"
    },
    'code[class*="language-"]::selection': {
      textShadow: "none",
      background: "inherit"
    },
    'code[class*="language-"] ::selection': {
      textShadow: "none",
      background: "inherit"
    },
    ':not(pre) > code[class*="language-"]': {
      color: "white",
      background: "#011627",
      padding: "0.1em",
      borderRadius: "0.3em",
      whiteSpace: "normal"
    },
    comment: {
      color: "rgb(136, 145, 170)",
      fontStyle: "italic"
    },
    linenumber: {
      color: "colorTextInverseWeak",
      fontStyle: "none"
    },
    prolog: {
      color: "rgb(99, 119, 119)",
      fontStyle: "italic"
    },
    cdata: {
      color: "rgb(99, 119, 119)",
      fontStyle: "italic"
    },
    punctuation: {
      color: "rgb(199, 146, 234)"
    },
    ".namespace": {
      color: "rgb(178, 204, 214)"
    },
    deleted: {
      color: "rgba(239, 83, 80, 0.56)",
      fontStyle: "italic"
    },
    symbol: {
      color: "rgb(128, 203, 196)"
    },
    property: {
      color: "rgb(128, 203, 196)"
    },
    tag: {
      color: "rgb(127, 219, 202)"
    },
    operator: {
      color: "rgb(127, 219, 202)"
    },
    keyword: {
      color: "rgb(127, 219, 202)"
    },
    boolean: {
      color: "rgb(255, 88, 116)"
    },
    number: {
      color: "rgb(247, 140, 108)"
    },
    constant: {
      color: "rgb(130, 170, 255)"
    },
    function: {
      color: "rgb(130, 170, 255)"
    },
    builtin: {
      color: "rgb(130, 170, 255)"
    },
    char: {
      color: "rgb(130, 170, 255)"
    },
    selector: {
      color: "rgb(199, 146, 234)",
      fontStyle: "italic"
    },
    doctype: {
      color: "rgb(199, 146, 234)",
      fontStyle: "italic"
    },
    "attr-name": {
      color: "rgb(173, 219, 103)",
      fontStyle: "italic"
    },
    inserted: {
      color: "rgb(173, 219, 103)",
      fontStyle: "italic"
    },
    string: {
      color: "rgb(173, 219, 103)"
    },
    url: {
      color: "rgb(173, 219, 103)"
    },
    entity: {
      color: "rgb(173, 219, 103)"
    },
    ".language-css .token.string": {
      color: "rgb(173, 219, 103)"
    },
    ".style .token.string": {
      color: "rgb(173, 219, 103)"
    },
    "class-name": {
      color: "rgb(255, 203, 139)"
    },
    atrule: {
      color: "rgb(255, 203, 139)"
    },
    "attr-value": {
      color: "rgb(255, 203, 139)"
    },
    regex: {
      color: "rgb(214, 222, 235)"
    },
    important: {
      color: "rgb(214, 222, 235)",
      fontWeight: "bold"
    },
    variable: {
      color: "rgb(214, 222, 235)"
    },
    bold: {
      fontWeight: "bold"
    },
    italic: {
      fontStyle: "italic"
    }
  })(theme);
};

// src/CopyButton.tsx
var import_box = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_clipboard_copy_library = require("@twilio-paste/clipboard-copy-library");
var import_CopyIcon = require("@twilio-paste/icons/cjs/CopyIcon");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var import_tooltip = require("@twilio-paste/tooltip");
var React = __toESM(require("react"));
var getCopyButtonText = (labelBefore, labelAfter) => {
  return (copied) => {
    return copied ? labelAfter : labelBefore;
  };
};
var CopyButton = ({
  text,
  i18nCopyLabelBefore = "Copy code block",
  i18nCopyLabelAfter = "Copied!",
  element = "COPY_BUTTON",
  copyTextFormatter,
  ...props
}) => {
  const tooltipState = (0, import_tooltip.useTooltipState)();
  const [tooltipText, setTooltipText] = React.useState(i18nCopyLabelBefore);
  const isFirstRender = React.useRef(true);
  const getText = React.useMemo(() => {
    return getCopyButtonText(i18nCopyLabelBefore, i18nCopyLabelAfter);
  }, [i18nCopyLabelBefore, i18nCopyLabelAfter]);
  const clipboard = (0, import_clipboard_copy_library.useClipboard)({ copiedTimeout: 1500 });
  const handleCopy = React.useCallback(() => {
    const formattedText = copyTextFormatter ? copyTextFormatter(text) : text;
    clipboard.copy(formattedText);
  }, [text, copyTextFormatter, clipboard]);
  React.useEffect(() => {
    setTooltipText(getText(clipboard.copied));
  }, [clipboard.copied, getText]);
  React.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    setTimeout(() => {
      tooltipState.unstable_update();
    }, 0);
  }, [tooltipState]);
  return /* @__PURE__ */ React.createElement(import_tooltip.Tooltip, { text: tooltipText, state: tooltipState, element: `${element}_TOOLTIP` }, /* @__PURE__ */ React.createElement(import_button.Button, { variant: "inverse", size: "icon_small", onClick: handleCopy, element, ...props }, /* @__PURE__ */ React.createElement(import_box.Box, { as: "span" }, /* @__PURE__ */ React.createElement(import_CopyIcon.CopyIcon, { decorative: true }), /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", "aria-live": "polite" }, /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, tooltipText)))));
};
CopyButton.displayName = "CopyButton";

// src/ExternalLinkButton.tsx
var import_button2 = require("@twilio-paste/button");
var import_LinkExternalIcon = require("@twilio-paste/icons/cjs/LinkExternalIcon");
var import_screen_reader_only2 = require("@twilio-paste/screen-reader-only");
var import_tooltip2 = require("@twilio-paste/tooltip");
var React2 = __toESM(require("react"));
var ExternalLinkButton = ({
  i18nLinkLabel = "Open code block in new page",
  href,
  element = "EXTERNAL_LINK",
  ...props
}) => {
  const tooltipState = (0, import_tooltip2.useTooltipState)();
  const tooltipText = i18nLinkLabel;
  const isFirstRender = React2.useRef(true);
  React2.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    tooltipState.hide();
    setTimeout(() => tooltipState.show(), 0);
  }, [tooltipText]);
  return /* @__PURE__ */ React2.createElement(import_tooltip2.Tooltip, { text: tooltipText, element: `${element}_TOOLTIP` }, /* @__PURE__ */ React2.createElement(import_button2.Button, { as: "a", variant: "inverse", size: "icon_small", href, element, target: "_blank", ...props }, /* @__PURE__ */ React2.createElement(import_LinkExternalIcon.LinkExternalIcon, { decorative: true }), /* @__PURE__ */ React2.createElement(import_screen_reader_only2.ScreenReaderOnly, null, i18nLinkLabel)));
};
ExternalLinkButton.displayName = "ExternalLinkButton";

// src/CodeBlock.tsx
var CodeBlockVariantStyles = {
  "single-line": {
    gridTemplateColumns: "1fr auto",
    gridTemplateAreas: '"code-block button-group"',
    columnGap: "space40",
    borderRadius: "borderRadius20",
    paddingY: "space60"
  },
  "multi-line": {
    gridTemplateRows: "auto 1fr",
    gridTemplateAreas: '"button-group" "code-block"',
    rowGap: "space20",
    paddingTop: "space50",
    paddingBottom: "space90"
  }
};
var CodeBlock = React3.forwardRef(
  ({
    element = "CODE_BLOCK",
    language,
    code,
    variant = "multi-line",
    showLineNumbers,
    wrapLines,
    maxLines,
    externalLink,
    i18nCopyLabelAfter,
    i18nCopyLabelBefore,
    i18nLinkLabel,
    copyTextFormatter,
    ...props
  }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      import_box2.Box,
      {
        ref,
        element,
        variant,
        ...(0, import_box2.safelySpreadBoxProps)(props),
        backgroundColor: "colorBackgroundBodyInverse",
        paddingX: "space70",
        display: "grid",
        ...CodeBlockVariantStyles[variant]
      },
      /* @__PURE__ */ React3.createElement(
        import_box2.Box,
        {
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          columnGap: "space40",
          justifyContent: variant === "multi-line" ? "flex-end" : void 0,
          gridArea: "button-group"
        },
        /* @__PURE__ */ React3.createElement(import_box2.Box, null, /* @__PURE__ */ React3.createElement(
          CopyButton,
          {
            element: `${element}_COPY_BUTTON`,
            text: code,
            i18nCopyLabelAfter,
            i18nCopyLabelBefore,
            copyTextFormatter
          }
        )),
        externalLink && /* @__PURE__ */ React3.createElement(import_box2.Box, null, /* @__PURE__ */ React3.createElement(
          ExternalLinkButton,
          {
            href: externalLink,
            element: `${element}_EXTERNAL_LINK`,
            i18nLinkLabel
          }
        ))
      ),
      /* @__PURE__ */ React3.createElement(import_box2.Box, { element: `${element}_CONTENT`, display: "flex", alignItems: "center", overflowX: "auto", gridArea: "code-block" }, /* @__PURE__ */ React3.createElement(
        import_syntax_highlighter_library.SyntaxHighlighter,
        {
          language,
          style: getPasteSyntaxTheme(maxLines),
          showLineNumbers,
          wrapLongLines: wrapLines,
          wrapLines: true
        },
        code
      ))
    );
  }
);
CodeBlock.displayName = "CodeBlock";

// src/CodeBlockHeader.tsx
var import_box3 = require("@twilio-paste/box");
var React4 = __toESM(require("react"));
var CodeBlockHeader = React4.forwardRef(
  ({ children, element = "CODE_BLOCK_HEADER", as = "h3", ...props }, ref) => /* @__PURE__ */ React4.createElement(
    import_box3.Box,
    {
      ...(0, import_box3.safelySpreadBoxProps)(props),
      ref,
      element,
      as,
      backgroundColor: "colorBackgroundInverseStrong",
      color: "colorTextInverse",
      paddingY: "space50",
      paddingX: "space70",
      margin: "space0",
      borderTopLeftRadius: "borderRadius20",
      borderTopRightRadius: "borderRadius20",
      fontWeight: "fontWeightSemibold",
      fontSize: "fontSize30"
    },
    children
  )
);
CodeBlockHeader.displayName = "CodeBlockHeader";

// src/CodeBlockTab.tsx
var import_tabs = require("@twilio-paste/tabs");
var React5 = __toESM(require("react"));
var CodeBlockTab = React5.forwardRef(
  ({ children, element = "CODE_BLOCK_TAB", ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(import_tabs.Tab, { element, ref, ...props }, children);
  }
);
CodeBlockTab.displayName = "CodeBlockTab";

// src/CodeBlockTabList.tsx
var import_box5 = require("@twilio-paste/box");
var import_styling_library2 = require("@twilio-paste/styling-library");
var import_tabs2 = require("@twilio-paste/tabs");
var import_tabs_primitive = require("@twilio-paste/tabs-primitive");
var React8 = __toESM(require("react"));

// src/OverflowButton.tsx
var import_box4 = require("@twilio-paste/box");
var import_ChevronLeftIcon = require("@twilio-paste/icons/cjs/ChevronLeftIcon");
var import_ChevronRightIcon = require("@twilio-paste/icons/cjs/ChevronRightIcon");
var import_theme2 = require("@twilio-paste/theme");
var import_react = __toESM(require("react"));
var Styles = {
  color: "colorTextIconInverse",
  _hover: {
    color: "colorTextInverse",
    cursor: "pointer"
  }
};
var OverflowButton = ({
  onClick,
  position,
  visible,
  element = "CODE_BLOCK_TAB_LIST",
  showShadow
}) => {
  const theme = (0, import_theme2.useTheme)();
  const Chevron = position === "left" ? import_ChevronLeftIcon.ChevronLeftIcon : import_ChevronRightIcon.ChevronRightIcon;
  if (!visible && position === "right")
    return null;
  const determineShadow = () => {
    if (visible && showShadow) {
      if (position === "left")
        return theme.shadows.shadowLeftInverse;
      return theme.shadows.shadowRightInverse;
    }
    return void 0;
  };
  return /* @__PURE__ */ import_react.default.createElement(
    import_box4.Box,
    {
      onClick,
      "aria-hidden": true,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "sizeBase60",
      padding: "space10",
      position: "relative",
      boxShadow: determineShadow(),
      element: `${element}_OVERFLOW_BUTTON_${position.toUpperCase()}`,
      cursor: visible ? "pointer" : "none",
      zIndex: "zIndex10",
      ...Styles
    },
    visible && /* @__PURE__ */ import_react.default.createElement(Chevron, { decorative: true })
  );
};
OverflowButton.displayName = "OverflowButton";

// src/utlis.ts
var import_react2 = __toESM(require("react"));
var useElementsOutOfBounds = () => {
  const [elementOutOBoundsLeft, setElementOutOfBoundsLeft] = import_react2.default.useState(null);
  const [elementOutOBoundsRight, setElementOutOfBoundsRight] = import_react2.default.useState(null);
  const determineElementsOutOfBounds = (scrollContainer, listContainer) => {
    if (scrollContainer && listContainer) {
      const currentScrollContainerRightPosition = scrollContainer?.getBoundingClientRect().right;
      const currentScrollContainerXOffset = scrollContainer?.getBoundingClientRect().x;
      let leftOutOfBounds = null;
      let rightOutOfBounds = null;
      listContainer.childNodes.forEach((tab) => {
        const { x, right } = tab.getBoundingClientRect();
        const isSpanningView = x < currentScrollContainerXOffset && right > currentScrollContainerRightPosition;
        if (!isSpanningView) {
          if (Math.round(x) < Math.round(currentScrollContainerXOffset - 28)) {
            leftOutOfBounds = tab;
          }
          if (Math.round(right) > Math.round(currentScrollContainerRightPosition + 28) && !rightOutOfBounds) {
            rightOutOfBounds = tab;
          }
        }
        setElementOutOfBoundsLeft(leftOutOfBounds);
        setElementOutOfBoundsRight(rightOutOfBounds);
      });
    }
  };
  return { elementOutOBoundsLeft, elementOutOBoundsRight, determineElementsOutOfBounds };
};
var useShowShadow = () => {
  const [showShadow, setShowShadow] = import_react2.default.useState(false);
  let showShadowTimer;
  const handleShadow = () => {
    if (showShadowTimer) {
      window.clearTimeout(showShadowTimer);
    }
    setShowShadow(true);
    showShadowTimer = window.setTimeout(() => {
      setShowShadow(false);
    }, 500);
  };
  return { showShadow, handleShadow };
};
var handleScrollDirection = (direction, elementOutOBoundsLeft, elementOutOBoundsRight, scrollContainer) => {
  const elementToScrollTo = direction === "left" ? elementOutOBoundsLeft : elementOutOBoundsRight;
  if (scrollContainer && elementToScrollTo) {
    const elementRect = elementToScrollTo.getBoundingClientRect();
    const containerRect = scrollContainer.getBoundingClientRect();
    const containerScrollLeft = scrollContainer.scrollLeft;
    const newScrollLeft = containerScrollLeft + (elementRect.left - containerRect.left) - containerRect.width / 2 + elementRect.width / 2;
    scrollContainer.scrollTo({ left: newScrollLeft, behavior: "smooth" });
  }
};

// src/CodeBlockTabList.tsx
var StyledTabList = import_styling_library2.styled.div(() => {
  return (0, import_styling_library2.css)({
    overflowX: "auto",
    overflowY: "hidden",
    overflowScrolling: "touch",
    "@supports (-moz-appearance:none)": {
      paddingBottom: "0px",
      scrollbarWidth: "none"
    },
    "::-webkit-scrollbar": {
      height: 0
    },
    "::-webkit-scrollbar-track": {
      background: "transparent"
    }
  });
});
var CodeBlockTabList = React8.forwardRef(
  ({ children, element = "CODE_BLOCK_TAB_LIST", ...props }, ref) => {
    const tabContext = React8.useContext(import_tabs2.TabsContext);
    const scrollableRef = React8.useRef(null);
    const listRef = React8.useRef(null);
    const { determineElementsOutOfBounds, elementOutOBoundsLeft, elementOutOBoundsRight } = useElementsOutOfBounds();
    const { handleShadow, showShadow } = useShowShadow();
    const handleScrollEvent = () => {
      handleShadow();
      determineElementsOutOfBounds(scrollableRef.current, listRef.current);
    };
    React8.useEffect(() => {
      if (scrollableRef.current && listRef.current) {
        scrollableRef.current.addEventListener("scroll", handleScrollEvent);
        window.addEventListener("resize", handleScrollEvent);
        determineElementsOutOfBounds(scrollableRef.current, listRef.current);
      }
    }, [scrollableRef.current, listRef.current]);
    React8.useEffect(() => {
      return () => {
        if (scrollableRef.current) {
          scrollableRef.current.removeEventListener("scroll", handleScrollEvent);
          window.removeEventListener("resize", handleScrollEvent);
        }
      };
    }, []);
    return /* @__PURE__ */ React8.createElement(import_tabs_primitive.TabPrimitiveList, { ...tabContext, as: import_box5.Box, ...props, element, ref }, /* @__PURE__ */ React8.createElement(import_box5.Box, { element: `${element}_CHILD_WRAPPER`, display: "flex" }, /* @__PURE__ */ React8.createElement(
      OverflowButton,
      {
        position: "left",
        onClick: () => handleScrollDirection("left", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
        visible: Boolean(elementOutOBoundsLeft),
        element,
        showShadow
      }
    ), /* @__PURE__ */ React8.createElement(
      import_box5.Box,
      {
        ...(0, import_box5.safelySpreadBoxProps)(props),
        as: StyledTabList,
        ref: scrollableRef,
        display: "flex",
        flexWrap: "nowrap",
        element: `${element}_CHILD_SCROLL_WRAPPER`,
        overflowX: "auto",
        overflowY: "hidden",
        flexGrow: 1,
        width: "calc(100% - 60px)"
      },
      /* @__PURE__ */ React8.createElement(
        import_box5.Box,
        {
          whiteSpace: "nowrap",
          element: `${element}_CHILD`,
          display: "flex",
          borderBottomStyle: "solid",
          borderBottomWidth: "borderWidth10",
          borderBottomColor: "colorBorderInverseWeaker",
          ref: listRef,
          flexGrow: 1,
          columnGap: "space20"
        },
        children
      )
    ), /* @__PURE__ */ React8.createElement(
      OverflowButton,
      {
        position: "right",
        onClick: () => handleScrollDirection("right", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
        visible: Boolean(elementOutOBoundsRight),
        element,
        showShadow
      }
    )));
  }
);
CodeBlockTabList.displayName = "CodeBlockTabList";

// src/CodeBlockTabPanel.tsx
var import_tabs3 = require("@twilio-paste/tabs");
var React9 = __toESM(require("react"));
var CodeBlockTabPanel = React9.forwardRef(
  ({ children, element = "CODE_BLOCK_TAB_PANEL", ...props }, ref) => {
    return /* @__PURE__ */ React9.createElement(import_tabs3.TabPanel, { ...props, paddingTop: "space0", element, ref }, children);
  }
);
CodeBlockTabPanel.displayName = "CodeBlockTabPanel";

// src/CodeBlockWrapper.tsx
var import_box6 = require("@twilio-paste/box");
var import_tabs4 = require("@twilio-paste/tabs");
var React10 = __toESM(require("react"));
var CodeBlockWrapper = React10.forwardRef(
  ({ children, state, element = "CODE_BLOCK_WRAPPER" }, ref) => {
    return /* @__PURE__ */ React10.createElement(import_tabs4.Tabs, { variant: "inverse", state }, /* @__PURE__ */ React10.createElement(
      import_box6.Box,
      {
        backgroundColor: "colorBackgroundInverseStrong",
        borderRadius: "borderRadius20",
        overflow: "hidden",
        element,
        ref
      },
      children
    ));
  }
);
CodeBlockWrapper.displayName = "CodeBlockWrapper";
