import type { BoxProps } from "@twilio-paste/box";
import type { ResponsiveValue } from "@twilio-paste/styling-library";
import type { HTMLPasteProps } from "@twilio-paste/types";
import * as React from "react";
type WidthOptions = "size10" | "size20" | "size30" | "size40" | "size50";
export interface PopoverProps extends HTMLPasteProps<"div"> {
    /**
     * Required label for this Popover component. Titles the entire popover context for screen readers.
     *
     * @type {string}
     * @memberof PopoverProps
     */
    "aria-label": string;
    children: React.ReactNode;
    /**
     * Accessible label for the dismiss button in the Popover.
     *
     * @default 'Close popover'
     * @type {string}
     * @memberof PopoverProps
     */
    i18nDismissLabel?: string;
    /**
     *
     * @type {ResponsiveValue<WidthOptions>}
     * @memberof PopoverProps
     */
    width?: ResponsiveValue<WidthOptions>;
    /**
     * A ref to an interactive element that recieves focus when the Popover opens.
     *
     * @type {React.RefObject<any>}
     * @memberof PopoverProps
     */
    initialFocusRef?: React.RefObject<any>;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'POPOVER'
     * @type {BoxProps['element']}
     * @memberof PopoverProps
     */
    element?: BoxProps["element"];
}
declare const Popover: React.ForwardRefExoticComponent<PopoverProps & React.RefAttributes<HTMLDivElement>>;
export { Popover };
//# sourceMappingURL=Popover.d.ts.map