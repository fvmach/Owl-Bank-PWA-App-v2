// src/PopoverContainer.tsx
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
import * as React2 from "react";

// src/PopoverContext.tsx
import * as React from "react";
var PopoverContext = React.createContext({});

// src/PopoverContainer.tsx
var BasePopoverContainer = ({
  children,
  gutter,
  placement,
  state,
  ...initialState
}) => {
  const popover = state || useNonModalDialogPrimitiveState({ gutter, modal: true, placement, ...initialState });
  return /* @__PURE__ */ React2.createElement(PopoverContext.Provider, { value: popover }, children);
};
BasePopoverContainer.displayName = "BasePopoverContainer";
var PopoverContainer = React2.memo(BasePopoverContainer);
PopoverContainer.displayName = "PopoverContainer";

// src/Popover.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { StyledBase } from "@twilio-paste/theme";
import * as React4 from "react";

// src/PopoverArrow.tsx
import { NonModalDialogArrowPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { useTheme } from "@twilio-paste/theme";
import * as React3 from "react";
var PopoverArrow = (props) => {
  const theme = useTheme();
  return /* @__PURE__ */ React3.createElement(
    NonModalDialogArrowPrimitive,
    {
      ...props,
      size: theme.fontSizes.fontSize70,
      stroke: theme.borderColors.colorBorderWeaker,
      fill: theme.backgroundColors.colorBackgroundBody
    }
  );
};
PopoverArrow.displayName = "PopoverArrow";

// src/Popover.tsx
var StyledPopover = React4.forwardRef(({ style, width, ...props }, ref) => {
  return /* @__PURE__ */ React4.createElement(
    Box,
    {
      ...safelySpreadBoxProps(props),
      width,
      backgroundColor: "colorBackgroundBody",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius30",
      boxShadow: "shadowLow",
      maxWidth: "size50",
      zIndex: "zIndex80",
      _focus: { outline: "none" },
      style,
      ref
    }
  );
});
StyledPopover.displayName = "StyledPopover";
var Popover = React4.forwardRef(
  ({ children, element = "POPOVER", i18nDismissLabel = "Close popover", initialFocusRef, ...props }, ref) => {
    const popover = React4.useContext(PopoverContext);
    React4.useEffect(() => {
      if (popover.visible && initialFocusRef) {
        initialFocusRef.current?.focus();
      }
    }, [popover.visible, initialFocusRef]);
    return /* @__PURE__ */ React4.createElement(NonModalDialogPrimitive, { ...popover, ...props, as: StyledPopover, ref, preventBodyScroll: false }, /* @__PURE__ */ React4.createElement(StyledBase, null, /* @__PURE__ */ React4.createElement(PopoverArrow, { ...popover }), /* @__PURE__ */ React4.createElement(Box, { element, padding: "space90" }, /* @__PURE__ */ React4.createElement(Box, { position: "absolute", right: 16, top: 16 }, /* @__PURE__ */ React4.createElement(
      Button,
      {
        element: `${element}_CLOSE_BUTTON`,
        variant: "secondary_icon",
        size: "reset",
        onClick: popover.hide
      },
      /* @__PURE__ */ React4.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon10" }),
      /* @__PURE__ */ React4.createElement(ScreenReaderOnly, null, i18nDismissLabel)
    )), children)));
  }
);
Popover.displayName = "Popover";

// src/PopoverButton.tsx
import { Button as Button2 } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import * as React5 from "react";
var PopoverButton = React5.forwardRef(
  ({ children, element = "POPOVER_BUTTON", ...popoverButtonProps }, ref) => {
    const popover = React5.useContext(PopoverContext);
    return /* @__PURE__ */ React5.createElement(
      NonModalDialogDisclosurePrimitive,
      {
        element,
        ...popover,
        ...popoverButtonProps,
        as: Button2,
        ref
      },
      children
    );
  }
);
PopoverButton.displayName = "PopoverButton";

// src/PopoverBadgeButton.tsx
import { Badge } from "@twilio-paste/badge";
import { NonModalDialogDisclosurePrimitive as NonModalDialogDisclosurePrimitive2 } from "@twilio-paste/non-modal-dialog-primitive";
import * as React6 from "react";
var ButtonBadge = React6.forwardRef(function ButtonBadge2({ children, ...props }, ref) {
  return /* @__PURE__ */ React6.createElement(Badge, { ...props, as: "button", ref }, children);
});
ButtonBadge.displayName = "ButtonBadge";
var PopoverBadgeButton = React6.forwardRef(
  ({ children, element = "POPOVER_BADGE", ...popoverButtonProps }, ref) => {
    const popover = React6.useContext(PopoverContext);
    return /* @__PURE__ */ React6.createElement(
      NonModalDialogDisclosurePrimitive2,
      {
        element,
        ...popover,
        ...popoverButtonProps,
        as: ButtonBadge,
        ref
      },
      children
    );
  }
);
PopoverBadgeButton.displayName = "PopoverBadgeButton";

// src/PopoverFormPillButton.tsx
import { FormPill } from "@twilio-paste/form-pill-group";
import { NonModalDialogDisclosurePrimitive as NonModalDialogDisclosurePrimitive3 } from "@twilio-paste/non-modal-dialog-primitive";
import * as React7 from "react";
var PopoverFormPillButton = React7.forwardRef(
  ({ children, element = "POPOVER_FORM_PILL", ...popoverButtonProps }, ref) => {
    const popover = React7.useContext(PopoverContext);
    return /* @__PURE__ */ React7.createElement(
      NonModalDialogDisclosurePrimitive3,
      {
        element,
        ...popover,
        ...popoverButtonProps,
        as: FormPill,
        ref,
        onSelect: (e) => {
          popover.toggle();
          if (popoverButtonProps.onSelect) {
            popoverButtonProps.onSelect(e);
          }
        },
        baseId: popover.baseId
      },
      children
    );
  }
);
PopoverFormPillButton.displayName = "PopoverFormPillButton";
export {
  Popover,
  PopoverBadgeButton,
  PopoverButton,
  PopoverContainer,
  PopoverFormPillButton,
  useNonModalDialogPrimitiveState as usePopoverState
};
