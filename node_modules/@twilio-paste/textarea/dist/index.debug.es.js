// src/TextArea.tsx
import { getCustomElementStyles, safelySpreadBoxProps } from "@twilio-paste/box";
import { InputBox } from "@twilio-paste/input-box";
import TextareaAutosize from "@twilio-paste/react-textarea-autosize-library";
import { css, styled } from "@twilio-paste/styling-library";
import * as React from "react";
var TextAreaElement = styled(TextareaAutosize)(
  (props) => css({
    appearance: "none",
    background: "transparent",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    display: "block",
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space40",
    paddingTop: "space30",
    resize: props.resize,
    width: "100%",
    "&::placeholder": {
      color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak",
      fontStyle: "italic"
    },
    "&:focus::placeholder": {
      color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak"
    },
    "&:disabled": {
      color: props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
      cursor: "not-allowed",
      "-webkit-text-fill-color": props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
      "-webkit-opacity": "1"
    }
  }),
  getCustomElementStyles
);
var TextArea = React.forwardRef(
  ({
    children,
    disabled,
    element = "TEXTAREA",
    hasError,
    insertBefore,
    insertAfter,
    readOnly,
    variant,
    resize = "none",
    maxRows = 10,
    size,
    height,
    width,
    ...props
  }, ref) => {
    return /* @__PURE__ */ React.createElement(
      InputBox,
      {
        disabled,
        element,
        hasError,
        insertAfter,
        insertBefore,
        readOnly,
        variant
      },
      /* @__PURE__ */ React.createElement(
        TextAreaElement,
        {
          ...safelySpreadBoxProps(props),
          "aria-invalid": hasError,
          "aria-readonly": readOnly,
          disabled,
          "data-paste-element": `${element}_ELEMENT`,
          readOnly,
          ref,
          rows: 3,
          minRows: 3,
          maxRows,
          spellCheck: true,
          resize,
          variant
        },
        children
      )
    );
  }
);
TextArea.displayName = "TextArea";
export {
  TextArea
};
