"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  TextArea: () => TextArea
});
module.exports = __toCommonJS(src_exports);

// src/TextArea.tsx
var import_box = require("@twilio-paste/box");
var import_input_box = require("@twilio-paste/input-box");
var import_react_textarea_autosize_library = __toESM(require("@twilio-paste/react-textarea-autosize-library"));
var import_styling_library = require("@twilio-paste/styling-library");
var React = __toESM(require("react"));
var TextAreaElement = (0, import_styling_library.styled)(import_react_textarea_autosize_library.default)(
  (props) => (0, import_styling_library.css)({
    appearance: "none",
    background: "transparent",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    display: "block",
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space40",
    paddingTop: "space30",
    resize: props.resize,
    width: "100%",
    "&::placeholder": {
      color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak",
      fontStyle: "italic"
    },
    "&:focus::placeholder": {
      color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak"
    },
    "&:disabled": {
      color: props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
      cursor: "not-allowed",
      "-webkit-text-fill-color": props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
      "-webkit-opacity": "1"
    }
  }),
  import_box.getCustomElementStyles
);
var TextArea = React.forwardRef(
  ({
    children,
    disabled,
    element = "TEXTAREA",
    hasError,
    insertBefore,
    insertAfter,
    readOnly,
    variant,
    resize = "none",
    maxRows = 10,
    size,
    height,
    width,
    ...props
  }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_input_box.InputBox,
      {
        disabled,
        element,
        hasError,
        insertAfter,
        insertBefore,
        readOnly,
        variant
      },
      /* @__PURE__ */ React.createElement(
        TextAreaElement,
        {
          ...(0, import_box.safelySpreadBoxProps)(props),
          "aria-invalid": hasError,
          "aria-readonly": readOnly,
          disabled,
          "data-paste-element": `${element}_ELEMENT`,
          readOnly,
          ref,
          rows: 3,
          minRows: 3,
          maxRows,
          spellCheck: true,
          resize,
          variant
        },
        children
      )
    );
  }
);
TextArea.displayName = "TextArea";
