"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var src_exports={};__export(src_exports,{Flex:()=>Flex});module.exports=__toCommonJS(src_exports);var import_box=require("@twilio-paste/box"),React=__toESM(require("react"));var getGrow=({grow})=>Array.isArray(grow)?grow.map(value=>Number(value)):typeof grow=="number"?grow:grow?1:0,getShrink=({shrink,basis})=>Array.isArray(shrink)?shrink.map(value=>Number(value)):typeof shrink=="number"?shrink:typeof shrink=="boolean"?shrink?1:0:basis&&basis!=="auto"?0:1,getSuffix=item=>{let suffix=typeof item=="number"||String(Number.parseInt(item,10))===item?"px":"";return item+suffix},getBasis=({basis})=>Array.isArray(basis)?basis.map(value=>getSuffix(value)):basis?getSuffix(basis):"auto",getVertical=({vertical})=>Array.isArray(vertical)?vertical.map(value=>typeof value=="boolean"?value===!0?"column":"row":value):vertical?"column":"row",getWrap=({wrap})=>Array.isArray(wrap)?wrap.map(value=>typeof value=="boolean"?value===!0?"wrap":"nowrap":value):wrap?"wrap":"nowrap",RemapedVerticalAlignments={top:"flex-start",center:"center",bottom:"flex-end",stretch:"stretch"},vAlignToProps=({vAlignContent})=>Array.isArray(vAlignContent)?vAlignContent.map(value=>RemapedVerticalAlignments[value]):vAlignContent?RemapedVerticalAlignments[vAlignContent]:"flex-start",RemapedHorizontalAlignments={left:"flex-start",center:"center",right:"flex-end",around:"space-around",between:"space-between"},hAlignToProps=({hAlignContent})=>Array.isArray(hAlignContent)?hAlignContent.map(value=>RemapedHorizontalAlignments[value]):hAlignContent?RemapedHorizontalAlignments[hAlignContent]:"flex-start";var getFlexStyles=props=>{let styles={justifyContent:props.vertical?vAlignToProps(props):hAlignToProps(props),alignItems:props.vertical?hAlignToProps(props):vAlignToProps(props)};return(props.grow||props.shrink||props.basis)&&(styles.flexGrow=getGrow(props),styles.flexShrink=getShrink(props),styles.flexBasis=getBasis(props)),props.vertical&&(styles.flexDirection=getVertical(props)),props.wrap&&(styles.flexWrap=getWrap(props)),styles},Flex=React.forwardRef(({as,basis,children,display,element="FLEX",hAlignContent,grow,marginTop,marginRight,marginBottom,marginLeft,margin,marginX,marginY,paddingTop,paddingRight,paddingBottom,paddingLeft,padding,paddingX,paddingY,maxWidth,minWidth="size0",width,height,minHeight,maxHeight,size,shrink,vertical,vAlignContent,wrap,...props},ref)=>{let FlexStyles=React.useMemo(()=>getFlexStyles({basis,hAlignContent,grow,shrink,vertical,vAlignContent,wrap}),[basis,hAlignContent,grow,shrink,vertical,vAlignContent,wrap]);size&&(width||height)&&console.error("[Paste Flex]: you cannot set a height or width when using the size attribute"),(marginX&&(margin||marginBottom||marginLeft||marginRight||marginTop)||marginY&&(margin||marginBottom||marginLeft||marginRight||marginTop))&&console.error("[Paste Flex]: you cannot set a top, right, bottom or left margin when using the marginX or marginY attributes."),(paddingX&&(padding||paddingBottom||paddingLeft||paddingRight||paddingTop)||paddingY&&(padding||paddingBottom||paddingLeft||paddingRight||paddingTop))&&console.error("[Paste Flex]: you cannot set a top, right, bottom or left padding when using the paddingX or paddingY attributes.");let margins=marginX||marginY?{marginX,marginY}:{margin,marginBottom,marginLeft,marginRight,marginTop},paddings=paddingX||paddingY?{paddingX,paddingY}:{padding,paddingBottom,paddingLeft,paddingRight,paddingTop},widths=size?{size}:{height,width};return React.createElement(import_box.Box,{...FlexStyles,...(0,import_box.safelySpreadBoxProps)(props),ref,as,display,element,...margins,...paddings,minHeight,maxHeight,maxWidth,minWidth,...widths},children)});Flex.displayName="Flex";Flex.defaultProps={display:"flex"};
