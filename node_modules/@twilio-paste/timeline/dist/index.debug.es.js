// src/Timeline.tsx
import { Box } from "@twilio-paste/box";
import { css, styled } from "@twilio-paste/styling-library";
import React from "react";
var Timeline = React.forwardRef(
  ({ children, element = "TIMELINE", ...props }, ref) => {
    const ContainerStyled = styled.ol(
      css({
        listStyleType: "none",
        margin: "0",
        padding: "0",
        "li>div:first-child::after": {
          content: "''",
          borderLeftWidth: "borderWidth10",
          borderLeftStyle: "solid",
          borderLeftColor: "colorBorderWeaker",
          minHeight: "sizeBase80",
          flexGrow: "1"
        }
      })
    );
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ref,
        as: ContainerStyled,
        element,
        ...props
      },
      children
    );
  }
);
Timeline.displayName = "Timeline";

// src/TimelineItem.tsx
import { Box as Box3 } from "@twilio-paste/box";
import { css as css2, styled as styled2 } from "@twilio-paste/styling-library";
import React5 from "react";

// src/TimelineContext.tsx
import * as React2 from "react";
var TimelineGroupContext = React2.createContext(false);

// src/TimelineItemCollapsible.tsx
import {
  SummaryDetail,
  SummaryDetailContent,
  SummaryDetailHeading,
  SummaryDetailHeadingContent,
  SummaryDetailToggleButton
} from "@twilio-paste/summary-detail";
import { Text } from "@twilio-paste/text";
import * as React3 from "react";
var TimelineItemCollapsible = React3.forwardRef(
  ({ children, timestamp, element }, ref) => {
    return /* @__PURE__ */ React3.createElement(SummaryDetail, { element: `${element}_SUMMARY_DETAIL`, ref }, /* @__PURE__ */ React3.createElement(SummaryDetailHeading, { element: `${element}_SUMMARY_DETAIL_HEADING` }, /* @__PURE__ */ React3.createElement(SummaryDetailToggleButton, { element: `${element}_SUMMARY_DETAIL_TOGGLE_BUTTON` }), /* @__PURE__ */ React3.createElement(SummaryDetailHeadingContent, { element: `${element}_SUMMARY_DETAIL_HEADING_CONTENT` }, /* @__PURE__ */ React3.createElement(
      Text,
      {
        element: `${element}_TIMESTAMP`,
        as: "span",
        fontSize: "fontSize20",
        color: "colorTextWeak",
        fontWeight: "fontWeightMedium",
        lineHeight: "lineHeight20",
        marginLeft: "spaceNegative30"
      },
      timestamp
    ))), /* @__PURE__ */ React3.createElement(SummaryDetailContent, { element: `${element}_SUMMARY_DETAIL_CONTENT` }, children));
  }
);
TimelineItemCollapsible.displayName = "TimelineItemCollapsible";

// src/TimelineItemIcon.tsx
import { Box as Box2 } from "@twilio-paste/box";
import { IconWrapper } from "@twilio-paste/icons/esm/helpers/IconWrapper";
import * as React4 from "react";
var TimelineItemIcon = React4.forwardRef(
  ({ icon: Icon, as, display, element = "TIMELINE_ITEM_ICON", color }, ref) => {
    return /* @__PURE__ */ React4.createElement(Box2, { element: `${element}_WRAPPER` }, Icon ? /* @__PURE__ */ React4.createElement(Box2, { marginY: "space20" }, /* @__PURE__ */ React4.createElement(IconWrapper, { as, display, element, color, ref, size: "sizeIcon10" }, /* @__PURE__ */ React4.createElement(Icon, { decorative: true, size: "sizeIcon10" }))) : /* @__PURE__ */ React4.createElement(
      Box2,
      {
        element: `${element}_DOT`,
        backgroundColor: "colorBackgroundStronger",
        borderRadius: "borderRadiusCircle",
        size: "sizeBase20",
        marginY: "space30"
      }
    ));
  }
);
TimelineItemIcon.displayName = "TimelineItemIcon";

// src/TimelineItem.tsx
var TimelineItem = React5.forwardRef(
  ({ children, icon, timestamp, title, collapsible = false, collapsibleHeading, element = "TIMELINE_ITEM", ...props }, ref) => {
    const isGrouped = React5.useContext(TimelineGroupContext);
    const ContainerStyled = styled2.li(
      css2({
        "&:last-child>div:first-child::after": {
          content: "none"
        },
        "div::after": {
          display: isGrouped ? "none" : "block"
        }
      })
    );
    return /* @__PURE__ */ React5.createElement(
      Box3,
      {
        element,
        as: ContainerStyled,
        ref,
        position: "relative",
        display: "flex",
        columnGap: "space50",
        rowGap: "space50",
        flexShrink: 0,
        ...props
      },
      !isGrouped ? /* @__PURE__ */ React5.createElement(
        Box3,
        {
          element: `${element}_SEPARATOR`,
          display: "flex",
          width: "sizeBase50",
          flexDirection: "column",
          alignItems: "center",
          flexShrink: 0
        },
        /* @__PURE__ */ React5.createElement(TimelineItemIcon, { icon, element: `${element}_ICON` })
      ) : null,
      /* @__PURE__ */ React5.createElement(
        Box3,
        {
          element: `${element}_CONTENT_WRAPPER`,
          paddingX: "space0",
          fontFamily: "fontFamilyText",
          fontSize: "fontSize20",
          lineHeight: "lineHeight20",
          fontWeight: "fontWeightMedium",
          display: "flex",
          flexDirection: "column",
          columnGap: "space10",
          paddingBottom: "space60"
        },
        /* @__PURE__ */ React5.createElement(
          Box3,
          {
            element: `${element}_TITLE`,
            as: "span",
            color: "colorText",
            paddingY: "space10",
            fontWeight: "fontWeightSemibold",
            lineHeight: "lineHeight20",
            fontSize: "fontSize30",
            letterSpacing: "-0.28px"
          },
          title
        ),
        collapsible ? /* @__PURE__ */ React5.createElement(TimelineItemCollapsible, { element, timestamp: timestamp ? timestamp : collapsibleHeading }, children) : /* @__PURE__ */ React5.createElement(React5.Fragment, null, timestamp ? /* @__PURE__ */ React5.createElement(
          Box3,
          {
            element: `${element}_TIMESTAMP`,
            as: "span",
            color: "colorTextWeak",
            fontWeight: "fontWeightMedium",
            lineHeight: "lineHeight20",
            fontSize: "fontSize20"
          },
          timestamp
        ) : null, /* @__PURE__ */ React5.createElement(Box3, { element: `${element}_CONTENT` }, children))
      )
    );
  }
);
TimelineItem.displayName = "TimelineItem";

// src/TimelineItemGroup.tsx
import { Box as Box4 } from "@twilio-paste/box";
import { DetailText } from "@twilio-paste/detail-text";
import * as React6 from "react";
var TimelineItemGroup = React6.forwardRef(
  ({ children, timestamp, icon, element = "TIMELINE_ITEM_GROUP", ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      Box4,
      {
        element,
        ref,
        as: "li",
        position: "relative",
        display: "flex",
        columnGap: "space50",
        rowGap: "space50",
        flexShrink: 0,
        ...props
      },
      /* @__PURE__ */ React6.createElement(
        Box4,
        {
          element: `${element}_SEPARATOR`,
          display: "flex",
          width: "sizeBase50",
          flexDirection: "column",
          alignItems: "center"
        },
        /* @__PURE__ */ React6.createElement(TimelineItemIcon, { icon })
      ),
      /* @__PURE__ */ React6.createElement(Box4, { element: `${element}_CONTENT_WRAPPER` }, /* @__PURE__ */ React6.createElement(Box4, { element: `${element}_TIMESTAMP`, marginTop: "space10", marginBottom: "space30" }, /* @__PURE__ */ React6.createElement(DetailText, { element: `${element}_TIMESTAMP_DETAIL_TEXT`, marginTop: "space0" }, timestamp)), /* @__PURE__ */ React6.createElement(Box4, { element: `${element}_CONTENT`, as: "ol", margin: "space0", padding: "space0" }, /* @__PURE__ */ React6.createElement(TimelineGroupContext.Provider, { value: true }, children)))
    );
  }
);
TimelineItemGroup.displayName = "TimelineItemGroup";
export {
  Timeline,
  TimelineItem,
  TimelineItemGroup
};
