"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  SiblingBox: () => SiblingBox
});
module.exports = __toCommonJS(src_exports);

// src/SiblingBox.tsx
var import_box = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React = __toESM(require("react"));
var StyledSiblingBox = (0, import_styling_library.styled)(import_box.Box)(
  ({
    _activeSibling,
    _boxChild,
    _checkedAndActiveSibling,
    _checkedAndDisabledSibling,
    _checkedAndFocusSibling,
    _checkedAndHoverSibling,
    _checkedAndInvalidSibling,
    _checkedAndInvalidAndDisabledSibling,
    _checkedAndInvalidAndHoverSibling,
    _checkedSibling,
    _checkedSiblingAndBoxChild,
    _disabledSibling,
    _focusSibling,
    _hoverSibling,
    _invalidSibling,
    _invalidAndHoverSibling,
    _invalidAndDisabledSibling,
    type = "checkbox"
  }) => {
    const active = `input[type=${type}]:active + label &`;
    const checked = `input[type=${type}]:checked + label &, input[type=${type}][aria-checked=mixed] + label &`;
    const checkedAndActive = `input[type=${type}]:checked:active + label &, input[type=${type}][aria-checked=mixed]:active + label &`;
    const checkedAndChild = `input[type=${type}]:checked + label & > *, input[type=${type}][aria-checked=mixed] + label & > *`;
    const checkedAndDisabled = `input[type=${type}]:checked:disabled + label &, input[type=${type}][aria-checked=mixed]:disabled + label &`;
    const checkedAndFocus = `input[type=${type}]:checked:focus + label &, input[type=${type}][aria-checked=mixed]:focus + label &`;
    const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + label &, input[type=${type}][aria-checked=mixed]:hover:not(:disabled) + label &`;
    const checkedAndInvalid = `input[type=${type}][aria-invalid=true]:checked + label &`;
    const checkedAndInvalidAndDisabled = `input[type=${type}][aria-invalid=true]:checked:disabled + label &`;
    const checkedAndInvalidAndHover = `input[type=${type}][aria-invalid=true]:checked:hover:not(:disabled) + label &`;
    const child = `input[type=${type}] + label & > *`;
    const disabled = `input[type=${type}]:disabled + label &`;
    const focus = `input[type=${type}]:focus + label &`;
    const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + label &`;
    const invalid = `input[type=${type}][aria-invalid=true] + label &`;
    const invalidAndHover = `input[type=${type}][aria-invalid=true]:hover:not(:disabled) + label &`;
    const invalidAndDisabled = `input[type=${type}][aria-invalid=true]:disabled + label &`;
    return (0, import_styling_library.css)({
      [active]: _activeSibling,
      [checked]: _checkedSibling,
      [checkedAndActive]: _checkedAndActiveSibling,
      [checkedAndChild]: _checkedSiblingAndBoxChild,
      [checkedAndDisabled]: _checkedAndDisabledSibling,
      [checkedAndFocus]: _checkedAndFocusSibling,
      [checkedAndHover]: _checkedAndHoverSibling,
      [checkedAndInvalid]: _checkedAndInvalidSibling,
      [checkedAndInvalidAndDisabled]: _checkedAndInvalidAndDisabledSibling,
      [checkedAndInvalidAndHover]: _checkedAndInvalidAndHoverSibling,
      [child]: _boxChild,
      [disabled]: _disabledSibling,
      [focus]: _focusSibling,
      [hover]: _hoverSibling,
      [invalid]: _invalidSibling,
      [invalidAndHover]: _invalidAndHoverSibling,
      [invalidAndDisabled]: _invalidAndDisabledSibling
    });
  }
);
var SiblingBox = React.forwardRef(
  ({
    "aria-hidden": ariaHidden = "true",
    alignItems = "center",
    display = "inline-flex",
    element = "SIBLING_BOX",
    flexShrink = 0,
    justifyContent = "center",
    transition = "all 120ms",
    ...props
  }, ref) => {
    return /* @__PURE__ */ React.createElement(
      StyledSiblingBox,
      {
        alignItems,
        "aria-hidden": ariaHidden,
        display,
        element,
        flexShrink,
        justifyContent,
        ref,
        transition,
        ...props
      }
    );
  }
);
SiblingBox.displayName = "SiblingBox";
