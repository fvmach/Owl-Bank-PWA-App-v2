"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  DescriptionList: () => DescriptionList,
  DescriptionListDetails: () => DescriptionListDetails,
  DescriptionListSet: () => DescriptionListSet,
  DescriptionListTerm: () => DescriptionListTerm
});
module.exports = __toCommonJS(src_exports);

// src/DescriptionList.tsx
var import_box = require("@twilio-paste/box");
var React = __toESM(require("react"));
var DescriptionList = React.forwardRef(
  ({ element = "DESCRIPTION_LIST", children, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(import_box.Box, { ...(0, import_box.safelySpreadBoxProps)(props), as: "dl", marginY: "space0", ref, element }, children);
  }
);
DescriptionList.displayName = "DescriptionList";

// src/DescriptionListTerm.tsx
var import_box2 = require("@twilio-paste/box");
var React2 = __toESM(require("react"));
var DescriptionListTerm = React2.forwardRef(
  ({ element = "DESCRIPTION_LIST_TERM", children, ...props }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        as: "dt",
        ref,
        element,
        fontWeight: "fontWeightSemibold",
        color: "colorText",
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        margin: "space0"
      },
      children
    );
  }
);
DescriptionListTerm.displayName = "DescriptionListTerm";

// src/DescriptionListDetails.tsx
var import_box3 = require("@twilio-paste/box");
var React3 = __toESM(require("react"));
var DescriptionListDetails = React3.forwardRef(
  ({ element = "DESCRIPTION_LIST_DETAILS", children, ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        as: "dd",
        ref,
        element,
        margin: "space0",
        color: "colorText",
        fontWeight: "fontWeightNormal",
        lineHeight: "lineHeight30",
        fontSize: "fontSize30",
        overflowWrap: "break-word"
      },
      children
    );
  }
);
DescriptionListDetails.displayName = "DescriptionListDetails";

// src/DescriptionListSet.tsx
var import_box4 = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React4 = __toESM(require("react"));
var StyledDescriptionListSet = import_styling_library.styled.div(
  (0, import_styling_library.css)({
    ":not(:last-of-type)": {
      marginBottom: "space60"
    },
    "& > dd:not(:last-of-type)": {
      marginBottom: "space10"
    },
    "& > dt:last-of-type": {
      marginBottom: "space20"
    },
    "& > dt:not(:last-of-type)": {
      marginBottom: "space10"
    }
  })
);
var DescriptionListSet = React4.forwardRef(
  ({ element = "DESCRIPTION_LIST_SET", children, ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(import_box4.Box, { ...(0, import_box4.safelySpreadBoxProps)(props), as: StyledDescriptionListSet, ref, element }, children);
  }
);
DescriptionListSet.displayName = "DescriptionListSet";
