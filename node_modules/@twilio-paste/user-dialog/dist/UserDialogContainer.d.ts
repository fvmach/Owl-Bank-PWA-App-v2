import type { AvatarContentProps } from "@twilio-paste/avatar";
import type { GenericIconProps } from "@twilio-paste/icons/esm/types";
import type { NonModalDialogPrimitivePopoverInitialState, NonModalDialogPrimitiveStateReturn } from "@twilio-paste/non-modal-dialog-primitive";
import * as React from "react";
interface UserDialogContextProps {
    userDialogState: NonModalDialogPrimitiveStateReturn;
    avatarProps: Pick<AvatarContentProps, "name" | "src" | "icon">;
}
export declare const UserDialogContext: React.Context<UserDialogContextProps>;
export type UseUserDialogStateProps = NonModalDialogPrimitivePopoverInitialState;
export type UseUserDialogStateReturnProps = NonModalDialogPrimitiveStateReturn;
export declare const useUserDialogState: (props?: UseUserDialogStateProps) => UseUserDialogStateReturnProps;
export interface UserDialogContainerProps extends NonModalDialogPrimitivePopoverInitialState {
    children: NonNullable<React.ReactNode>;
    /**
     * useUserDialog state hook return value
     *
     * @type {UseUserDialogStateReturnProps}
     * @memberof UserDialogContainerProps
     */
    state?: UseUserDialogStateReturnProps;
    /**
     * Provides name for the Avatar initials
     *
     * @type {string}
     * @memberof UserDialogContainerProps
     */
    name: string;
    /**
     * Provides an image for the Avatar
     *
     * @type {string}
     * @memberof UserDialogContainerProps
     */
    src?: string;
    /**
     * Provides an icon for the Avatar
     *
     * @type {React.FC<React.PropsWithChildren<GenericIconProps>>}
     * @memberof UserDialogContainerProps
     */
    icon?: React.FC<React.PropsWithChildren<GenericIconProps>>;
}
export declare const UserDialogContainer: React.FC<UserDialogContainerProps>;
export {};
//# sourceMappingURL=UserDialogContainer.d.ts.map