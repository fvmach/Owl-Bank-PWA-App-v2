// src/UserDialog.tsx
import { Avatar } from "@twilio-paste/avatar";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { ChevronDownIcon } from "@twilio-paste/icons/esm/ChevronDownIcon";
import { NonModalDialogDisclosurePrimitive, NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { StyledBase } from "@twilio-paste/theme";
import * as React2 from "react";

// src/UserDialogContainer.tsx
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
import * as React from "react";
var UserDialogContext = React.createContext({});
var useUserDialogState = (props) => {
  return useNonModalDialogPrimitiveState({ ...props, placement: "bottom-start", gutter: 0 });
};
var UserDialogContainer = ({
  children,
  state,
  name,
  src,
  icon,
  ...initialState
}) => {
  const nonModalDialogState = state || useNonModalDialogPrimitiveState({
    modal: true,
    visible: false,
    placement: "bottom-start",
    gutter: 0,
    ...initialState
  });
  const avatarProps = { name, src, icon };
  return /* @__PURE__ */ React.createElement(UserDialogContext.Provider, { value: { userDialogState: nonModalDialogState, avatarProps } }, children);
};
UserDialogContainer.displayName = "UserDialogContainer";

// src/UserDialog.tsx
var UserDialogPopover = React2.forwardRef(({ style, ...props }, ref) => {
  return /* @__PURE__ */ React2.createElement(
    Box,
    {
      ...safelySpreadBoxProps(props),
      ref,
      style,
      boxShadow: "shadow",
      borderWidth: "borderWidth10",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius30",
      padding: "space0",
      marginTop: "space30",
      width: "size30",
      zIndex: "zIndex80",
      outline: "none"
    },
    props.children
  );
});
UserDialogPopover.displayName = "UserDialogPopover";
var UserDialogButton = React2.forwardRef(
  ({ children, element, ...props }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      Button,
      {
        ...props,
        variant: "reset",
        size: "reset",
        borderRadius: "borderRadius20",
        element: `${element}_BUTTON`,
        ref
      },
      children
    );
  }
);
UserDialogButton.displayName = "UserDialogButton";
var UserDialog = React2.forwardRef(
  ({ children, "aria-label": label, element = "USER_DIALOG", ...props }, ref) => {
    const { userDialogState, avatarProps } = React2.useContext(UserDialogContext);
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(NonModalDialogDisclosurePrimitive, { ...userDialogState, as: UserDialogButton, element }, /* @__PURE__ */ React2.createElement(
      Box,
      {
        display: "flex",
        columnGap: "space20",
        alignItems: "center",
        element: `${element}_BUTTON_CONTENTS`,
        color: "colorTextIcon",
        _hover: { color: "colorTextPrimaryStrongest" }
      },
      /* @__PURE__ */ React2.createElement(
        Avatar,
        {
          variant: "user",
          size: "sizeIcon40",
          name: avatarProps.name,
          icon: avatarProps.icon,
          src: avatarProps.src,
          element: `${element}_BUTTON_AVATAR`
        }
      ),
      /* @__PURE__ */ React2.createElement(ChevronDownIcon, { decorative: true, size: "sizeIcon30", element: `${element}_BUTTON_ICON` })
    )), /* @__PURE__ */ React2.createElement(
      NonModalDialogPrimitive,
      {
        ...userDialogState,
        ...props,
        preventBodyScroll: false,
        "aria-label": label,
        as: UserDialogPopover,
        element,
        ref
      },
      /* @__PURE__ */ React2.createElement(StyledBase, null, children)
    ));
  }
);
UserDialog.displayName = "UserDialog";

// src/UserDialogUserInfo.tsx
import { Avatar as Avatar2 } from "@twilio-paste/avatar";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { MediaBody, MediaFigure, MediaObject } from "@twilio-paste/media-object";
import { Separator } from "@twilio-paste/separator";
import * as React3 from "react";
var UserDialogUserInfo = React3.forwardRef(
  ({ children, element = "USER_DIALOG", ...props }, ref) => {
    const { avatarProps } = React3.useContext(UserDialogContext);
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        backgroundColor: "colorBackgroundWeak",
        padding: "space50",
        borderTopLeftRadius: "borderRadius30",
        borderTopRightRadius: "borderRadius30",
        element: `${element}_USER_INFO`,
        ref
      },
      /* @__PURE__ */ React3.createElement(MediaObject, { as: "div", verticalAlign: "center" }, /* @__PURE__ */ React3.createElement(MediaFigure, { as: "div", spacing: "space50" }, /* @__PURE__ */ React3.createElement(
        Avatar2,
        {
          variant: "user",
          size: "sizeIcon80",
          name: avatarProps.name,
          src: avatarProps.src,
          icon: avatarProps.icon,
          element: `${element}_USER_AVATAR`
        }
      )), /* @__PURE__ */ React3.createElement(MediaBody, { as: "div" }, children))
    ), /* @__PURE__ */ React3.createElement(Separator, { orientation: "horizontal", element: `${element}_USER_INFO_SEPARATOR` }));
  }
);
UserDialogUserInfo.displayName = "UserDialogUserInfo";

// src/UserDialogUserName.tsx
import { Text } from "@twilio-paste/text";
import * as React4 from "react";
var UserDialogUserName = React4.forwardRef(
  ({ children, element = "USER_DIALOG_USER_NAME", ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(
      Text,
      {
        ...props,
        as: "div",
        fontSize: "fontSize40",
        color: "colorText",
        fontWeight: "fontWeightSemibold",
        lineHeight: "lineHeight40",
        element,
        ref
      },
      children
    );
  }
);
UserDialogUserName.displayName = "UserDialogName";

// src/UserDialogUserEmail.tsx
import { Text as Text2 } from "@twilio-paste/text";
import * as React5 from "react";
var UserDialogUserEmail = React5.forwardRef(
  ({ children, element = "USER_DIALOG_USER_EMAIL", ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(
      Text2,
      {
        ...props,
        as: "div",
        fontSize: "fontSize30",
        color: "colorTextWeak",
        fontWeight: "fontWeightLight",
        lineHeight: "lineHeight20",
        element,
        ref
      },
      children
    );
  }
);
UserDialogUserEmail.displayName = "UserDialogEmail";

// src/UserDialogList.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { ListboxPrimitive, useListboxPrimitiveState } from "@twilio-paste/listbox-primitive";
import * as React6 from "react";
var useUserDialogListState = (props) => {
  return useListboxPrimitiveState({ ...props, orientation: "vertical" });
};
var UserDialogListbox = React6.forwardRef(
  ({ element = "USER_DIALOG", ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      Box3,
      {
        ...safelySpreadBoxProps3(props),
        element: `${element}_LIST`,
        backgroundColor: "colorBackgroundBody",
        borderRadius: "borderRadius30",
        paddingY: "space30",
        ref
      },
      props.children
    );
  }
);
UserDialogListbox.displayName = "UserDialogListbox";
var UserDialogList = React6.forwardRef(({ children, ...props }, ref) => {
  return /* @__PURE__ */ React6.createElement(ListboxPrimitive, { ...props, as: UserDialogListbox, ref }, children);
});
UserDialogList.displayName = "UserDialogList";

// src/UserDialogListItem.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { ListboxPrimitiveItem } from "@twilio-paste/listbox-primitive";
import * as React7 from "react";
var UserDialogListboxItem = React7.forwardRef(
  ({ children, href, element = "USER_DIALOG", ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      Box4,
      {
        ...safelySpreadBoxProps4(props),
        element: `${element}_LIST_ITEM`,
        as: href ? "a" : "div",
        href,
        ref,
        width: "100%",
        paddingLeft: "space60",
        paddingRight: "space70",
        paddingY: "space30",
        display: "flex",
        columnGap: "space30",
        color: "colorText",
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth20",
        borderLeftColor: "colorBorderWeakest",
        outline: "none",
        _hover: {
          cursor: "pointer",
          backgroundColor: "colorBackgroundPrimaryWeakest",
          color: "colorTextPrimary",
          borderLeftStyle: "solid",
          borderLeftWidth: "borderWidth20",
          borderLeftColor: "colorBorderPrimary"
        },
        _focus: {
          cursor: "pointer",
          backgroundColor: "colorBackgroundPrimaryWeakest",
          color: "colorTextPrimary",
          borderLeftStyle: "solid",
          borderLeftWidth: "borderWidth20",
          borderLeftColor: "colorBorderPrimary"
        }
      },
      children
    );
  }
);
UserDialogListboxItem.displayName = "UserDialogListboxItem";
var UserDialogListItem = React7.forwardRef(
  ({ children, ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(ListboxPrimitiveItem, { ...props, ref, as: UserDialogListboxItem }, children);
  }
);
UserDialogListItem.displayName = "UserDialogListItem";

// src/UserDialogSeparator.tsx
import { Box as Box5 } from "@twilio-paste/box";
import { Separator as Separator2 } from "@twilio-paste/separator";
import * as React8 from "react";
var UserDialogSeparator = React8.forwardRef(({ element = "USER_DIALOG_SEPARATOR", ...props }, ref) => {
  return /* @__PURE__ */ React8.createElement(Box5, { paddingY: "space30" }, /* @__PURE__ */ React8.createElement(Separator2, { ...props, element, ref, orientation: "horizontal" }));
});
UserDialogSeparator.displayName = "UserDialogSeparator";
export {
  UserDialog,
  UserDialogContainer,
  UserDialogList,
  UserDialogListItem,
  UserDialogSeparator,
  UserDialogUserEmail,
  UserDialogUserInfo,
  UserDialogUserName,
  useUserDialogListState,
  useUserDialogState
};
