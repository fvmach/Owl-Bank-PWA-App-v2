// src/InlineControlGroup.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { HelpText } from "@twilio-paste/help-text";
import { Label } from "@twilio-paste/label";
import * as React from "react";
var InlineControlGroup = React.forwardRef(
  ({
    children,
    disabled,
    element = "INLINE_CONTROL_GROUP",
    errorText,
    helpText,
    legend,
    orientation = "vertical",
    required,
    i18nRequiredLabel,
    fieldStyleProps,
    ...props
  }, ref) => {
    const isVisualPicker = Boolean(fieldStyleProps);
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        as: "fieldset",
        element,
        margin: "space0",
        padding: "space0",
        minWidth: "0px",
        borderWidth: "borderWidth0",
        ref
      },
      /* @__PURE__ */ React.createElement(
        Label,
        {
          as: "legend",
          element: "LEGEND",
          htmlFor: void 0,
          required,
          marginBottom: "space0",
          disabled,
          i18nRequiredLabel
        },
        legend
      ),
      helpText && /* @__PURE__ */ React.createElement(HelpText, { marginTop: "space0" }, helpText),
      /* @__PURE__ */ React.createElement(Box, { element: `${element}_SET`, marginRight: isVisualPicker ? void 0 : "space20" }, /* @__PURE__ */ React.createElement(
        Box,
        {
          display: isVisualPicker && orientation === "horizontal" ? "inline-flex" : "block",
          width: isVisualPicker ? "100%" : void 0
        },
        React.Children.map(children, (child, index) => {
          return /* @__PURE__ */ React.createElement(
            Box,
            {
              element: `${element}_FIELD`,
              display: orientation === "horizontal" ? "inline-block" : "block",
              flexBasis: isVisualPicker ? "50%" : void 0,
              marginTop: fieldStyleProps?.marginTop ? index === 0 && orientation === "vertical" ? "space40" : fieldStyleProps?.marginTop : "space40",
              marginRight: orientation === "horizontal" && !isVisualPicker ? "space70" : null,
              marginLeft: isVisualPicker && orientation === "horizontal" ? index === 0 ? "space0" : "space30" : "space0"
            },
            child
          );
        })
      ), errorText && /* @__PURE__ */ React.createElement(Box, { element: `${element}_ERROR_TEXT_WRAPPER`, marginTop: "space40" }, /* @__PURE__ */ React.createElement(HelpText, { variant: "error" }, errorText)))
    );
  }
);
InlineControlGroup.displayName = "InlineControlGroup";
export {
  InlineControlGroup
};
