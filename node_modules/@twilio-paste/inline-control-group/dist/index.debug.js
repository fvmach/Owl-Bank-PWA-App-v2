"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  InlineControlGroup: () => InlineControlGroup
});
module.exports = __toCommonJS(src_exports);

// src/InlineControlGroup.tsx
var import_box = require("@twilio-paste/box");
var import_help_text = require("@twilio-paste/help-text");
var import_label = require("@twilio-paste/label");
var React = __toESM(require("react"));
var InlineControlGroup = React.forwardRef(
  ({
    children,
    disabled,
    element = "INLINE_CONTROL_GROUP",
    errorText,
    helpText,
    legend,
    orientation = "vertical",
    required,
    i18nRequiredLabel,
    fieldStyleProps,
    ...props
  }, ref) => {
    const isVisualPicker = Boolean(fieldStyleProps);
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        as: "fieldset",
        element,
        margin: "space0",
        padding: "space0",
        minWidth: "0px",
        borderWidth: "borderWidth0",
        ref
      },
      /* @__PURE__ */ React.createElement(
        import_label.Label,
        {
          as: "legend",
          element: "LEGEND",
          htmlFor: void 0,
          required,
          marginBottom: "space0",
          disabled,
          i18nRequiredLabel
        },
        legend
      ),
      helpText && /* @__PURE__ */ React.createElement(import_help_text.HelpText, { marginTop: "space0" }, helpText),
      /* @__PURE__ */ React.createElement(import_box.Box, { element: `${element}_SET`, marginRight: isVisualPicker ? void 0 : "space20" }, /* @__PURE__ */ React.createElement(
        import_box.Box,
        {
          display: isVisualPicker && orientation === "horizontal" ? "inline-flex" : "block",
          width: isVisualPicker ? "100%" : void 0
        },
        React.Children.map(children, (child, index) => {
          return /* @__PURE__ */ React.createElement(
            import_box.Box,
            {
              element: `${element}_FIELD`,
              display: orientation === "horizontal" ? "inline-block" : "block",
              flexBasis: isVisualPicker ? "50%" : void 0,
              marginTop: fieldStyleProps?.marginTop ? index === 0 && orientation === "vertical" ? "space40" : fieldStyleProps?.marginTop : "space40",
              marginRight: orientation === "horizontal" && !isVisualPicker ? "space70" : null,
              marginLeft: isVisualPicker && orientation === "horizontal" ? index === 0 ? "space0" : "space30" : "space0"
            },
            child
          );
        })
      ), errorText && /* @__PURE__ */ React.createElement(import_box.Box, { element: `${element}_ERROR_TEXT_WRAPPER`, marginTop: "space40" }, /* @__PURE__ */ React.createElement(import_help_text.HelpText, { variant: "error" }, errorText)))
    );
  }
);
InlineControlGroup.displayName = "InlineControlGroup";
