"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  DisplayHeading: () => DisplayHeading
});
module.exports = __toCommonJS(src_exports);

// src/DisplayHeading.tsx
var import_text = require("@twilio-paste/text");
var React = __toESM(require("react"));
var getDisplayHeadingProps = (displayHeadingVariant, marginBottom) => {
  switch (displayHeadingVariant) {
    case "displayHeading10":
      return {
        marginBottom: marginBottom || "space170",
        fontSize: "fontSizeDisplay30",
        fontWeight: "fontWeightExtrabold",
        lineHeight: "lineHeightDisplay30"
      };
    case "displayHeading30":
      return {
        marginBottom: marginBottom || "space90",
        fontSize: "fontSizeDisplay10",
        fontWeight: "fontWeightExtrabold",
        lineHeight: "lineHeightDisplay10"
      };
    case "displayHeading20":
    default:
      return {
        marginBottom: marginBottom || "space130",
        fontSize: "fontSizeDisplay20",
        fontWeight: "fontWeightExtrabold",
        lineHeight: "lineHeightDisplay20"
      };
  }
};
var DisplayHeading = React.forwardRef(
  ({ element = "DISPLAY_HEADING", as, children, display = "block", id, marginBottom, variant, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_text.Text,
      {
        ...(0, import_text.safelySpreadTextProps)(props),
        ...getDisplayHeadingProps(variant, marginBottom),
        as,
        display,
        element,
        id,
        color: "colorText",
        fontFamily: "fontFamilyDisplay",
        variant,
        ref
      },
      children
    );
  }
);
DisplayHeading.displayName = "DisplayHeading";
