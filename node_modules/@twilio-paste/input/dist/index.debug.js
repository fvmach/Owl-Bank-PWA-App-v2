"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Input: () => Input,
  InputElement: () => InputElement
});
module.exports = __toCommonJS(src_exports);

// src/Input.tsx
var import_box = require("@twilio-paste/box");
var import_input_box = require("@twilio-paste/input-box");
var import_utils = require("@twilio-paste/utils");
var React3 = __toESM(require("react"));

// src/DecrementButton.tsx
var import_button = require("@twilio-paste/button");
var import_ChevronDownIcon = require("@twilio-paste/icons/cjs/ChevronDownIcon");
var React = __toESM(require("react"));
var DecrementButton = React.forwardRef(
  ({ i18nStepDownLabel = "step value down", element, variant, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_button.Button,
      {
        ...props,
        ref,
        element: `${element}_DECREMENT_BUTTON`,
        variant: "reset",
        size: "reset",
        type: "button",
        borderRadius: "borderRadius20",
        backgroundColor: variant === "inverse" ? "colorBackgroundInverseStrong" : "colorBackground",
        marginRight: "space30",
        _focus: {
          boxShadow: variant === "inverse" ? "shadowBorderInverseStrong" : "shadowBorderPrimary"
        }
      },
      /* @__PURE__ */ React.createElement(
        import_ChevronDownIcon.ChevronDownIcon,
        {
          decorative: false,
          title: i18nStepDownLabel,
          size: "sizeIcon05",
          element: `${element}_DECREMENT_ICON`
        }
      )
    );
  }
);
DecrementButton.displayName = "Decrement";

// src/IncrementButton.tsx
var import_button2 = require("@twilio-paste/button");
var import_ChevronUpIcon = require("@twilio-paste/icons/cjs/ChevronUpIcon");
var React2 = __toESM(require("react"));
var IncrementButton = React2.forwardRef(
  ({ i18nStepUpLabel = "step value up", element, variant, ...props }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      import_button2.Button,
      {
        ...props,
        ref,
        element: `${element}_INCREMENT_BUTTON`,
        variant: "reset",
        size: "reset",
        type: "button",
        borderRadius: "borderRadius20",
        backgroundColor: variant === "inverse" ? "colorBackgroundInverseStrong" : "colorBackground",
        marginRight: "space30",
        _focus: {
          boxShadow: variant === "inverse" ? "shadowBorderInverseStrong" : "shadowBorderPrimary"
        }
      },
      /* @__PURE__ */ React2.createElement(
        import_ChevronUpIcon.ChevronUpIcon,
        {
          decorative: false,
          title: i18nStepUpLabel,
          size: "sizeIcon05",
          element: `${element}_INCREMENT_ICON`
        }
      )
    );
  }
);
IncrementButton.displayName = "Increment";

// src/utils.ts
var PROPS_TO_BLOCK = ["className", "style", "size", "height", "width"];
var safelySpreadFormControlProps = (props) => {
  return Object.keys(props).reduce((newProps, key) => {
    if (!PROPS_TO_BLOCK.includes(key)) {
      newProps[key] = props[key];
    }
    return newProps;
  }, {});
};

// src/Input.tsx
var InputElement = React3.forwardRef(({ element, ...props }, ref) => {
  return /* @__PURE__ */ React3.createElement(
    import_box.Box,
    {
      appearance: "none",
      as: "input",
      backgroundColor: "transparent",
      border: "none",
      borderRadius: "borderRadius20",
      boxShadow: "none",
      color: "inherit",
      cursor: (props.type === "date" || props.type === "time") && !props.readOnly && !props.disabled ? "text" : "auto",
      display: "block",
      element,
      fontFamily: "inherit",
      fontSize: "fontSize30",
      fontWeight: "fontWeightMedium",
      lineHeight: "lineHeight20",
      margin: "space0",
      outline: "none",
      paddingBottom: "space30",
      paddingLeft: "space40",
      paddingRight: "space40",
      paddingTop: "space30",
      resize: "none",
      width: "100%",
      variant: props.variant,
      ref,
      _placeholder: {
        color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak",
        fontStyle: "italic"
      },
      _focus_placeholder: {
        color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeak"
      },
      _disabled: {
        color: props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
        cursor: "not-allowed",
        "-webkit-text-fill-color": props.variant === "inverse" ? "colorTextInverseWeakest" : "colorTextWeaker",
        "-webkit-opacity": "1"
      },
      __webkit_datetime_edit: {
        display: "flex"
      },
      __webkit_calendar_picker_indicator_hover: {
        cursor: props.readOnly || props.disabled ? "default" : "pointer"
      },
      __webkit_inner_spin_button: {
        display: "none",
        margin: "space0"
      },
      __webkit_outer_spin_button: {
        display: "none",
        margin: "space0"
      },
      ...{ "-moz-appearance": "textfield" },
      ...props
    }
  );
});
InputElement.displayName = "InputElement";
var Input = React3.forwardRef(
  ({
    disabled,
    element = "INPUT",
    hasError,
    id,
    insertAfter,
    insertBefore,
    max,
    min,
    name,
    placeholder,
    readOnly,
    required,
    step,
    type,
    value,
    variant,
    i18nStepUpLabel,
    i18nStepDownLabel,
    ...props
  }, ref) => {
    const typeProps = { type };
    const internalRef = React3.useRef();
    const mergedRef = (0, import_utils.useMergeRefs)(internalRef, ref);
    const [showIncrement, setShowIncrement] = React3.useState(true);
    const [showDecrement, setShowDecrement] = React3.useState(true);
    const [internalValue, setInternalValue] = React3.useState(value ?? props.defaultValue ?? "0");
    React3.useEffect(() => {
      if (type !== "number")
        return;
      if (disabled) {
        setShowDecrement(false);
        setShowIncrement(false);
        return;
      }
      const numVal = Number(internalValue);
      const numStep = step && !isNaN(Number(step)) ? Number(step) : 1;
      const numMax = Number(max);
      if (isNaN(numMax))
        return;
      const numMin = Number(min);
      if (isNaN(numMin))
        return;
      if ((numMax - numMin) % numStep !== 0)
        console.error(
          "[Paste Input]: when using min/max, and step values with a Number Input, please make sure that the min and max are multiples of the step value."
        );
      if (numVal < numMax && numVal + numStep <= numMax) {
        setShowIncrement(true);
      } else {
        setShowIncrement(false);
      }
      if (numVal > numMin && numVal - numStep >= numMin) {
        setShowDecrement(true);
      } else {
        setShowDecrement(false);
      }
    }, [max, min, step, disabled, type, internalValue]);
    return /* @__PURE__ */ React3.createElement(
      import_input_box.InputBox,
      {
        disabled,
        element,
        hasError,
        insertAfter,
        insertBefore,
        readOnly,
        type,
        variant
      },
      /* @__PURE__ */ React3.createElement(
        InputElement,
        {
          "aria-invalid": hasError,
          "aria-readonly": readOnly,
          ...safelySpreadFormControlProps(props),
          ...typeProps,
          disabled,
          element: `${element}_ELEMENT`,
          id,
          name,
          max,
          min,
          placeholder,
          readOnly,
          ref: mergedRef,
          required,
          step,
          value,
          variant,
          onChange: (event) => {
            if (props.onChange != null && typeof props.onChange === "function") {
              props.onChange(event);
            }
            setInternalValue(event.target.value);
          }
        }
      ),
      type === "number" ? /* @__PURE__ */ React3.createElement(
        import_box.Box,
        {
          display: "flex",
          flexDirection: "column",
          rowGap: "space10",
          justifyContent: "center",
          element: `${element}_STEP_WRAPPER`
        },
        showIncrement ? /* @__PURE__ */ React3.createElement(
          IncrementButton,
          {
            element,
            onClick: () => {
              internalRef.current?.stepUp();
              const ev = new Event("change", { bubbles: true });
              internalRef.current?.dispatchEvent(ev);
              internalRef.current?.focus();
            },
            i18nStepUpLabel,
            variant
          }
        ) : /* @__PURE__ */ React3.createElement(import_box.Box, { height: "12px", width: "12px", element: `${element}_INCREMENT_PLACEHOLDER` }),
        showDecrement ? /* @__PURE__ */ React3.createElement(
          DecrementButton,
          {
            element,
            onClick: () => {
              internalRef.current?.stepDown();
              const ev = new Event("change", { bubbles: true });
              internalRef.current?.dispatchEvent(ev);
              internalRef.current?.focus();
            },
            i18nStepDownLabel,
            variant
          }
        ) : /* @__PURE__ */ React3.createElement(import_box.Box, { height: "12px", width: "12px", element: `${element}_DECREMENT_PLACEHOLDER` })
      ) : /* @__PURE__ */ React3.createElement(React3.Fragment, null)
    );
  }
);
Input.displayName = "Input";
