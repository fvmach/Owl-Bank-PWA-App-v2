"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  FilePicker: () => FilePicker,
  FilePickerButton: () => FilePickerButton
});
module.exports = __toCommonJS(src_exports);

// src/FilePicker.tsx
var import_box = require("@twilio-paste/box");
var import_sibling_box = require("@twilio-paste/sibling-box");
var import_text = require("@twilio-paste/text");
var import_uid_library = require("@twilio-paste/uid-library");
var React = __toESM(require("react"));
var getTextColor = (disabled, fileDescription, i18nNoSelectionText) => {
  const noFileUploaded = fileDescription === i18nNoSelectionText;
  if (disabled)
    return "colorTextWeaker";
  if (noFileUploaded)
    return "colorTextWeak";
  return "colorText";
};
var FilePicker = React.forwardRef(
  ({
    element = "FILEPICKER",
    accept,
    id = (0, import_uid_library.useUID)(),
    children,
    disabled = false,
    i18nNoSelectionText = "No file uploaded",
    required = false,
    onChange,
    ...props
  }, ref) => {
    const [fileDescription, setFileDescription] = React.useState(i18nNoSelectionText);
    const textId = (0, import_uid_library.useUID)();
    const handleChange = (evt) => {
      if (onChange)
        onChange(evt);
      if (evt.currentTarget.files && evt.currentTarget.files.length > 0) {
        const file = evt.currentTarget.files[0].name;
        setFileDescription(file);
      } else {
        setFileDescription(i18nNoSelectionText);
      }
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        id,
        ref,
        as: "input",
        type: "file",
        accept,
        "aria-disabled": disabled,
        disabled,
        "aria-required": required,
        "aria-describedby": textId,
        size: "size0",
        border: "none",
        overflow: "hidden",
        padding: "space0",
        margin: "space0",
        whiteSpace: "nowrap",
        textTransform: "none",
        position: "absolute",
        clip: "rect(0 0 0 0)",
        onChange: handleChange
      }
    ), /* @__PURE__ */ React.createElement("label", { htmlFor: id }, /* @__PURE__ */ React.createElement(
      import_sibling_box.SiblingBox,
      {
        element,
        width: "100%",
        display: "flex",
        justifyContent: "start",
        as: "span",
        type: "file",
        borderRadius: "borderRadius30",
        padding: "space20",
        boxShadow: "shadowBorder",
        backgroundColor: "colorBackgroundBody",
        _focusSibling: {
          borderRadius: "borderRadius30",
          padding: "space20",
          boxShadow: "shadowFocus",
          backgroundColor: "colorBackgroundBody"
        },
        _disabledSibling: {
          backgroundColor: "colorBackground",
          boxShadow: "shadowBorderWeaker"
        }
      },
      React.cloneElement(children, { disabled, element: `${element}_BUTTON` }),
      /* @__PURE__ */ React.createElement(
        import_text.Text,
        {
          id: textId,
          as: "span",
          paddingX: "space30",
          color: getTextColor(disabled, fileDescription, i18nNoSelectionText),
          fontWeight: fileDescription === i18nNoSelectionText ? "fontWeightNormal" : "fontWeightMedium",
          fontStyle: fileDescription === i18nNoSelectionText ? "italic" : "none",
          element: `${element}_TEXT`
        },
        fileDescription
      )
    )));
  }
);
FilePicker.displayName = "FilePicker";

// src/FilePickerButton.tsx
var import_box2 = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var React2 = __toESM(require("react"));
var FilePickerButton = React2.forwardRef(
  ({ children, element, disabled, ...props }, ref) => {
    return /* @__PURE__ */ React2.createElement(import_box2.Box, { whiteSpace: "nowrap" }, /* @__PURE__ */ React2.createElement(import_button.Button, { ...props, element, ref, size: "default", disabled, as: "span", type: "button" }, children));
  }
);
FilePickerButton.displayName = "FilePickerButton";
