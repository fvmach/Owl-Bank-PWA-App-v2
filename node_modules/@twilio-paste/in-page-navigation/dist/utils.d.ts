export declare const useElementsOutOfBounds: () => {
    elementOutOBoundsLeft: HTMLDivElement | null;
    elementOutOBoundsRight: HTMLDivElement | null;
    determineElementsOutOfBounds: (scrollContainer: HTMLDivElement | null, listContainer: HTMLElement | null) => void;
};
export declare const useShowShadow: () => {
    showShadow: boolean;
    handleShadow: () => void;
};
/**
 * Scrolls to the element that is out of bounds (from React State), centering it in the scrollable container
 * Logic to handle scrolling also replicated in CodeBlock and InPageNavigation. If changing here, consider reviewing those components too.
 */
export declare const handleScrollDirection: (direction: "left" | "right", elementOutOBoundsLeft: HTMLDivElement | null, elementOutOBoundsRight: HTMLDivElement | null, scrollContainer: HTMLElement | null) => void;
//# sourceMappingURL=utils.d.ts.map