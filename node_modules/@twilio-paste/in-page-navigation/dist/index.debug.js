"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  InPageNavigation: () => InPageNavigation,
  InPageNavigationItem: () => InPageNavigationItem
});
module.exports = __toCommonJS(src_exports);

// src/InPageNavigation.tsx
var import_box2 = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React4 = __toESM(require("react"));

// src/InPageNavigationContext.tsx
var React = __toESM(require("react"));
var InPageNavigationContext = React.createContext({
  variant: "default",
  orientation: "horizontal"
});

// src/OverflowButton.tsx
var import_box = require("@twilio-paste/box");
var import_ChevronLeftIcon = require("@twilio-paste/icons/cjs/ChevronLeftIcon");
var import_ChevronRightIcon = require("@twilio-paste/icons/cjs/ChevronRightIcon");
var import_theme = require("@twilio-paste/theme");
var import_react = __toESM(require("react"));
var Styles = {
  color: "colorTextIcon",
  _hover: {
    color: "colorTextPrimaryStrongest",
    cursor: "pointer"
  }
};
var InverseStyles = {
  color: "colorTextIconInverse",
  _hover: {
    color: "colorTextInverse",
    cursor: "pointer"
  }
};
var OverflowButton = ({
  onClick,
  position,
  visible,
  element = "TAB_LIST",
  showShadow
}) => {
  const theme = (0, import_theme.useTheme)();
  const { variant } = import_react.default.useContext(InPageNavigationContext);
  const isInverse = variant === "inverse" || variant === "inverse_fullWidth";
  const Chevron = position === "left" ? import_ChevronLeftIcon.ChevronLeftIcon : import_ChevronRightIcon.ChevronRightIcon;
  if (!visible)
    return null;
  const determineShadow = () => {
    if (showShadow) {
      if (position === "left")
        return isInverse ? theme.shadows.shadowLeftInverse : theme.shadows.shadowLeft;
      return isInverse ? theme.shadows.shadowRightInverse : theme.shadows.shadowRight;
    }
    return void 0;
  };
  return /* @__PURE__ */ import_react.default.createElement(
    import_box.Box,
    {
      onClick,
      "aria-hidden": true,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "sizeBase70",
      padding: "space20",
      boxShadow: determineShadow(),
      element: `${element}_OVERFLOW_BUTTON_${position.toUpperCase()}`,
      zIndex: "zIndex10",
      ...isInverse ? InverseStyles : Styles
    },
    /* @__PURE__ */ import_react.default.createElement(Chevron, { decorative: true })
  );
};
OverflowButton.displayName = "OverflowButton";

// src/utils.ts
var import_react2 = __toESM(require("react"));
var useElementsOutOfBounds = () => {
  const [elementOutOBoundsLeft, setElementOutOfBoundsLeft] = import_react2.default.useState(null);
  const [elementOutOBoundsRight, setElementOutOfBoundsRight] = import_react2.default.useState(null);
  const determineElementsOutOfBounds = (scrollContainer, listContainer) => {
    if (scrollContainer && listContainer) {
      const currentScrollContainerRightPosition = scrollContainer?.getBoundingClientRect().right;
      const currentScrollContainerXOffset = scrollContainer?.getBoundingClientRect().x;
      let leftOutOfBounds = null;
      let rightOutOfBounds = null;
      listContainer.childNodes.forEach((tab) => {
        const { x, right } = tab.getBoundingClientRect();
        const isSpanningView = x < currentScrollContainerXOffset && right > currentScrollContainerRightPosition;
        if (!isSpanningView) {
          if (Math.round(x) < Math.round(currentScrollContainerXOffset - 28)) {
            leftOutOfBounds = tab;
          }
          if (Math.round(right) > Math.round(currentScrollContainerRightPosition + 28) && !rightOutOfBounds) {
            rightOutOfBounds = tab;
          }
        }
        setElementOutOfBoundsLeft(leftOutOfBounds);
        setElementOutOfBoundsRight(rightOutOfBounds);
      });
    }
  };
  return { elementOutOBoundsLeft, elementOutOBoundsRight, determineElementsOutOfBounds };
};
var useShowShadow = () => {
  const [showShadow, setShowShadow] = import_react2.default.useState(false);
  let showShadowTimer;
  const handleShadow = () => {
    if (showShadowTimer) {
      window.clearTimeout(showShadowTimer);
    }
    setShowShadow(true);
    showShadowTimer = window.setTimeout(() => {
      setShowShadow(false);
    }, 500);
  };
  return { showShadow, handleShadow };
};
var handleScrollDirection = (direction, elementOutOBoundsLeft, elementOutOBoundsRight, scrollContainer) => {
  const elementToScrollTo = direction === "left" ? elementOutOBoundsLeft : elementOutOBoundsRight;
  if (scrollContainer && elementToScrollTo) {
    const elementRect = elementToScrollTo.getBoundingClientRect();
    const containerRect = scrollContainer.getBoundingClientRect();
    const containerScrollLeft = scrollContainer.scrollLeft;
    const newScrollLeft = containerScrollLeft + (elementRect.left - containerRect.left) - containerRect.width / 2 + elementRect.width / 2;
    scrollContainer.scrollTo({ left: newScrollLeft, behavior: "smooth" });
  }
};

// src/InPageNavigation.tsx
var StyledScrollWrapper = import_styling_library.styled.div(() => {
  return (0, import_styling_library.css)({
    overflowX: "auto",
    overflowY: "hidden",
    overflowScrolling: "touch",
    "@supports (-moz-appearance:none)": {
      paddingBottom: "0px",
      scrollbarWidth: "none"
    },
    "::-webkit-scrollbar": {
      height: 0
    },
    "::-webkit-scrollbar-track": {
      background: "transparent"
    }
  });
});
var InPageNavigation = React4.forwardRef(
  ({
    element = "IN_PAGE_NAVIGATION",
    variant = "default",
    orientation = "horizontal",
    marginBottom,
    hideBottomBorder = false,
    children,
    ...props
  }, ref) => {
    const isFullWidth = variant === "fullWidth" || variant === "inverse_fullWidth";
    const isInverse = variant === "inverse" || variant === "inverse_fullWidth";
    const listRef = React4.useRef(null);
    const scrollableRef = React4.useRef(null);
    const { determineElementsOutOfBounds, elementOutOBoundsLeft, elementOutOBoundsRight } = useElementsOutOfBounds();
    const { handleShadow, showShadow } = useShowShadow();
    const handleScrollEvent = () => {
      handleShadow();
      determineElementsOutOfBounds(scrollableRef.current, listRef.current);
    };
    React4.useEffect(() => {
      if (listRef.current && scrollableRef.current) {
        const currentSelectedTab = listRef.current.querySelector(`[aria-current="page"]`);
        const scrollableWidth = scrollableRef.current.getBoundingClientRect().width;
        if (currentSelectedTab && (currentSelectedTab?.getBoundingClientRect().x < 0 || currentSelectedTab?.getBoundingClientRect().right > scrollableWidth)) {
          const scrollLeft = currentSelectedTab.getBoundingClientRect().x - scrollableRef.current.getBoundingClientRect().x;
          scrollableRef.current.scrollLeft += scrollLeft;
        }
        scrollableRef.current?.addEventListener("scroll", handleScrollEvent);
        window.addEventListener("resize", handleScrollEvent);
        determineElementsOutOfBounds(scrollableRef.current, listRef.current);
      }
    }, [listRef.current, scrollableRef.current]);
    React4.useEffect(() => {
      return () => {
        if (scrollableRef.current) {
          scrollableRef.current.removeEventListener("scroll", handleScrollEvent);
          window.removeEventListener("resize", handleScrollEvent);
        }
      };
    }, []);
    if (orientation === "vertical") {
      return /* @__PURE__ */ React4.createElement(InPageNavigationContext.Provider, { value: { variant, orientation } }, /* @__PURE__ */ React4.createElement(import_box2.Box, { ...(0, import_box2.safelySpreadBoxProps)(props), as: "nav", ref, element }, /* @__PURE__ */ React4.createElement(
        import_box2.Box,
        {
          as: "ul",
          listStyleType: "none",
          element: `${element}_ITEMS`,
          display: "flex",
          flexDirection: "column",
          margin: "space0",
          padding: "space0",
          width: "100%",
          rowGap: "space20"
        },
        children
      )));
    }
    if (isFullWidth) {
      return /* @__PURE__ */ React4.createElement(InPageNavigationContext.Provider, { value: { variant, orientation } }, /* @__PURE__ */ React4.createElement(import_box2.Box, { ...(0, import_box2.safelySpreadBoxProps)(props), as: "nav", ref, element }, /* @__PURE__ */ React4.createElement(
        import_box2.Box,
        {
          as: "ul",
          listStyleType: "none",
          element: `${element}_ITEMS`,
          display: "flex",
          justifyContent: "space-evenly",
          columnGap: "space0",
          padding: "space0",
          margin: "space0",
          marginBottom: marginBottom || "space60",
          borderBottomWidth: hideBottomBorder ? "borderWidth0" : "borderWidth10",
          borderBottomStyle: hideBottomBorder ? "none" : "solid",
          borderBottomColor: isInverse ? "colorBorderInverseWeaker" : "colorBorderWeaker"
        },
        children
      )));
    }
    return /* @__PURE__ */ React4.createElement(InPageNavigationContext.Provider, { value: { variant, orientation } }, /* @__PURE__ */ React4.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        as: "nav",
        marginBottom: marginBottom || "space60",
        display: "flex",
        ref,
        element,
        overflow: "hidden"
      },
      /* @__PURE__ */ React4.createElement(
        OverflowButton,
        {
          position: "left",
          onClick: () => handleScrollDirection("left", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
          visible: Boolean(elementOutOBoundsLeft),
          element,
          showShadow
        }
      ),
      /* @__PURE__ */ React4.createElement(
        import_box2.Box,
        {
          as: StyledScrollWrapper,
          display: "flex",
          flexWrap: "nowrap",
          element: `${element}_SCROLL_WRAPPER`,
          overflowX: "auto",
          overflowY: "hidden",
          flexGrow: 1,
          ref: scrollableRef
        },
        /* @__PURE__ */ React4.createElement(
          import_box2.Box,
          {
            as: "ul",
            ref: listRef,
            listStyleType: "none",
            element: `${element}_ITEMS`,
            display: "flex",
            flexGrow: 1,
            justifyContent: "flex-start",
            padding: "space0",
            margin: "space0",
            columnGap: "space50",
            borderBottomWidth: hideBottomBorder ? "borderWidth0" : "borderWidth10",
            borderBottomStyle: hideBottomBorder ? "none" : "solid",
            borderBottomColor: isInverse ? "colorBorderInverseWeaker" : "colorBorderWeaker"
          },
          children
        )
      ),
      /* @__PURE__ */ React4.createElement(
        OverflowButton,
        {
          position: "right",
          onClick: () => handleScrollDirection("right", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
          visible: Boolean(elementOutOBoundsRight),
          element,
          showShadow
        }
      )
    ));
  }
);
InPageNavigation.displayName = "InPageNavigation";

// src/InPageNavigationItem.tsx
var import_anchor = require("@twilio-paste/anchor");
var import_box3 = require("@twilio-paste/box");
var React5 = __toESM(require("react"));
var BASE_STYLES = {
  color: "colorTextWeak",
  minWidth: "sizeSquare130",
  textAlign: "center",
  fontSize: "fontSize30",
  fontWeight: "fontWeightMedium",
  overflow: "hidden",
  position: "relative",
  textOverflow: "ellipsis",
  transition: "border-color 100ms ease, color 100ms ease",
  whiteSpace: "nowrap",
  textDecoration: "none",
  _hover: {
    borderBottomColor: "colorBorderPrimaryStronger",
    borderLeftColor: "colorBorderPrimaryStronger",
    color: "colorTextLinkStronger"
  },
  _focus: {
    boxShadow: "shadowFocusInset",
    outline: "none",
    borderRadius: "borderRadius20"
  }
};
var HORIZONTAL_BASE_STYLES = {
  ...BASE_STYLES,
  width: "100%",
  display: "block",
  borderBottomColor: "transparent",
  borderBottomStyle: "solid",
  borderBottomWidth: "borderWidth10",
  paddingBottom: "space40",
  paddingLeft: "space30",
  paddingRight: "space30",
  paddingTop: "space40",
  borderTopLeftRadius: "borderRadius30",
  borderTopRightRadius: "borderRadius30",
  _focus: {
    borderTopLeftRadius: "borderRadius30",
    borderTopRightRadius: "borderRadius30",
    boxShadow: "shadowFocusInset",
    outline: "none"
  }
};
var VERTICAL_BASE_STYLES = {
  ...BASE_STYLES,
  width: "auto",
  display: "block",
  borderLeftColor: "transparent",
  borderLeftStyle: "solid",
  borderLeftWidth: "borderWidth10",
  paddingBottom: "space30",
  paddingTop: "space30",
  paddingLeft: "space50",
  paddingRight: "space50",
  borderBottomRightRadius: "borderRadius30",
  borderTopRightRadius: "borderRadius30",
  whiteSpace: "break-spaces",
  _focus: {
    boxShadow: "shadowFocusInset",
    outline: "none",
    borderTopRightRadius: "borderRadius30",
    borderBottomRightRadius: "borderRadius30"
  }
};
var CURRENT_PAGE_STYLES = {
  borderBottomColor: "colorBorderPrimary",
  borderLeftColor: "colorBorderPrimary",
  color: "colorTextLink",
  _focus: {
    borderBottom: "none",
    boxShadow: "shadowFocusInset",
    outline: "none"
  }
};
var INVERSE_STYLES = {
  color: "colorTextInverseWeaker",
  _focus: {
    boxShadow: "shadowFocusInverseInset",
    outline: "none"
  },
  _hover: {
    borderBottomColor: "colorBorderInverse",
    borderLeftColor: "colorBorderInverse",
    color: "colorTextInverseWeaker"
  }
};
var INVERSE_CURRENT_PAGE_STYLES = {
  borderBottomColor: "colorBorderInverseStrong",
  borderLeftColor: "colorBorderInverseStrong",
  color: "colorTextInverse",
  _focus: {
    borderBottom: "none",
    boxShadow: "shadowFocusInverseInset",
    outline: "none"
  }
};
var InPageNavigationItem = React5.forwardRef(
  ({ element = "IN_PAGE_NAVIGATION_ITEM", currentPage = false, href, children, title, ...props }, ref) => {
    const { variant, orientation } = React5.useContext(InPageNavigationContext);
    const isFullWidth = variant === "fullWidth" || variant === "inverse_fullWidth";
    const isInverse = variant === "inverse" || variant === "inverse_fullWidth";
    let currentPageStyles = {};
    if (currentPage) {
      if (isInverse)
        currentPageStyles = INVERSE_CURRENT_PAGE_STYLES;
      else
        currentPageStyles = CURRENT_PAGE_STYLES;
    }
    if (orientation === "vertical") {
      return /* @__PURE__ */ React5.createElement(import_box3.Box, { as: "li", ref, element, minWidth: "size0", marginBottom: "space20" }, /* @__PURE__ */ React5.createElement(
        import_box3.Box,
        {
          ...(0, import_anchor.secureExternalLink)(href),
          ...(0, import_box3.safelySpreadBoxProps)(props),
          ...VERTICAL_BASE_STYLES,
          ...isInverse ? INVERSE_STYLES : {},
          ...currentPageStyles,
          as: "a",
          ref,
          element: `${element}_ANCHOR`,
          "aria-current": currentPage ? "page" : void 0,
          href,
          width: "100%",
          textAlign: "start",
          title
        },
        children
      ));
    }
    return /* @__PURE__ */ React5.createElement(
      import_box3.Box,
      {
        as: "li",
        ref,
        element,
        display: "flex",
        flexBasis: isFullWidth ? "100%" : void 0,
        flexGrow: isFullWidth ? 1 : void 0,
        flexShrink: isFullWidth ? 1 : void 0,
        minWidth: "size0"
      },
      /* @__PURE__ */ React5.createElement(
        import_box3.Box,
        {
          ...(0, import_anchor.secureExternalLink)(href),
          ...(0, import_box3.safelySpreadBoxProps)(props),
          ...HORIZONTAL_BASE_STYLES,
          ...isInverse ? INVERSE_STYLES : {},
          ...currentPageStyles,
          as: "a",
          ref,
          element: `${element}_ANCHOR`,
          "aria-current": currentPage ? "page" : void 0,
          href,
          title
        },
        children
      )
    );
  }
);
InPageNavigationItem.displayName = "InPageNavigationItem";
