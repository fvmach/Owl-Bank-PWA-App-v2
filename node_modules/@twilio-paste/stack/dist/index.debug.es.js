// src/Stack.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { useUIDSeed } from "@twilio-paste/uid-library";
import * as React from "react";
var getStackDisplay = (orientation) => {
  if (Array.isArray(orientation)) {
    return orientation.map((value) => {
      if (value === "horizontal") {
        return "flex";
      }
      return "block";
    });
  }
  if (orientation === "horizontal") {
    return "flex";
  }
  return "block";
};
var getStackStyles = (orientation) => {
  const styles = {
    display: getStackDisplay(orientation),
    alignItems: "center",
    flexWrap: "wrap"
  };
  return styles;
};
var getStackChildMargins = (orientation, spacing) => {
  let styles = {};
  if (Array.isArray(orientation)) {
    const marginRight = [];
    const marginBottom = [];
    orientation.forEach((value, i) => {
      marginRight[i] = value === "horizontal" ? spacing : "space0";
      marginBottom[i] = value === "horizontal" ? "space0" : spacing;
    });
    styles = {
      marginRight,
      marginBottom
    };
  }
  if (orientation === "horizontal") {
    styles = { marginRight: spacing };
  }
  if (orientation === "vertical") {
    styles = { marginBottom: spacing };
  }
  return styles;
};
var Stack = React.forwardRef(
  ({ children, orientation, spacing, element = "STACK", ...props }, ref) => {
    const [childrenCount, validChildren] = React.useMemo(() => {
      const filteredChildren = React.Children.toArray(children).filter(
        (child) => React.isValidElement(child) || typeof child === "string"
      );
      return [filteredChildren.length, filteredChildren];
    }, [children]);
    const stackStyles = React.useMemo(() => getStackStyles(orientation), [orientation]);
    const childMargins = React.useMemo(() => getStackChildMargins(orientation, spacing), [orientation, spacing]);
    const keySeed = useUIDSeed();
    return /* @__PURE__ */ React.createElement(Box, { element, ...safelySpreadBoxProps(props), ...stackStyles, ref }, validChildren.map((child, index) => {
      return /* @__PURE__ */ React.createElement(
        Box,
        {
          element: `${element}_CHILD`,
          ...childrenCount !== index + 1 ? childMargins : null,
          key: keySeed(`stack-${index}`)
        },
        child
      );
    }));
  }
);
Stack.displayName = "Stack";
export {
  Stack
};
