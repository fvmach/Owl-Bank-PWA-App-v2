import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import{useUIDSeed}from"@twilio-paste/uid-library";import*as React from"react";var getStackDisplay=orientation=>Array.isArray(orientation)?orientation.map(value=>value==="horizontal"?"flex":"block"):orientation==="horizontal"?"flex":"block",getStackStyles=orientation=>({display:getStackDisplay(orientation),alignItems:"center",flexWrap:"wrap"}),getStackChildMargins=(orientation,spacing)=>{let styles={};if(Array.isArray(orientation)){let marginRight=[],marginBottom=[];orientation.forEach((value,i)=>{marginRight[i]=value==="horizontal"?spacing:"space0",marginBottom[i]=value==="horizontal"?"space0":spacing}),styles={marginRight,marginBottom}}return orientation==="horizontal"&&(styles={marginRight:spacing}),orientation==="vertical"&&(styles={marginBottom:spacing}),styles},Stack=React.forwardRef(({children,orientation,spacing,element="STACK",...props},ref)=>{let[childrenCount,validChildren]=React.useMemo(()=>{let filteredChildren=React.Children.toArray(children).filter(child=>React.isValidElement(child)||typeof child=="string");return[filteredChildren.length,filteredChildren]},[children]),stackStyles=React.useMemo(()=>getStackStyles(orientation),[orientation]),childMargins=React.useMemo(()=>getStackChildMargins(orientation,spacing),[orientation,spacing]),keySeed=useUIDSeed();return React.createElement(Box,{element,...safelySpreadBoxProps(props),...stackStyles,ref},validChildren.map((child,index)=>React.createElement(Box,{element:`${element}_CHILD`,...childrenCount!==index+1?childMargins:null,key:keySeed(`stack-${index}`)},child)))});Stack.displayName="Stack";export{Stack};
