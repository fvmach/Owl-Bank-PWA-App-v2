"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Callout: () => Callout,
  CalloutHeading: () => CalloutHeading,
  CalloutList: () => CalloutList,
  CalloutListItem: () => CalloutListItem,
  CalloutText: () => CalloutText
});
module.exports = __toCommonJS(src_exports);

// src/Callout.tsx
var import_box = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_CloseIcon = require("@twilio-paste/icons/cjs/CloseIcon");
var import_ErrorIcon = require("@twilio-paste/icons/cjs/ErrorIcon");
var import_NeutralIcon = require("@twilio-paste/icons/cjs/NeutralIcon");
var import_NewIcon = require("@twilio-paste/icons/cjs/NewIcon");
var import_SuccessIcon = require("@twilio-paste/icons/cjs/SuccessIcon");
var import_WarningIcon = require("@twilio-paste/icons/cjs/WarningIcon");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React = __toESM(require("react"));
var variantStyles = {
  success: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextSuccess",
    borderColor: "colorBorderSuccessWeak"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError",
    borderColor: "colorBorderErrorWeak"
  },
  warning: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextWarningStrong",
    borderColor: "colorBorderWarningWeak"
  },
  new: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextNew",
    borderColor: "colorBorderNewWeak"
  },
  neutral: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextNeutral",
    borderColor: "colorBorderNeutralWeak"
  }
};
var variantIcons = {
  success: /* @__PURE__ */ React.createElement(import_SuccessIcon.SuccessIcon, { decorative: true, color: "colorTextIconSuccess" }),
  error: /* @__PURE__ */ React.createElement(import_ErrorIcon.ErrorIcon, { decorative: true, color: "colorTextIconError" }),
  warning: /* @__PURE__ */ React.createElement(import_WarningIcon.WarningIcon, { decorative: true, color: "colorTextIconWarning" }),
  new: /* @__PURE__ */ React.createElement(import_NewIcon.NewIcon, { decorative: true, color: "colorTextIconNew" }),
  neutral: /* @__PURE__ */ React.createElement(import_NeutralIcon.NeutralIcon, { decorative: true, color: "colorTextIconNeutral" })
};
var defaultIconLabels = {
  success: "(success)",
  error: "(error)",
  warning: "(warning)",
  new: "(new)",
  neutral: "(information)"
};
var Callout = React.forwardRef(
  ({
    children,
    variant,
    element = "CALLOUT",
    i18nLabel,
    marginY,
    onDismiss,
    i18nDismissLabel = "Dismiss callout",
    ...props
  }, ref) => {
    const IconComponent = variantIcons[variant];
    const iconLabel = i18nLabel ? i18nLabel : defaultIconLabels[variant];
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        ref,
        element,
        display: "flex",
        marginY,
        padding: "space70",
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth20",
        variant,
        alignItems: "start",
        columnGap: "space50",
        ...variantStyles[variant]
      },
      /* @__PURE__ */ React.createElement(import_box.Box, { element: `${element}_ICON` }, IconComponent, /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, iconLabel)),
      /* @__PURE__ */ React.createElement(import_box.Box, { display: "flex", flexDirection: "column", rowGap: "space30", flex: "1" }, children),
      onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React.createElement(import_button.Button, { onClick: onDismiss, variant: "secondary_icon", size: "reset", element: `${element}_DISMISS_BUTTON` }, /* @__PURE__ */ React.createElement(import_CloseIcon.CloseIcon, { element: `${element}_DISMISS_ICON`, decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
Callout.displayName = "Callout";

// src/CalloutHeading.tsx
var import_text = require("@twilio-paste/text");
var React2 = __toESM(require("react"));
var CalloutHeading = React2.forwardRef(
  ({ element = "CALLOUT_HEADING", children, as = "h3", ...props }, ref) => /* @__PURE__ */ React2.createElement(
    import_text.Text,
    {
      ...(0, import_text.safelySpreadTextProps)(props),
      as,
      ref,
      element,
      color: "currentColor",
      fontWeight: "fontWeightSemibold"
    },
    children
  )
);
CalloutHeading.displayName = "CalloutHeading";

// src/CalloutList.tsx
var import_box2 = require("@twilio-paste/box");
var import_text2 = require("@twilio-paste/text");
var React3 = __toESM(require("react"));
var CalloutList = React3.forwardRef(
  ({ element = "CALLOUT_LIST", children, as, ...props }, ref) => /* @__PURE__ */ React3.createElement(
    import_box2.Box,
    {
      ...(0, import_box2.safelySpreadBoxProps)(props),
      element,
      ref,
      as,
      margin: "space0",
      display: "flex",
      flexDirection: "column",
      rowGap: "space30",
      paddingLeft: "space60"
    },
    children
  )
);
CalloutList.displayName = "CalloutList";
var CalloutListItem = React3.forwardRef(
  ({ element = "CALLOUT_LIST_ITEM", children, ...props }, ref) => /* @__PURE__ */ React3.createElement(import_text2.Text, { ...(0, import_text2.safelySpreadTextProps)(props), element, ref, as: "li", color: "currentColor" }, children)
);
CalloutListItem.displayName = "CalloutListItem";

// src/CalloutText.tsx
var import_text3 = require("@twilio-paste/text");
var React4 = __toESM(require("react"));
var CalloutText = React4.forwardRef(
  ({ element = "CALLOUT_TEXT", children, ...props }, ref) => /* @__PURE__ */ React4.createElement(import_text3.Text, { ...(0, import_text3.safelySpreadTextProps)(props), as: "p", ref, element, color: "currentColor" }, children)
);
CalloutText.displayName = "CalloutText";
