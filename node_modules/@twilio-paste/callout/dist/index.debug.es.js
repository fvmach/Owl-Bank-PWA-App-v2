// src/Callout.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { NeutralIcon } from "@twilio-paste/icons/esm/NeutralIcon";
import { NewIcon } from "@twilio-paste/icons/esm/NewIcon";
import { SuccessIcon } from "@twilio-paste/icons/esm/SuccessIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React from "react";
var variantStyles = {
  success: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextSuccess",
    borderColor: "colorBorderSuccessWeak"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError",
    borderColor: "colorBorderErrorWeak"
  },
  warning: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextWarningStrong",
    borderColor: "colorBorderWarningWeak"
  },
  new: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextNew",
    borderColor: "colorBorderNewWeak"
  },
  neutral: {
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextNeutral",
    borderColor: "colorBorderNeutralWeak"
  }
};
var variantIcons = {
  success: /* @__PURE__ */ React.createElement(SuccessIcon, { decorative: true, color: "colorTextIconSuccess" }),
  error: /* @__PURE__ */ React.createElement(ErrorIcon, { decorative: true, color: "colorTextIconError" }),
  warning: /* @__PURE__ */ React.createElement(WarningIcon, { decorative: true, color: "colorTextIconWarning" }),
  new: /* @__PURE__ */ React.createElement(NewIcon, { decorative: true, color: "colorTextIconNew" }),
  neutral: /* @__PURE__ */ React.createElement(NeutralIcon, { decorative: true, color: "colorTextIconNeutral" })
};
var defaultIconLabels = {
  success: "(success)",
  error: "(error)",
  warning: "(warning)",
  new: "(new)",
  neutral: "(information)"
};
var Callout = React.forwardRef(
  ({
    children,
    variant,
    element = "CALLOUT",
    i18nLabel,
    marginY,
    onDismiss,
    i18nDismissLabel = "Dismiss callout",
    ...props
  }, ref) => {
    const IconComponent = variantIcons[variant];
    const iconLabel = i18nLabel ? i18nLabel : defaultIconLabels[variant];
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        ref,
        element,
        display: "flex",
        marginY,
        padding: "space70",
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth20",
        variant,
        alignItems: "start",
        columnGap: "space50",
        ...variantStyles[variant]
      },
      /* @__PURE__ */ React.createElement(Box, { element: `${element}_ICON` }, IconComponent, /* @__PURE__ */ React.createElement(ScreenReaderOnly, null, iconLabel)),
      /* @__PURE__ */ React.createElement(Box, { display: "flex", flexDirection: "column", rowGap: "space30", flex: "1" }, children),
      onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React.createElement(Button, { onClick: onDismiss, variant: "secondary_icon", size: "reset", element: `${element}_DISMISS_BUTTON` }, /* @__PURE__ */ React.createElement(CloseIcon, { element: `${element}_DISMISS_ICON`, decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React.createElement(ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
Callout.displayName = "Callout";

// src/CalloutHeading.tsx
import { Text, safelySpreadTextProps } from "@twilio-paste/text";
import * as React2 from "react";
var CalloutHeading = React2.forwardRef(
  ({ element = "CALLOUT_HEADING", children, as = "h3", ...props }, ref) => /* @__PURE__ */ React2.createElement(
    Text,
    {
      ...safelySpreadTextProps(props),
      as,
      ref,
      element,
      color: "currentColor",
      fontWeight: "fontWeightSemibold"
    },
    children
  )
);
CalloutHeading.displayName = "CalloutHeading";

// src/CalloutList.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Text as Text2, safelySpreadTextProps as safelySpreadTextProps2 } from "@twilio-paste/text";
import * as React3 from "react";
var CalloutList = React3.forwardRef(
  ({ element = "CALLOUT_LIST", children, as, ...props }, ref) => /* @__PURE__ */ React3.createElement(
    Box2,
    {
      ...safelySpreadBoxProps2(props),
      element,
      ref,
      as,
      margin: "space0",
      display: "flex",
      flexDirection: "column",
      rowGap: "space30",
      paddingLeft: "space60"
    },
    children
  )
);
CalloutList.displayName = "CalloutList";
var CalloutListItem = React3.forwardRef(
  ({ element = "CALLOUT_LIST_ITEM", children, ...props }, ref) => /* @__PURE__ */ React3.createElement(Text2, { ...safelySpreadTextProps2(props), element, ref, as: "li", color: "currentColor" }, children)
);
CalloutListItem.displayName = "CalloutListItem";

// src/CalloutText.tsx
import { Text as Text3, safelySpreadTextProps as safelySpreadTextProps3 } from "@twilio-paste/text";
import * as React4 from "react";
var CalloutText = React4.forwardRef(
  ({ element = "CALLOUT_TEXT", children, ...props }, ref) => /* @__PURE__ */ React4.createElement(Text3, { ...safelySpreadTextProps3(props), as: "p", ref, element, color: "currentColor" }, children)
);
CalloutText.displayName = "CalloutText";
export {
  Callout,
  CalloutHeading,
  CalloutList,
  CalloutListItem,
  CalloutText
};
