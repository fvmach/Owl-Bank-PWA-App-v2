"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "../../../../node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// ../../../../node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "../../../../node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// ../../../../node_modules/lodash/_root.js
var require_root = __commonJS({
  "../../../../node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// ../../../../node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "../../../../node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// ../../../../node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "../../../../node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// ../../../../node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "../../../../node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// ../../../../node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "../../../../node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// ../../../../node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "../../../../node_modules/lodash/_overArg.js"(exports, module2) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// ../../../../node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "../../../../node_modules/lodash/_getPrototype.js"(exports, module2) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module2.exports = getPrototype;
  }
});

// ../../../../node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "../../../../node_modules/lodash/isPlainObject.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module2.exports = isPlainObject;
  }
});

// ../../../../node_modules/lodash/isElement.js
var require_isElement = __commonJS({
  "../../../../node_modules/lodash/isElement.js"(exports, module2) {
    var isObjectLike = require_isObjectLike();
    var isPlainObject = require_isPlainObject();
    function isElement2(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }
    module2.exports = isElement2;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  DataGrid: () => DataGrid,
  DataGridBody: () => DataGridBody,
  DataGridCell: () => DataGridCell,
  DataGridFoot: () => DataGridFoot,
  DataGridHead: () => DataGridHead,
  DataGridHeader: () => DataGridHeader,
  DataGridHeaderSort: () => DataGridHeaderSort,
  DataGridRow: () => DataGridRow
});
module.exports = __toCommonJS(src_exports);

// src/DataGrid.tsx
var import_reakit_library = require("@twilio-paste/reakit-library");
var import_table = require("@twilio-paste/table");
var import_uid_library = require("@twilio-paste/uid-library");
var React2 = __toESM(require("react"));

// src/DataGridContext.tsx
var React = __toESM(require("react"));
var DataGridContext = React.createContext({
  actionable: false,
  striped: false
});

// src/utils/reakit/reakit-matches.ts
function matches(element, selectors) {
  if ("matches" in element) {
    return element.matches(selectors);
  }
  if ("msMatchesSelector" in element) {
    return element.msMatchesSelector(selectors);
  }
  return element.webkitMatchesSelector(selectors);
}

// src/utils/reakit/reakit-tabbable-modded.ts
var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
function isFocusable(element) {
  return matches(element, selector);
}
function getAllFocusableIn(container) {
  const allFocusable = Array.from(container.querySelectorAll(selector));
  return allFocusable.filter(isFocusable);
}
function getFirstFocusableIn(container) {
  const [first] = getAllFocusableIn(container);
  return first || null;
}

// src/utils/reakit/reakit-getDocument.ts
function getDocument(element) {
  return element ? element.ownerDocument || element : document;
}

// src/utils/reakit/reakit-getActiveElement-modded.ts
function getActiveElement(element) {
  const { activeElement } = getDocument(element);
  if (!activeElement?.nodeName) {
    return null;
  }
  return activeElement;
}

// src/utils/reakit/reakit-hasFocus.ts
function hasFocus(element) {
  const activeElement = getActiveElement(element);
  if (!activeElement)
    return false;
  if (activeElement === element)
    return true;
  const activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant)
    return false;
  return activeDescendant === element.id;
}

// src/utils/reakit/reakit-ensureFocus.ts
function ensureFocus(element, { preventScroll, isActive = hasFocus } = {}) {
  if (isActive(element))
    return -1;
  element.focus({ preventScroll });
  if (isActive(element))
    return -1;
  return requestAnimationFrame(() => {
    element.focus({ preventScroll });
  });
}

// src/utils/cell-management.ts
var updateTabIndexForActionable = (cellElement, actionable) => {
  getAllFocusableIn(cellElement).forEach((element) => {
    element.tabIndex = actionable ? 0 : -1;
  });
};
var delayedSetFocusable = (element) => {
  setTimeout(() => {
    if (element != null) {
      element.tabIndex = 0;
    }
  }, 150);
};
var isCell = (element) => {
  return element.tagName === "TD" || element.tagName === "TH";
};
var getClosestCellFrom = (element, dataGridId) => {
  if (element == null)
    return null;
  if (!dataGridId)
    return null;
  return element.closest(`[id="${dataGridId}"] th, [id="${dataGridId}"] td`);
};
var getClosestGridCellFromCurrentFocus = (dataGridId) => {
  const focusedElement = getActiveElement();
  if (!focusedElement) {
    return null;
  }
  if (isCell(focusedElement)) {
    return focusedElement;
  }
  return getClosestCellFrom(focusedElement, dataGridId);
};

// src/DataGrid.tsx
var DataGrid = React2.forwardRef(
  ({ element = "DATA_GRID", role = "grid", striped = false, ...props }, ref) => {
    const dataGridId = `data-grid-${(0, import_uid_library.useUID)()}`;
    const lastFocusedElement = React2.useRef(null);
    const compositeState = (0, import_reakit_library.useCompositeState)({ unstable_virtual: false });
    const [actionable, setActionable] = React2.useState(false);
    const handleMouseDown = React2.useCallback(() => {
      setActionable(true);
    }, []);
    const handleFocus = React2.useCallback((e) => {
      if (e.target != null) {
        lastFocusedElement.current = e.target;
      }
    }, []);
    const handleBlur = React2.useCallback(
      (event) => {
        const isDataGridBlurred = !event.currentTarget.contains(event.relatedTarget);
        if (isDataGridBlurred) {
          setActionable(false);
          if (lastFocusedElement.current != null) {
            const closestCell = getClosestCellFrom(lastFocusedElement.current, dataGridId);
            if (closestCell) {
              delayedSetFocusable(closestCell);
            }
          }
        }
      },
      [dataGridId]
    );
    const handleKeypress = React2.useCallback(
      (event) => {
        switch (event.key) {
          case "Enter": {
            setActionable(true);
            const activeElement = getActiveElement();
            if (activeElement && isCell(activeElement)) {
              const firstFocusableElement = getFirstFocusableIn(activeElement);
              if (firstFocusableElement) {
                ensureFocus(firstFocusableElement);
                activeElement.tabIndex = actionable ? 0 : -1;
              }
            }
            break;
          }
          case "Escape": {
            setActionable(false);
            const closestCell = getClosestGridCellFromCurrentFocus(dataGridId);
            if (closestCell) {
              ensureFocus(closestCell);
              delayedSetFocusable(closestCell);
            }
            break;
          }
          default:
            break;
        }
      },
      [actionable, dataGridId]
    );
    const dataGridState = {
      ...compositeState,
      actionable,
      striped
    };
    return /* @__PURE__ */ React2.createElement(DataGridContext.Provider, { value: dataGridState }, /* @__PURE__ */ React2.createElement(
      import_reakit_library.Composite,
      {
        ...props,
        ...compositeState,
        id: dataGridId,
        ref,
        as: import_table.Table,
        element,
        role,
        onKeyDown: handleKeypress,
        onMouseDown: handleMouseDown,
        onFocus: handleFocus,
        onBlur: handleBlur,
        isActionable: actionable,
        "data-actionable": actionable
      }
    ));
  }
);
DataGrid.displayName = "DataGrid";

// src/DataGridHead.tsx
var import_table2 = require("@twilio-paste/table");
var React3 = __toESM(require("react"));
var DataGridHead = React3.forwardRef(
  ({ element = "DATA_GRID_HEAD", ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(import_table2.THead, { ...props, element, ref });
  }
);
DataGridHead.displayName = "DataGridHead";

// src/DataGridRow.tsx
var import_reakit_library2 = require("@twilio-paste/reakit-library");
var React5 = __toESM(require("react"));

// src/table/Tr.tsx
var import_box = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React4 = __toESM(require("react"));
var StyledTr = import_styling_library.styled.tr(
  (0, import_styling_library.css)({
    "&[aria-selected=true] > td": {
      borderColor: "colorBorderPrimaryWeaker"
    },
    "&[aria-selected=true] > th": {
      borderColor: "colorBorderPrimaryWeaker"
    }
  })
);
var Tr = React4.forwardRef(
  ({ element = "DATA_GRID_TR", striped, ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        ref,
        element,
        as: StyledTr,
        "aria-selected": props.selected,
        _even: { backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent" },
        _selected: {
          backgroundColor: "colorBackgroundPrimaryWeakest"
        }
      }
    );
  }
);
Tr.displayName = "Tr";

// src/DataGridRow.tsx
var DataGridRow = React5.forwardRef(
  ({ element = "DATA_GRID_ROW", ...props }, ref) => {
    const dataGridState = React5.useContext(DataGridContext);
    return /* @__PURE__ */ React5.createElement(import_reakit_library2.CompositeGroup, { as: Tr, ...props, element, ...dataGridState, ref, role: "row" });
  }
);
DataGridRow.displayName = "DataGridRow";

// src/DataGridHeader.tsx
var React9 = __toESM(require("react"));

// src/DataGridCell.tsx
var import_reakit_library3 = require("@twilio-paste/reakit-library");
var import_utils2 = require("@twilio-paste/utils");
var import_isElement = __toESM(require_isElement());
var React8 = __toESM(require("react"));

// src/table/Td.tsx
var import_box2 = require("@twilio-paste/box");
var React6 = __toESM(require("react"));
var Td = React6.forwardRef(
  ({ textAlign = "left", whiteSpace, element = "DATA_GRID_TD", ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        ref,
        as: "td",
        element,
        borderStyle: "solid",
        borderColor: "colorBorderWeaker",
        borderWidth: "borderWidth0",
        borderBottomWidth: "borderWidth10",
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        padding: "space50",
        position: "relative",
        textAlign,
        whiteSpace,
        verticalAlign: "inherit",
        wordWrap: "break-word",
        color: "inherit",
        _first: {
          paddingLeft: "space50"
        },
        _last: {
          paddingRight: "space50"
        },
        _focus: {
          outline: "none",
          boxShadow: "shadowFocusInset"
        }
      }
    );
  }
);
Td.displayName = "Td";

// src/table/Th.tsx
var import_box3 = require("@twilio-paste/box");
var React7 = __toESM(require("react"));
var Th = React7.forwardRef(
  ({ width, textAlign = "left", whiteSpace, element = "DATA_GRID_TH", ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        ref,
        element,
        as: "th",
        borderBottomStyle: "solid",
        borderBottomColor: "colorBorderWeaker",
        borderBottomWidth: "borderWidth10",
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        fontWeight: "fontWeightSemibold",
        paddingY: "space40",
        paddingX: "space50",
        width,
        position: "relative",
        textAlign,
        whiteSpace,
        verticalAlign: "inherit",
        color: "inherit",
        _first: {
          paddingLeft: "space50"
        },
        _last: {
          paddingRight: "space50"
        },
        _focus: {
          outline: "none",
          boxShadow: "shadowFocusInset"
        }
      }
    );
  }
);
Th.displayName = "Th";

// src/DataGridCell.tsx
var DataGridCell = ({
  element = "DATA_GRID_CELL",
  as = "td",
  ...props
}) => {
  const dataGridState = React8.useContext(DataGridContext);
  const cellRef = React8.useRef();
  const handleMouseDown = React8.useCallback(() => {
    ensureFocus(cellRef.current);
  }, []);
  const onListMutation = React8.useCallback(
    (mutationList) => {
      if (mutationList.length === 0) {
        return;
      }
      mutationList.forEach((mutation) => {
        if (!(0, import_isElement.default)(mutation.target)) {
          return;
        }
        const target = mutation.target;
        if (mutation.attributeName === "tabindex" && dataGridState.actionable && target.tabIndex === 0 && isCell(target)) {
          target.tabIndex = -1;
        }
      });
    },
    [dataGridState.actionable]
  );
  (0, import_utils2.useMutationObservable)(cellRef.current, onListMutation);
  React8.useEffect(() => {
    setTimeout(() => {
      if (cellRef.current) {
        updateTabIndexForActionable(cellRef.current, dataGridState.actionable);
      }
    }, 10);
  }, [dataGridState.actionable]);
  return /* @__PURE__ */ React8.createElement(
    import_reakit_library3.CompositeItem,
    {
      ...props,
      ...dataGridState,
      element,
      ref: cellRef,
      as: as === "td" ? Td : Th,
      onClick: handleMouseDown
    }
  );
};
DataGridCell.displayName = "DataGridCell";

// src/DataGridHeader.tsx
var DataGridHeader = ({
  element = "DATA_GRID_HEADER",
  ...props
}) => {
  return /* @__PURE__ */ React9.createElement(DataGridCell, { element, ...props, as: "th" });
};
DataGridHeader.displayName = "DataGridHeader";

// src/DataGridHeaderSort.tsx
var import_button = require("@twilio-paste/button");
var import_ArrowDownIcon = require("@twilio-paste/icons/cjs/ArrowDownIcon");
var import_ArrowUpIcon = require("@twilio-paste/icons/cjs/ArrowUpIcon");
var import_UnsortedIcon = require("@twilio-paste/icons/cjs/UnsortedIcon");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React10 = __toESM(require("react"));
var DataGridHeaderSortIcon = ({
  direction,
  element
}) => {
  switch (direction) {
    case "ascending":
      return /* @__PURE__ */ React10.createElement(import_ArrowUpIcon.ArrowUpIcon, { decorative: true, element });
    case "descending":
      return /* @__PURE__ */ React10.createElement(import_ArrowDownIcon.ArrowDownIcon, { decorative: true, element });
    case "none":
      return /* @__PURE__ */ React10.createElement(import_UnsortedIcon.UnsortedIcon, { decorative: true, element });
    default:
      return null;
  }
};
DataGridHeaderSortIcon.displayName = "DataGridHeaderSortIcon";
var DataGridHeaderSort = ({
  direction,
  onClick,
  element = "DATA_GRID_HEADER_SORT",
  i18nAscendingLabel = "Sort ascending",
  i18nDescendingLabel = "Sort descending",
  i18nUnsortedLabel = "Unsorted",
  ...props
}) => {
  const i18nLabelDirectionMap = {
    ascending: i18nAscendingLabel,
    descending: i18nDescendingLabel,
    none: i18nUnsortedLabel
  };
  return /* @__PURE__ */ React10.createElement(import_button.Button, { element, variant: "reset", size: "reset", onClick, ...props }, /* @__PURE__ */ React10.createElement(DataGridHeaderSortIcon, { element: `${element}_ICON`, direction }), /* @__PURE__ */ React10.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nLabelDirectionMap[direction]));
};
DataGridHeaderSort.displayName = "DataGridHeaderSort";

// src/DataGridBody.tsx
var import_table3 = require("@twilio-paste/table");
var React11 = __toESM(require("react"));
var DataGridBody = React11.forwardRef(
  ({ element = "DATA_GRID_BODY", ...props }, ref) => {
    return /* @__PURE__ */ React11.createElement(import_table3.TBody, { ...props, element, ref });
  }
);
DataGridBody.displayName = "DataGridBody";

// src/DataGridFoot.tsx
var import_table4 = require("@twilio-paste/table");
var React12 = __toESM(require("react"));
var DataGridFoot = React12.forwardRef(
  ({ element = "DATA_GRID_FOOT", ...props }, ref) => {
    return /* @__PURE__ */ React12.createElement(import_table4.TFoot, { ...props, element, ref });
  }
);
DataGridFoot.displayName = "DataGridFoot";
