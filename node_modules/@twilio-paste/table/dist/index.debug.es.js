// src/Table.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import * as React2 from "react";

// src/TableContext.tsx
import * as React from "react";
var TableContext = React.createContext({ striped: false });

// src/Table.tsx
var Table = React2.forwardRef(
  ({
    element = "TABLE",
    id,
    isActionable,
    scrollHorizontally,
    noWrap,
    striped = false,
    tableLayout = "auto",
    variant = "default",
    ...props
  }, ref) => {
    const tableContext = {
      striped
    };
    return /* @__PURE__ */ React2.createElement(TableContext.Provider, { value: tableContext }, /* @__PURE__ */ React2.createElement(
      Box,
      {
        id,
        element: `${element}_WRAPPER`,
        overflowX: scrollHorizontally ? "auto" : null,
        whiteSpace: noWrap ? "nowrap" : null,
        boxShadow: isActionable ? "shadowFocus" : null
      },
      /* @__PURE__ */ React2.createElement(
        Box,
        {
          ...safelySpreadBoxProps(props),
          ref,
          as: "table",
          borderCollapse: "separate",
          borderColor: "colorBorderWeaker",
          borderSpacing: "0",
          borderStyle: "solid",
          borderWidth: variant === "borderless" ? "borderWidth0" : "borderWidth10",
          element,
          tableLayout: tableLayout === "fixed" ? "fixed" : "auto",
          width: "100%"
        }
      )
    ));
  }
);
Table.displayName = "Table";

// src/THead.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { css, styled } from "@twilio-paste/styling-library";
import * as React3 from "react";
var getStickyStyles = ({ stickyHeader }) => {
  if (!stickyHeader)
    return {};
  return {
    position: "sticky",
    zIndex: "zIndex10"
  };
};
var StyledTHead = styled.thead(
  css({
    backgroundColor: "colorBackgroundWeak",
    color: "colorTextWeak",
    top: (props) => props.top
  })
);
var THead = React3.forwardRef(
  ({ element = "THEAD", stickyHeader = false, top = stickyHeader ? "-1px" : null, ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        ref,
        as: StyledTHead,
        element,
        top,
        ...getStickyStyles({ stickyHeader })
      }
    );
  }
);
THead.displayName = "THead";

// src/TBody.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { css as css2, styled as styled2 } from "@twilio-paste/styling-library";
import * as React4 from "react";
var bodyCellStyles = {
  borderBottomWidth: "borderWidth0"
};
var StyledTBody = styled2.tbody(
  css2({
    backgroundColor: "colorBackgroundBody",
    "& > tr:last-of-type > td": bodyCellStyles,
    "& > tr:last-of-type > th": bodyCellStyles
  })
);
var TBody = React4.forwardRef(
  ({ element = "TBODY", children, ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(Box3, { as: StyledTBody, ...safelySpreadBoxProps3(props), ref, element, color: "colorText" }, children);
  }
);
TBody.displayName = "TBody";

// src/TFoot.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { css as css3, styled as styled3 } from "@twilio-paste/styling-library";
import * as React5 from "react";
var footerCellStyles = {
  borderBottomWidth: "borderWidth0",
  borderTopWidth: "borderWidth10",
  fontWeight: "fontWeightSemibold",
  paddingY: "space40"
};
var StyledTFoot = styled3.tfoot(
  css3({
    "& > tr > td": footerCellStyles,
    "& > tr > th": footerCellStyles
  })
);
var TFoot = React5.forwardRef(({ element = "TFOOT", ...props }, ref) => {
  return /* @__PURE__ */ React5.createElement(
    Box4,
    {
      ...safelySpreadBoxProps4(props),
      ref,
      as: StyledTFoot,
      backgroundColor: "colorBackgroundWeak",
      color: "colorTextWeak",
      element
    }
  );
});
TFoot.displayName = "TFoot";

// src/Tr.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React6 from "react";
var Tr = React6.forwardRef(
  ({ element = "TR", verticalAlign = "middle", ...props }, ref) => {
    const { striped } = React6.useContext(TableContext);
    return /* @__PURE__ */ React6.createElement(
      Box5,
      {
        ...safelySpreadBoxProps5(props),
        ref,
        as: "tr",
        element,
        verticalAlign,
        _even: { backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent" },
        _last: { borderWidth: "borderWidth0" }
      }
    );
  }
);
Tr.displayName = "Tr";

// src/Td.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
import * as React7 from "react";
var Td = React7.forwardRef(
  ({ element = "TD", textAlign = "left", whiteSpace, ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      Box6,
      {
        ...safelySpreadBoxProps6(props),
        ref,
        as: "td",
        borderStyle: "solid",
        borderColor: "colorBorderWeaker",
        borderWidth: "borderWidth0",
        borderBottomWidth: "borderWidth10",
        element,
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        padding: "space50",
        position: "relative",
        textAlign,
        whiteSpace,
        verticalAlign: "inherit",
        wordWrap: "break-word",
        color: "inherit"
      }
    );
  }
);
Td.displayName = "Td";

// src/Th.tsx
import { Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
import * as React8 from "react";
var Th = React8.forwardRef(
  ({ element = "TH", textAlign = "left", whiteSpace, width, ...props }, ref) => {
    return /* @__PURE__ */ React8.createElement(
      Box7,
      {
        ...safelySpreadBoxProps7(props),
        ref,
        as: "th",
        borderBottomStyle: "solid",
        borderBottomColor: "colorBorderWeaker",
        borderBottomWidth: "borderWidth10",
        element,
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        fontWeight: "fontWeightSemibold",
        paddingBottom: "space40",
        paddingLeft: "space50",
        paddingRight: "space50",
        paddingTop: "space40",
        position: "relative",
        textAlign,
        whiteSpace,
        verticalAlign: "inherit",
        width,
        wordWrap: "break-word",
        color: "inherit"
      }
    );
  }
);
Th.displayName = "Th";
export {
  TBody,
  TFoot,
  THead,
  Table,
  Td,
  Th,
  Tr
};
