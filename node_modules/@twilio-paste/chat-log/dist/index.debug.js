"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ChatAttachment: () => ChatAttachment,
  ChatAttachmentDescription: () => ChatAttachmentDescription,
  ChatAttachmentLink: () => ChatAttachmentLink,
  ChatBookend: () => ChatBookend,
  ChatBookendItem: () => ChatBookendItem,
  ChatBubble: () => ChatBubble,
  ChatEvent: () => ChatEvent,
  ChatLog: () => ChatLog,
  ChatLogger: () => ChatLogger,
  ChatMessage: () => ChatMessage,
  ChatMessageMeta: () => ChatMessageMeta,
  ChatMessageMetaItem: () => ChatMessageMetaItem,
  ComposerAttachmentCard: () => ComposerAttachmentCard,
  useChatLogger: () => useChatLogger
});
module.exports = __toCommonJS(src_exports);

// src/ChatBubble.tsx
var import_box = require("@twilio-paste/box");
var React2 = __toESM(require("react"));

// src/MessageVariantContext.tsx
var React = __toESM(require("react"));
var MessageVariantContext = React.createContext("inbound");

// src/ChatBubble.tsx
var bubbleVariantStyles = {
  inbound: {
    backgroundColor: "colorBackground",
    alignSelf: "flex-start"
  },
  outbound: {
    backgroundColor: "colorBackgroundInverseStronger",
    alignSelf: "flex-end",
    color: "colorTextInverse"
  }
};
var ChatBubble = React2.forwardRef(
  ({ children, element = "CHAT_BUBBLE", ...props }, ref) => {
    const variant = React2.useContext(MessageVariantContext);
    return /* @__PURE__ */ React2.createElement(
      import_box.Box,
      {
        display: "inline-block",
        fontSize: "fontSize30",
        lineHeight: "lineHeight20",
        borderRadius: "borderRadius20",
        paddingY: "space30",
        paddingX: "space40",
        marginBottom: "space30",
        wordWrap: "break-word",
        maxWidth: "100%",
        minWidth: 0,
        element,
        ref,
        variant,
        whiteSpace: "pre-wrap",
        ...bubbleVariantStyles[variant],
        ...(0, import_box.safelySpreadBoxProps)(props)
      },
      children
    );
  }
);
ChatBubble.displayName = "ChatBubble";

// src/ChatMessage.tsx
var import_box2 = require("@twilio-paste/box");
var React3 = __toESM(require("react"));
var messageVariantStyles = {
  inbound: {
    marginRight: "space70"
  },
  outbound: {
    marginLeft: "space70"
  }
};
var ChatMessage = React3.forwardRef(
  ({ children, variant, element = "CHAT_MESSAGE", ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(MessageVariantContext.Provider, { value: variant }, /* @__PURE__ */ React3.createElement(
      import_box2.Box,
      {
        role: "listitem",
        display: "flex",
        flexDirection: "column",
        ref,
        element,
        variant,
        ...messageVariantStyles[variant],
        ...(0, import_box2.safelySpreadBoxProps)(props)
      },
      children
    ));
  }
);
ChatMessage.displayName = "ChatMessage";

// src/ChatMessageMeta.tsx
var import_box3 = require("@twilio-paste/box");
var React4 = __toESM(require("react"));
var ChatMessageMeta = React4.forwardRef(
  ({ children, element = "CHAT_MESSAGE_META", ...props }, ref) => {
    const variant = React4.useContext(MessageVariantContext);
    return /* @__PURE__ */ React4.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        ref,
        element,
        display: "flex",
        justifyContent: variant === "inbound" ? "flex-start" : "flex-end",
        textAlign: variant === "outbound" ? "right" : "left",
        alignItems: "center",
        variant,
        columnGap: "space30",
        fontWeight: "fontWeightMedium"
      },
      children
    );
  }
);
ChatMessageMeta.displayName = "ChatMessageMeta";

// src/ChatMessageMetaItem.tsx
var import_box4 = require("@twilio-paste/box");
var React5 = __toESM(require("react"));
var ChatMessageMetaItem = React5.forwardRef(
  ({ children, element = "CHAT_MESSAGE_META_ITEM", ...props }, ref) => /* @__PURE__ */ React5.createElement(
    import_box4.Box,
    {
      ref,
      element,
      display: "flex",
      alignItems: "flex-start",
      columnGap: "space30",
      color: "colorTextWeak",
      lineHeight: "lineHeight20",
      fontSize: "fontSize20",
      ...(0, import_box4.safelySpreadBoxProps)(props)
    },
    children
  )
);
ChatMessageMetaItem.displayName = "ChatMessageMetaItem";

// src/ChatLog.tsx
var import_box5 = require("@twilio-paste/box");
var React6 = __toESM(require("react"));
var ChatLog = React6.forwardRef(({ children, element = "CHAT_LOG", ...props }, ref) => {
  return /* @__PURE__ */ React6.createElement(import_box5.Box, { role: "log", padding: "space70", element, ref, ...(0, import_box5.safelySpreadBoxProps)(props) }, /* @__PURE__ */ React6.createElement(import_box5.Box, { as: "div", role: "list", margin: "space0", padding: "space0", display: "flex", flexDirection: "column", rowGap: "space80" }, children));
});
ChatLog.displayName = "ChatLog";

// src/ComposerAttachmentCard.tsx
var import_box6 = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_ClearIcon = require("@twilio-paste/icons/cjs/ClearIcon");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React7 = __toESM(require("react"));
var closeButtonBackgroundStyles = {
  backgroundColor: "colorBackgroundBody",
  borderRadius: "borderRadiusCircle",
  width: "12px",
  height: "12px",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
};
var ComposerAttachmentCard = React7.forwardRef(
  ({ children, onDismiss, i18nDismissLabel = "Remove attachment", element = "COMPOSER_ATTACHMENT_CARD", ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      import_box6.Box,
      {
        ...(0, import_box6.safelySpreadBoxProps)(props),
        ref,
        paddingY: "space30",
        paddingX: "space40",
        borderStyle: "solid",
        borderColor: "colorBorderWeaker",
        borderRadius: "borderRadius30",
        borderWidth: "borderWidth10",
        boxShadow: "shadowLow",
        position: "relative",
        display: "inline-block",
        width: "100%",
        element
      },
      children,
      onDismiss && /* @__PURE__ */ React7.createElement(
        import_box6.Box,
        {
          position: "absolute",
          top: "space0",
          right: "space0",
          transform: "translate(50%, -50%)",
          ...closeButtonBackgroundStyles
        },
        /* @__PURE__ */ React7.createElement(import_button.Button, { element: `${element}_REMOVE_BUTTON`, variant: "secondary_icon", size: "icon", onClick: onDismiss }, /* @__PURE__ */ React7.createElement(import_ClearIcon.ClearIcon, { decorative: true }), /* @__PURE__ */ React7.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nDismissLabel))
      )
    );
  }
);
ComposerAttachmentCard.displayName = "ComposerAttachmentCard";

// src/ChatAttachment.tsx
var import_box7 = require("@twilio-paste/box");
var import_media_object = require("@twilio-paste/media-object");
var import_stack = require("@twilio-paste/stack");
var React8 = __toESM(require("react"));
var ChatAttachment = React8.forwardRef(
  ({ children, element = "CHAT_ATTACHMENT", attachmentIcon, ...props }, ref) => {
    const variant = React8.useContext(MessageVariantContext);
    return /* @__PURE__ */ React8.createElement(import_media_object.MediaObject, { ...props, as: "div", ref, verticalAlign: "center", element }, /* @__PURE__ */ React8.createElement(import_media_object.MediaFigure, { as: "div", spacing: "space30" }, /* @__PURE__ */ React8.createElement(import_box7.Box, { color: variant === "inbound" ? "colorTextIcon" : "colorTextInverse", element: `${element}_ICON` }, attachmentIcon)), /* @__PURE__ */ React8.createElement(import_media_object.MediaBody, { as: "div", element: `${element}_BODY` }, /* @__PURE__ */ React8.createElement(import_stack.Stack, { orientation: "vertical", spacing: "space10" }, children)));
  }
);
ChatAttachment.displayName = "ChatAttachment";

// src/ChatAttachmentLink.tsx
var import_anchor = require("@twilio-paste/anchor");
var import_truncate = require("@twilio-paste/truncate");
var React9 = __toESM(require("react"));
var ChatAttachmentLink = React9.forwardRef(
  ({ children, href, element = "CHAT_ATTACHMENT_LINK", ...props }, ref) => {
    const variant = React9.useContext(MessageVariantContext);
    return /* @__PURE__ */ React9.createElement(
      import_anchor.Anchor,
      {
        href,
        ref,
        element,
        variant: variant === "inbound" ? "default" : "inverse",
        ...props
      },
      /* @__PURE__ */ React9.createElement(import_truncate.Truncate, { title: children }, children)
    );
  }
);
ChatAttachmentLink.displayName = "ChatAttachmentLink";

// src/ChatAttachmentDescription.tsx
var import_text = require("@twilio-paste/text");
var React10 = __toESM(require("react"));
var ChatAttachmentDescription = React10.forwardRef(
  ({ children, element = "CHAT_ATTACHMENT_DESCRIPTION", ...props }, ref) => {
    const variant = React10.useContext(MessageVariantContext);
    return /* @__PURE__ */ React10.createElement(
      import_text.Text,
      {
        ...(0, import_text.safelySpreadTextProps)(props),
        element,
        ref,
        as: "div",
        fontSize: "fontSize20",
        color: variant === "inbound" ? "colorTextWeak" : "colorTextInverse",
        lineHeight: "lineHeight20"
      },
      children
    );
  }
);
ChatAttachmentDescription.displayName = "ChatAttachmentDescription";

// src/ChatBookend.tsx
var import_box8 = require("@twilio-paste/box");
var React11 = __toESM(require("react"));
var ChatBookend = React11.forwardRef(
  ({ children, element = "CHAT_BOOKEND", ...props }, ref) => {
    return /* @__PURE__ */ React11.createElement(
      import_box8.Box,
      {
        ...(0, import_box8.safelySpreadBoxProps)(props),
        as: "div",
        role: "listitem",
        color: "colorTextWeak",
        element,
        textAlign: "center",
        marginBottom: "space20",
        lineHeight: "lineHeight20",
        fontSize: "fontSize20",
        fontWeight: "fontWeightMedium",
        ref
      },
      children
    );
  }
);
ChatBookend.displayName = "ChatBookend";

// src/ChatBookendItem.tsx
var import_box9 = require("@twilio-paste/box");
var React12 = __toESM(require("react"));
var ChatBookendItem = React12.forwardRef(
  ({ children, element = "CHAT_BOOKEND_ITEM", ...props }, ref) => {
    return /* @__PURE__ */ React12.createElement(import_box9.Box, { ...(0, import_box9.safelySpreadBoxProps)(props), as: "div", element, ref }, children);
  }
);
ChatBookendItem.displayName = "ChatBookendItem";

// src/ChatEvent.tsx
var import_box10 = require("@twilio-paste/box");
var React13 = __toESM(require("react"));
var ChatEvent = React13.forwardRef(
  ({ children, element = "CHAT_EVENT", ...props }, ref) => {
    return /* @__PURE__ */ React13.createElement(
      import_box10.Box,
      {
        ...(0, import_box10.safelySpreadBoxProps)(props),
        as: "div",
        role: "listitem",
        color: "colorTextWeak",
        element,
        textAlign: "center",
        lineHeight: "lineHeight20",
        fontSize: "fontSize20",
        fontWeight: "fontWeightMedium",
        ref
      },
      children
    );
  }
);
ChatEvent.displayName = "ChatEvent";

// src/ChatLogger.tsx
var import_animation_library = require("@twilio-paste/animation-library");
var import_box11 = require("@twilio-paste/box");
var React14 = __toESM(require("react"));
var AnimatedChat = (0, import_animation_library.animated)(import_box11.Box);
var buildTransitionX = (chat) => {
  if (chat.variant === "inbound")
    return -100;
  if (chat.variant === "outbound")
    return 100;
  return 0;
};
var ChatLogger = React14.forwardRef(({ chats, ...props }, ref) => {
  const transitions = (0, import_animation_library.useTransition)(chats, {
    keys: (chat) => chat.id,
    from: (chat) => ({ opacity: 0, x: buildTransitionX(chat) }),
    enter: { opacity: 1, x: 0 },
    leave: (chat) => ({ opacity: 0, x: buildTransitionX(chat) }),
    config: {
      mass: 0.7,
      tension: 190,
      friction: 16
    }
  });
  const animatedChats = (0, import_animation_library.useReducedMotion)() ? chats.map((chat) => React14.cloneElement(chat.content, { key: chat.id })) : transitions((styles, chat, { key }) => /* @__PURE__ */ React14.createElement(AnimatedChat, { as: "div", style: styles, key }, chat.content));
  return /* @__PURE__ */ React14.createElement(ChatLog, { ...props, ref }, animatedChats);
});
ChatLogger.displayName = "ChatLogger";

// src/useChatLogger.ts
var import_uid_library = require("@twilio-paste/uid-library");
var React15 = __toESM(require("react"));
var chatWithId = (chat) => ({ ...chat, id: chat.id || (0, import_uid_library.uid)(chat.content) });
var useChatLogger = (...initialChats) => {
  const parsedInitialChats = React15.useMemo(() => initialChats.map(chatWithId), [initialChats]);
  const [chats, setChats] = React15.useState(parsedInitialChats);
  const push = React15.useCallback((next) => {
    setChats((prev) => prev.concat(chatWithId(next)));
  }, []);
  const pop = React15.useCallback((id) => {
    setChats((prev) => id ? prev.filter((chat) => chat.id !== id) : prev.slice(0, -1));
  }, []);
  const clear = React15.useCallback(() => setChats([]), []);
  return { push, pop, chats, clear };
};
