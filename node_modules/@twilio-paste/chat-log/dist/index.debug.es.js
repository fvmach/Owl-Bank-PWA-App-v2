// src/ChatBubble.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import * as React2 from "react";

// src/MessageVariantContext.tsx
import * as React from "react";
var MessageVariantContext = React.createContext("inbound");

// src/ChatBubble.tsx
var bubbleVariantStyles = {
  inbound: {
    backgroundColor: "colorBackground",
    alignSelf: "flex-start"
  },
  outbound: {
    backgroundColor: "colorBackgroundInverseStronger",
    alignSelf: "flex-end",
    color: "colorTextInverse"
  }
};
var ChatBubble = React2.forwardRef(
  ({ children, element = "CHAT_BUBBLE", ...props }, ref) => {
    const variant = React2.useContext(MessageVariantContext);
    return /* @__PURE__ */ React2.createElement(
      Box,
      {
        display: "inline-block",
        fontSize: "fontSize30",
        lineHeight: "lineHeight20",
        borderRadius: "borderRadius20",
        paddingY: "space30",
        paddingX: "space40",
        marginBottom: "space30",
        wordWrap: "break-word",
        maxWidth: "100%",
        minWidth: 0,
        element,
        ref,
        variant,
        whiteSpace: "pre-wrap",
        ...bubbleVariantStyles[variant],
        ...safelySpreadBoxProps(props)
      },
      children
    );
  }
);
ChatBubble.displayName = "ChatBubble";

// src/ChatMessage.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React3 from "react";
var messageVariantStyles = {
  inbound: {
    marginRight: "space70"
  },
  outbound: {
    marginLeft: "space70"
  }
};
var ChatMessage = React3.forwardRef(
  ({ children, variant, element = "CHAT_MESSAGE", ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(MessageVariantContext.Provider, { value: variant }, /* @__PURE__ */ React3.createElement(
      Box2,
      {
        role: "listitem",
        display: "flex",
        flexDirection: "column",
        ref,
        element,
        variant,
        ...messageVariantStyles[variant],
        ...safelySpreadBoxProps2(props)
      },
      children
    ));
  }
);
ChatMessage.displayName = "ChatMessage";

// src/ChatMessageMeta.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React4 from "react";
var ChatMessageMeta = React4.forwardRef(
  ({ children, element = "CHAT_MESSAGE_META", ...props }, ref) => {
    const variant = React4.useContext(MessageVariantContext);
    return /* @__PURE__ */ React4.createElement(
      Box3,
      {
        ...safelySpreadBoxProps3(props),
        ref,
        element,
        display: "flex",
        justifyContent: variant === "inbound" ? "flex-start" : "flex-end",
        textAlign: variant === "outbound" ? "right" : "left",
        alignItems: "center",
        variant,
        columnGap: "space30",
        fontWeight: "fontWeightMedium"
      },
      children
    );
  }
);
ChatMessageMeta.displayName = "ChatMessageMeta";

// src/ChatMessageMetaItem.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import * as React5 from "react";
var ChatMessageMetaItem = React5.forwardRef(
  ({ children, element = "CHAT_MESSAGE_META_ITEM", ...props }, ref) => /* @__PURE__ */ React5.createElement(
    Box4,
    {
      ref,
      element,
      display: "flex",
      alignItems: "flex-start",
      columnGap: "space30",
      color: "colorTextWeak",
      lineHeight: "lineHeight20",
      fontSize: "fontSize20",
      ...safelySpreadBoxProps4(props)
    },
    children
  )
);
ChatMessageMetaItem.displayName = "ChatMessageMetaItem";

// src/ChatLog.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React6 from "react";
var ChatLog = React6.forwardRef(({ children, element = "CHAT_LOG", ...props }, ref) => {
  return /* @__PURE__ */ React6.createElement(Box5, { role: "log", padding: "space70", element, ref, ...safelySpreadBoxProps5(props) }, /* @__PURE__ */ React6.createElement(Box5, { as: "div", role: "list", margin: "space0", padding: "space0", display: "flex", flexDirection: "column", rowGap: "space80" }, children));
});
ChatLog.displayName = "ChatLog";

// src/ComposerAttachmentCard.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { ClearIcon } from "@twilio-paste/icons/esm/ClearIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React7 from "react";
var closeButtonBackgroundStyles = {
  backgroundColor: "colorBackgroundBody",
  borderRadius: "borderRadiusCircle",
  width: "12px",
  height: "12px",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
};
var ComposerAttachmentCard = React7.forwardRef(
  ({ children, onDismiss, i18nDismissLabel = "Remove attachment", element = "COMPOSER_ATTACHMENT_CARD", ...props }, ref) => {
    return /* @__PURE__ */ React7.createElement(
      Box6,
      {
        ...safelySpreadBoxProps6(props),
        ref,
        paddingY: "space30",
        paddingX: "space40",
        borderStyle: "solid",
        borderColor: "colorBorderWeaker",
        borderRadius: "borderRadius30",
        borderWidth: "borderWidth10",
        boxShadow: "shadowLow",
        position: "relative",
        display: "inline-block",
        width: "100%",
        element
      },
      children,
      onDismiss && /* @__PURE__ */ React7.createElement(
        Box6,
        {
          position: "absolute",
          top: "space0",
          right: "space0",
          transform: "translate(50%, -50%)",
          ...closeButtonBackgroundStyles
        },
        /* @__PURE__ */ React7.createElement(Button, { element: `${element}_REMOVE_BUTTON`, variant: "secondary_icon", size: "icon", onClick: onDismiss }, /* @__PURE__ */ React7.createElement(ClearIcon, { decorative: true }), /* @__PURE__ */ React7.createElement(ScreenReaderOnly, null, i18nDismissLabel))
      )
    );
  }
);
ComposerAttachmentCard.displayName = "ComposerAttachmentCard";

// src/ChatAttachment.tsx
import { Box as Box7 } from "@twilio-paste/box";
import { MediaBody, MediaFigure, MediaObject } from "@twilio-paste/media-object";
import { Stack } from "@twilio-paste/stack";
import * as React8 from "react";
var ChatAttachment = React8.forwardRef(
  ({ children, element = "CHAT_ATTACHMENT", attachmentIcon, ...props }, ref) => {
    const variant = React8.useContext(MessageVariantContext);
    return /* @__PURE__ */ React8.createElement(MediaObject, { ...props, as: "div", ref, verticalAlign: "center", element }, /* @__PURE__ */ React8.createElement(MediaFigure, { as: "div", spacing: "space30" }, /* @__PURE__ */ React8.createElement(Box7, { color: variant === "inbound" ? "colorTextIcon" : "colorTextInverse", element: `${element}_ICON` }, attachmentIcon)), /* @__PURE__ */ React8.createElement(MediaBody, { as: "div", element: `${element}_BODY` }, /* @__PURE__ */ React8.createElement(Stack, { orientation: "vertical", spacing: "space10" }, children)));
  }
);
ChatAttachment.displayName = "ChatAttachment";

// src/ChatAttachmentLink.tsx
import { Anchor } from "@twilio-paste/anchor";
import { Truncate } from "@twilio-paste/truncate";
import * as React9 from "react";
var ChatAttachmentLink = React9.forwardRef(
  ({ children, href, element = "CHAT_ATTACHMENT_LINK", ...props }, ref) => {
    const variant = React9.useContext(MessageVariantContext);
    return /* @__PURE__ */ React9.createElement(
      Anchor,
      {
        href,
        ref,
        element,
        variant: variant === "inbound" ? "default" : "inverse",
        ...props
      },
      /* @__PURE__ */ React9.createElement(Truncate, { title: children }, children)
    );
  }
);
ChatAttachmentLink.displayName = "ChatAttachmentLink";

// src/ChatAttachmentDescription.tsx
import { Text, safelySpreadTextProps } from "@twilio-paste/text";
import * as React10 from "react";
var ChatAttachmentDescription = React10.forwardRef(
  ({ children, element = "CHAT_ATTACHMENT_DESCRIPTION", ...props }, ref) => {
    const variant = React10.useContext(MessageVariantContext);
    return /* @__PURE__ */ React10.createElement(
      Text,
      {
        ...safelySpreadTextProps(props),
        element,
        ref,
        as: "div",
        fontSize: "fontSize20",
        color: variant === "inbound" ? "colorTextWeak" : "colorTextInverse",
        lineHeight: "lineHeight20"
      },
      children
    );
  }
);
ChatAttachmentDescription.displayName = "ChatAttachmentDescription";

// src/ChatBookend.tsx
import { Box as Box8, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
import * as React11 from "react";
var ChatBookend = React11.forwardRef(
  ({ children, element = "CHAT_BOOKEND", ...props }, ref) => {
    return /* @__PURE__ */ React11.createElement(
      Box8,
      {
        ...safelySpreadBoxProps7(props),
        as: "div",
        role: "listitem",
        color: "colorTextWeak",
        element,
        textAlign: "center",
        marginBottom: "space20",
        lineHeight: "lineHeight20",
        fontSize: "fontSize20",
        fontWeight: "fontWeightMedium",
        ref
      },
      children
    );
  }
);
ChatBookend.displayName = "ChatBookend";

// src/ChatBookendItem.tsx
import { Box as Box9, safelySpreadBoxProps as safelySpreadBoxProps8 } from "@twilio-paste/box";
import * as React12 from "react";
var ChatBookendItem = React12.forwardRef(
  ({ children, element = "CHAT_BOOKEND_ITEM", ...props }, ref) => {
    return /* @__PURE__ */ React12.createElement(Box9, { ...safelySpreadBoxProps8(props), as: "div", element, ref }, children);
  }
);
ChatBookendItem.displayName = "ChatBookendItem";

// src/ChatEvent.tsx
import { Box as Box10, safelySpreadBoxProps as safelySpreadBoxProps9 } from "@twilio-paste/box";
import * as React13 from "react";
var ChatEvent = React13.forwardRef(
  ({ children, element = "CHAT_EVENT", ...props }, ref) => {
    return /* @__PURE__ */ React13.createElement(
      Box10,
      {
        ...safelySpreadBoxProps9(props),
        as: "div",
        role: "listitem",
        color: "colorTextWeak",
        element,
        textAlign: "center",
        lineHeight: "lineHeight20",
        fontSize: "fontSize20",
        fontWeight: "fontWeightMedium",
        ref
      },
      children
    );
  }
);
ChatEvent.displayName = "ChatEvent";

// src/ChatLogger.tsx
import { animated, useReducedMotion, useTransition } from "@twilio-paste/animation-library";
import { Box as Box11 } from "@twilio-paste/box";
import * as React14 from "react";
var AnimatedChat = animated(Box11);
var buildTransitionX = (chat) => {
  if (chat.variant === "inbound")
    return -100;
  if (chat.variant === "outbound")
    return 100;
  return 0;
};
var ChatLogger = React14.forwardRef(({ chats, ...props }, ref) => {
  const transitions = useTransition(chats, {
    keys: (chat) => chat.id,
    from: (chat) => ({ opacity: 0, x: buildTransitionX(chat) }),
    enter: { opacity: 1, x: 0 },
    leave: (chat) => ({ opacity: 0, x: buildTransitionX(chat) }),
    config: {
      mass: 0.7,
      tension: 190,
      friction: 16
    }
  });
  const animatedChats = useReducedMotion() ? chats.map((chat) => React14.cloneElement(chat.content, { key: chat.id })) : transitions((styles, chat, { key }) => /* @__PURE__ */ React14.createElement(AnimatedChat, { as: "div", style: styles, key }, chat.content));
  return /* @__PURE__ */ React14.createElement(ChatLog, { ...props, ref }, animatedChats);
});
ChatLogger.displayName = "ChatLogger";

// src/useChatLogger.ts
import { uid } from "@twilio-paste/uid-library";
import * as React15 from "react";
var chatWithId = (chat) => ({ ...chat, id: chat.id || uid(chat.content) });
var useChatLogger = (...initialChats) => {
  const parsedInitialChats = React15.useMemo(() => initialChats.map(chatWithId), [initialChats]);
  const [chats, setChats] = React15.useState(parsedInitialChats);
  const push = React15.useCallback((next) => {
    setChats((prev) => prev.concat(chatWithId(next)));
  }, []);
  const pop = React15.useCallback((id) => {
    setChats((prev) => id ? prev.filter((chat) => chat.id !== id) : prev.slice(0, -1));
  }, []);
  const clear = React15.useCallback(() => setChats([]), []);
  return { push, pop, chats, clear };
};
export {
  ChatAttachment,
  ChatAttachmentDescription,
  ChatAttachmentLink,
  ChatBookend,
  ChatBookendItem,
  ChatBubble,
  ChatEvent,
  ChatLog,
  ChatLogger,
  ChatMessage,
  ChatMessageMeta,
  ChatMessageMetaItem,
  ComposerAttachmentCard,
  useChatLogger
};
