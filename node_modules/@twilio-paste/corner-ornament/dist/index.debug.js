"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  CornerOrnament: () => CornerOrnament,
  CornerOrnamentBase: () => CornerOrnamentBase,
  CornerOrnamentContainer: () => CornerOrnamentContainer
});
module.exports = __toCommonJS(src_exports);

// src/CornerOrnament.tsx
var import_box = require("@twilio-paste/box");
var React2 = __toESM(require("react"));

// src/CornerOrnamentContext.tsx
var import_react = __toESM(require("react"));
var CornerOrnamentContext = import_react.default.createContext(null);
var useCornerOrnamentContext = () => {
  const context = import_react.default.useContext(CornerOrnamentContext);
  if (!context) {
    throw new Error("Corner Ornaments components must be used within CornerOrnamentContainer");
  }
  return context;
};

// src/mappings.tsx
var BadgeBottomEndPath = "M1.05-.05h-1.1v1.1h.593A.375.375 0 0 1 .875.5h.1c.026 0 .05.003.075.007V-.05Z";
var BadgeTopEndPath = "M.543-.05A.375.375 0 0 0 .875.5h.1c.026 0 .05-.003.075-.008v.558h-1.1v-1.1h.593Z";
var IconOrAvatarTopEndPath = "M1.05.437A.35.35 0 0 1 .563-.05H-.05v1.1h1.1V.437Z";
var IconOrAvatarBottomEndPath = "M1.05-.05h-1.1v1.1h.613A.35.35 0 0 1 1.05.563V-.05Z";
var iconAvatarSharedPaths = {
  bottom_end: IconOrAvatarBottomEndPath,
  top_end: IconOrAvatarTopEndPath
};
var ClipPathMappings = {
  badge: {
    bottom_end: BadgeBottomEndPath,
    top_end: BadgeTopEndPath
  },
  icon: iconAvatarSharedPaths,
  avatar: iconAvatarSharedPaths
};
var OrnamentPositionStyleMappings = {
  badge: {
    bottom_end: {
      sizeIcon50: { left: "16px", top: "16px" },
      sizeIcon60: { left: "16px", top: "16px" },
      sizeIcon70: { left: "19px", top: "19px" },
      sizeIcon80: { left: "25px", top: "25px" },
      sizeIcon90: { left: "25px", top: "25px" },
      sizeIcon100: { left: "34px", top: "34px" },
      sizeIcon110: { left: "42px", top: "42px" }
    },
    top_end: {
      sizeIcon50: { left: "16px", bottom: "16px", top: "-8px" },
      sizeIcon60: { left: "16px", bottom: "16px", top: "-8px" },
      sizeIcon70: { left: "19px", bottom: "19px", top: "-7px" },
      sizeIcon80: { left: "25px", bottom: "25px", top: "-5px" },
      sizeIcon90: { left: "25px", bottom: "25px", top: "-5px" },
      sizeIcon100: { left: "34px", bottom: "34px", top: "-6px" },
      sizeIcon110: { left: "42px", bottom: "42px", top: "-2px" }
    }
  },
  avatar: {
    bottom_end: {
      sizeIcon20: { left: "10px", top: "10px" },
      sizeIcon30: { left: "10px", top: "10px" },
      sizeIcon40: { left: "13px", top: "13px" },
      sizeIcon50: { left: "16px", top: "16px" },
      sizeIcon60: { left: "16px", top: "16px" },
      sizeIcon70: { left: "19px", top: "19px" },
      sizeIcon80: { left: "24px", top: "24px" },
      sizeIcon90: { left: "24px", top: "24px" },
      sizeIcon100: { left: "30px", top: "30px" },
      sizeIcon110: { left: "38px", top: "38px" }
    },
    top_end: {
      sizeIcon20: { left: "10px", bottom: "10px", top: "-3px" },
      sizeIcon30: { left: "10px", bottom: "10px", top: "-3px" },
      sizeIcon40: { left: "13px", bottom: "13px", top: "-5px" },
      sizeIcon50: { left: "16px", bottom: "16px", top: "-4px" },
      sizeIcon60: { left: "16px", bottom: "16px", top: "-4px" },
      sizeIcon70: { left: "19px", bottom: "19px", top: "-3px" },
      sizeIcon80: { left: "24px", bottom: "24px", top: "-4px" },
      sizeIcon90: { left: "24px", bottom: "24px", top: "-4px" },
      sizeIcon100: { left: "30px", bottom: "30px", top: "-6px" },
      sizeIcon110: { left: "38px", bottom: "38px", top: "-6px" }
    }
  },
  icon: {
    bottom_end: {
      sizeIcon20: { left: "11px", top: "11px" },
      sizeIcon30: { left: "11px", top: "11px" },
      sizeIcon40: { left: "13px", top: "13px" },
      sizeIcon50: { left: "16px", top: "16px" },
      sizeIcon60: { left: "16px", top: "16px" },
      sizeIcon70: { left: "17px", top: "17px" },
      sizeIcon80: { left: "22px", top: "22px" },
      sizeIcon90: { left: "22px", top: "22px" },
      sizeIcon100: { left: "30px", top: "30px" },
      sizeIcon110: { left: "38px", top: "38px" }
    },
    top_end: {
      sizeIcon20: { left: "11px", bottom: "11px", top: "-3px" },
      sizeIcon30: { left: "11px", bottom: "11px", top: "-3px" },
      sizeIcon40: { left: "13px", bottom: "13px", top: "-5px" },
      sizeIcon50: { left: "16px", bottom: "16px", top: "-4px" },
      sizeIcon60: { left: "16px", bottom: "16px", top: "-4px" },
      sizeIcon70: { left: "17px", bottom: "17px", top: "-5px" },
      sizeIcon80: { left: "22px", bottom: "22px", top: "-6px" },
      sizeIcon90: { left: "22px", bottom: "22px", top: "-6px" },
      sizeIcon100: { left: "30px", bottom: "30px", top: "-6px" },
      sizeIcon110: { left: "38px", bottom: "38px", top: "-6px" }
    }
  }
};

// src/CornerOrnament.tsx
var CornerOrnament = React2.forwardRef(
  ({ element = "CORNER_ORNAMENT", ...props }, ref) => {
    const { cornerOrnamentType, size, position } = useCornerOrnamentContext();
    if (!OrnamentPositionStyleMappings[cornerOrnamentType][position][size]) {
      throw new Error(
        "[Paste: CornerOrnament] the size/position/type combination you have chosen is not currently supported. Please refer to the guidelines in our docs or raise a new discussion to get this supported at https://github.com/twilio-labs/paste/discussions."
      );
    }
    return /* @__PURE__ */ React2.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        position: "absolute",
        element,
        ref,
        ...OrnamentPositionStyleMappings[cornerOrnamentType][position][size]
      },
      props.children
    );
  }
);
CornerOrnament.displayName = "CornerOrnament";

// src/CornerOrnamentContainer.tsx
var import_box2 = require("@twilio-paste/box");
var React3 = __toESM(require("react"));
var CornerOrnamentContainer = React3.forwardRef(
  ({ size, cornerOrnamentType, position = "bottom_end", element = "CORNER_ORNAMENT_CONTAINER", ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(CornerOrnamentContext.Provider, { value: { size, cornerOrnamentType, position } }, /* @__PURE__ */ React3.createElement(import_box2.Box, { ...(0, import_box2.safelySpreadBoxProps)(props), position: "relative", element, ref }, props.children));
  }
);
CornerOrnamentContainer.displayName = "CornerOrnamentContainer";

// src/CornerOrnamentBase.tsx
var import_box3 = require("@twilio-paste/box");
var import_uid_library = require("@twilio-paste/uid-library");
var React4 = __toESM(require("react"));
var CornerOrnamentBase = React4.forwardRef(
  ({ padding, element = "CORNER_ORNAMENT_BASE", ...props }, ref) => {
    const id = (0, import_uid_library.useUID)();
    const { cornerOrnamentType, position, size } = useCornerOrnamentContext();
    return /* @__PURE__ */ React4.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        style: {
          clipPath: `url("#${id}")`
        },
        element,
        ref,
        size
      },
      /* @__PURE__ */ React4.createElement(import_box3.Box, { padding: padding || "space0" }, props.children),
      /* @__PURE__ */ React4.createElement(import_box3.Box, { as: "svg", size: 0, position: "absolute", top: 0, left: 0 }, /* @__PURE__ */ React4.createElement("defs", null, /* @__PURE__ */ React4.createElement("clipPath", { id, clipPathUnits: "objectBoundingBox" }, /* @__PURE__ */ React4.createElement("path", { d: ClipPathMappings[cornerOrnamentType][position] }))))
    );
  }
);
CornerOrnamentBase.displayName = "CornerOrnamentBase";
