import type { BoxProps } from "@twilio-paste/box";
import { useDisclosurePrimitiveState } from "@twilio-paste/disclosure-primitive";
import type { DisclosurePrimitiveInitialState } from "@twilio-paste/disclosure-primitive";
import * as React from "react";
import type { DisclosureStateReturn, DisclosureVariants } from "./types";
export interface DisclosureProps extends DisclosurePrimitiveInitialState {
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'DISCLOSURE'
     * @type {BoxProps['element']}
     * @memberof DisclosureProps
     */
    element?: BoxProps["element"];
    children: NonNullable<React.ReactNode>;
    /**
     * Provide the Disclosure state returned from `useDisclosureState` if you want to control the state of the Disclosure.
     *
     * @type {DisclosureStateReturn}
     * @memberof DisclosureProps
     */
    state?: DisclosureStateReturn;
    /**
     * Changes the styling on the component based on the variant selected.
     *
     * @default 'default'
     * @type {DisclosureVariants}
     * @memberof DisclosureProps
     */
    variant?: DisclosureVariants;
}
declare const Disclosure: React.ForwardRefExoticComponent<DisclosureProps & React.RefAttributes<HTMLDivElement>>;
export { Disclosure };
export { useDisclosurePrimitiveState as useDisclosureState };
//# sourceMappingURL=Disclosure.d.ts.map