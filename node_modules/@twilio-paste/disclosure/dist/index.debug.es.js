// src/Disclosure.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { useDisclosurePrimitiveState } from "@twilio-paste/disclosure-primitive";
import * as React2 from "react";

// src/DisclosureContext.tsx
import * as React from "react";
var DisclosureContext = React.createContext({});

// src/Disclosure.tsx
var Disclosure = React2.forwardRef(
  ({ children, element = "DISCLOSURE", variant = "default", state, ...props }, ref) => {
    const disclosure = state || useDisclosurePrimitiveState({ animated: true, ...props });
    const [isDisabled, setIsDisabled] = React2.useState(false);
    const [isHeadingHovered, setIsHeadingHovered] = React2.useState(false);
    const disclosureContext = {
      disclosure,
      variant,
      isHeadingHovered,
      setIsHeadingHovered,
      isDisabled,
      setIsDisabled
    };
    return /* @__PURE__ */ React2.createElement(DisclosureContext.Provider, { value: disclosureContext }, /* @__PURE__ */ React2.createElement(Box, { ...safelySpreadBoxProps(props), variant, element, ref }, children));
  }
);
Disclosure.displayName = "Disclosure";

// src/DisclosureHeading.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { DisclosurePrimitive } from "@twilio-paste/disclosure-primitive";
import { Heading } from "@twilio-paste/heading";
import { ChevronDisclosureIcon } from "@twilio-paste/icons/esm/ChevronDisclosureIcon";
import { useTheme } from "@twilio-paste/theme";
import * as React3 from "react";

// src/constants.ts
var IconSizeFromHeading = {
  heading10: "sizeIcon90",
  heading20: "sizeIcon70",
  heading30: "sizeIcon60",
  heading40: "sizeIcon40",
  heading50: "sizeIcon30",
  heading60: "sizeIcon20"
};

// src/DisclosureHeading.tsx
var baseContainedStyles = {
  borderWidth: "borderWidth10",
  borderStyle: "solid",
  borderRadius: "borderRadius20"
};
var containedStyles = {
  ...baseContainedStyles,
  borderColor: "colorBorderWeaker"
};
var containedHoverStyles = {
  ...baseContainedStyles,
  borderColor: "colorBorderWeak"
};
var StyledDisclosureHeading = React3.forwardRef(
  ({
    children,
    element,
    renderAs,
    disclosureVariant,
    variant,
    isHovered,
    isDisabled,
    setIsDisabled,
    setIsHovered,
    ...props
  }, ref) => {
    const theme = useTheme();
    const disabledProp = props["aria-disabled"];
    const isExpanded = props["aria-expanded"];
    const iconSize = IconSizeFromHeading[variant] || "sizeIcon20";
    const shouldIconMove = isHovered && !isDisabled;
    const buttonRef = React3.useRef(null);
    React3.useEffect(() => {
      setIsDisabled(disabledProp ? true : false);
    }, [disabledProp, setIsDisabled]);
    React3.useEffect(() => {
      const handleMouseOver = () => setIsHovered(true);
      const handleMouseOut = () => setIsHovered(false);
      const node = buttonRef.current;
      if (node) {
        node.addEventListener("mouseover", handleMouseOver);
        node.addEventListener("mouseout", handleMouseOut);
        return () => {
          node.removeEventListener("mouseover", handleMouseOver);
          node.removeEventListener("mouseout", handleMouseOut);
        };
      }
    }, [buttonRef, setIsHovered]);
    let variantStyles = {};
    if (disclosureVariant === "contained") {
      variantStyles = containedStyles;
      if (isHovered && !isDisabled) {
        variantStyles = containedHoverStyles;
      }
      if (isExpanded) {
        variantStyles = {
          ...variantStyles,
          borderBottomLeftRadius: "borderRadius0",
          borderBottomRightRadius: "borderRadius0",
          borderBottom: "none"
        };
      }
    }
    return /* @__PURE__ */ React3.createElement(Heading, { as: renderAs, marginBottom: "space0", variant, ref }, /* @__PURE__ */ React3.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        as: "div",
        backgroundColor: isExpanded ? "colorBackgroundWeak" : "colorBackgroundBody",
        borderRadius: "borderRadius20",
        cursor: "pointer",
        display: "flex",
        element,
        outline: "none",
        padding: "space30",
        position: "relative",
        ref: buttonRef,
        role: "button",
        zIndex: "zIndex10",
        transition: "background-color, border-color, border-radius 100ms ease",
        _hover: {
          backgroundColor: "colorBackground"
        },
        _focus: {
          boxShadow: "shadowFocus"
        },
        _disabled: {
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeaker",
          cursor: "not-allowed"
        },
        ...variantStyles
      },
      /* @__PURE__ */ React3.createElement(
        Box2,
        {
          as: "span",
          element: `${element}_ICON`,
          display: "flex",
          color: isDisabled ? "colorTextWeaker" : "colorTextIcon",
          transition: "transform 170ms ease",
          height: iconSize,
          width: iconSize,
          transform: `
             ${shouldIconMove ? `translateX(${theme.space.space10})` : "translateX(0)"}
             ${isExpanded ? `rotate(90deg)` : "rotate(0deg)"}`
        },
        /* @__PURE__ */ React3.createElement(ChevronDisclosureIcon, { color: "inherit", decorative: true, size: iconSize })
      ),
      children
    ));
  }
);
StyledDisclosureHeading.displayName = "StyledDisclosureHeading";
var DisclosureHeading = ({
  children,
  as,
  element = "DISCLOSURE_HEADING",
  disabled,
  focusable,
  ...props
}) => {
  const { disclosure, variant, setIsDisabled, setIsHeadingHovered, isHeadingHovered, isDisabled } = React3.useContext(DisclosureContext);
  return /* @__PURE__ */ React3.createElement(
    DisclosurePrimitive,
    {
      ...disclosure,
      ...props,
      as: StyledDisclosureHeading,
      disabled,
      disclosureVariant: variant,
      element,
      focusable,
      renderAs: as,
      isHovered: isHeadingHovered,
      setIsDisabled,
      setIsHovered: setIsHeadingHovered,
      isDisabled
    },
    children
  );
};
DisclosureHeading.displayName = "DisclosureHeading";

// src/DisclosureContent.tsx
import { animated, useSpring } from "@twilio-paste/animation-library";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { DisclosurePrimitiveContent } from "@twilio-paste/disclosure-primitive";
import * as React4 from "react";
var AnimatedDisclosureContent = animated(Box3);
var baseContainedStyles2 = {
  borderWidth: "borderWidth10",
  borderStyle: "solid",
  borderBottomLeftRadius: "borderRadius20",
  borderBottomRightRadius: "borderRadius20",
  borderTop: "none",
  transition: "border-color 100ms ease-out"
};
var containedStyles2 = {
  ...baseContainedStyles2,
  borderColor: "colorBorderWeaker"
};
var containedHoverStyles2 = {
  ...baseContainedStyles2,
  borderColor: "colorBorderWeak"
};
var DisclosureContent = React4.forwardRef(
  ({ children, element = "DISCLOSURE_CONTENT", visible, ...props }, ref) => {
    const { disclosure, variant, isHeadingHovered, isDisabled } = React4.useContext(DisclosureContext);
    const { opacity } = useSpring({
      opacity: disclosure.visible ? 1 : 0,
      onRest: disclosure.stopAnimation,
      config: {
        mass: 1,
        tension: 150,
        friction: 20,
        duration: 100
      }
    });
    let variantStyles = {};
    if (variant === "contained") {
      variantStyles = containedStyles2;
      if (isHeadingHovered && !isDisabled) {
        variantStyles = containedHoverStyles2;
      }
    }
    return /* @__PURE__ */ React4.createElement(
      DisclosurePrimitiveContent,
      {
        ...disclosure,
        ...safelySpreadBoxProps3(props),
        as: AnimatedDisclosureContent,
        element,
        backgroundColor: "colorBackgroundBody",
        padding: "space50",
        ref,
        style: {
          opacity
        },
        ...variantStyles
      },
      children
    );
  }
);
DisclosureContent.displayName = "DisclosureContent";
export {
  Disclosure,
  DisclosureContent,
  DisclosureHeading,
  useDisclosurePrimitiveState as useDisclosureState
};
