import type { BoxProps, BoxStyleProps } from "@twilio-paste/box";
import type { DisclosurePrimitiveProps } from "@twilio-paste/disclosure-primitive";
import type { HeadingProps } from "@twilio-paste/heading";
import * as React from "react";
import type { DisclosureVariants } from "./types";
export interface StyledDisclosureHeadingProps extends Omit<DisclosureHeadingProps, "as"> {
    renderAs: HeadingProps["as"];
    disclosureVariant: DisclosureVariants;
    element: BoxProps["element"];
    isHovered: boolean;
    isDisabled: boolean;
    setIsHovered: (value: boolean) => void;
    setIsDisabled: (value: boolean) => void;
}
export interface DisclosureHeadingProps extends Omit<DisclosurePrimitiveProps, "baseId" | "toggle" | keyof BoxStyleProps> {
    children: NonNullable<React.ReactNode>;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'DISCLOSURE_HEADING'
     * @type {BoxProps['element']}
     * @memberof DisclosureHeadingProps
     */
    element?: BoxProps["element"];
    as: HeadingProps["as"];
    marginBottom?: HeadingProps["marginBottom"];
    variant: HeadingProps["variant"];
}
declare const DisclosureHeading: React.FC<React.PropsWithChildren<DisclosureHeadingProps>>;
export { DisclosureHeading };
//# sourceMappingURL=DisclosureHeading.d.ts.map