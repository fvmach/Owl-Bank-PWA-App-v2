"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Disclosure: () => Disclosure,
  DisclosureContent: () => DisclosureContent,
  DisclosureHeading: () => DisclosureHeading,
  useDisclosureState: () => import_disclosure_primitive.useDisclosurePrimitiveState
});
module.exports = __toCommonJS(src_exports);

// src/Disclosure.tsx
var import_box = require("@twilio-paste/box");
var import_disclosure_primitive = require("@twilio-paste/disclosure-primitive");
var React2 = __toESM(require("react"));

// src/DisclosureContext.tsx
var React = __toESM(require("react"));
var DisclosureContext = React.createContext({});

// src/Disclosure.tsx
var Disclosure = React2.forwardRef(
  ({ children, element = "DISCLOSURE", variant = "default", state, ...props }, ref) => {
    const disclosure = state || (0, import_disclosure_primitive.useDisclosurePrimitiveState)({ animated: true, ...props });
    const [isDisabled, setIsDisabled] = React2.useState(false);
    const [isHeadingHovered, setIsHeadingHovered] = React2.useState(false);
    const disclosureContext = {
      disclosure,
      variant,
      isHeadingHovered,
      setIsHeadingHovered,
      isDisabled,
      setIsDisabled
    };
    return /* @__PURE__ */ React2.createElement(DisclosureContext.Provider, { value: disclosureContext }, /* @__PURE__ */ React2.createElement(import_box.Box, { ...(0, import_box.safelySpreadBoxProps)(props), variant, element, ref }, children));
  }
);
Disclosure.displayName = "Disclosure";

// src/DisclosureHeading.tsx
var import_box2 = require("@twilio-paste/box");
var import_disclosure_primitive2 = require("@twilio-paste/disclosure-primitive");
var import_heading = require("@twilio-paste/heading");
var import_ChevronDisclosureIcon = require("@twilio-paste/icons/cjs/ChevronDisclosureIcon");
var import_theme = require("@twilio-paste/theme");
var React3 = __toESM(require("react"));

// src/constants.ts
var IconSizeFromHeading = {
  heading10: "sizeIcon90",
  heading20: "sizeIcon70",
  heading30: "sizeIcon60",
  heading40: "sizeIcon40",
  heading50: "sizeIcon30",
  heading60: "sizeIcon20"
};

// src/DisclosureHeading.tsx
var baseContainedStyles = {
  borderWidth: "borderWidth10",
  borderStyle: "solid",
  borderRadius: "borderRadius20"
};
var containedStyles = {
  ...baseContainedStyles,
  borderColor: "colorBorderWeaker"
};
var containedHoverStyles = {
  ...baseContainedStyles,
  borderColor: "colorBorderWeak"
};
var StyledDisclosureHeading = React3.forwardRef(
  ({
    children,
    element,
    renderAs,
    disclosureVariant,
    variant,
    isHovered,
    isDisabled,
    setIsDisabled,
    setIsHovered,
    ...props
  }, ref) => {
    const theme = (0, import_theme.useTheme)();
    const disabledProp = props["aria-disabled"];
    const isExpanded = props["aria-expanded"];
    const iconSize = IconSizeFromHeading[variant] || "sizeIcon20";
    const shouldIconMove = isHovered && !isDisabled;
    const buttonRef = React3.useRef(null);
    React3.useEffect(() => {
      setIsDisabled(disabledProp ? true : false);
    }, [disabledProp, setIsDisabled]);
    React3.useEffect(() => {
      const handleMouseOver = () => setIsHovered(true);
      const handleMouseOut = () => setIsHovered(false);
      const node = buttonRef.current;
      if (node) {
        node.addEventListener("mouseover", handleMouseOver);
        node.addEventListener("mouseout", handleMouseOut);
        return () => {
          node.removeEventListener("mouseover", handleMouseOver);
          node.removeEventListener("mouseout", handleMouseOut);
        };
      }
    }, [buttonRef, setIsHovered]);
    let variantStyles = {};
    if (disclosureVariant === "contained") {
      variantStyles = containedStyles;
      if (isHovered && !isDisabled) {
        variantStyles = containedHoverStyles;
      }
      if (isExpanded) {
        variantStyles = {
          ...variantStyles,
          borderBottomLeftRadius: "borderRadius0",
          borderBottomRightRadius: "borderRadius0",
          borderBottom: "none"
        };
      }
    }
    return /* @__PURE__ */ React3.createElement(import_heading.Heading, { as: renderAs, marginBottom: "space0", variant, ref }, /* @__PURE__ */ React3.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        as: "div",
        backgroundColor: isExpanded ? "colorBackgroundWeak" : "colorBackgroundBody",
        borderRadius: "borderRadius20",
        cursor: "pointer",
        display: "flex",
        element,
        outline: "none",
        padding: "space30",
        position: "relative",
        ref: buttonRef,
        role: "button",
        zIndex: "zIndex10",
        transition: "background-color, border-color, border-radius 100ms ease",
        _hover: {
          backgroundColor: "colorBackground"
        },
        _focus: {
          boxShadow: "shadowFocus"
        },
        _disabled: {
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeaker",
          cursor: "not-allowed"
        },
        ...variantStyles
      },
      /* @__PURE__ */ React3.createElement(
        import_box2.Box,
        {
          as: "span",
          element: `${element}_ICON`,
          display: "flex",
          color: isDisabled ? "colorTextWeaker" : "colorTextIcon",
          transition: "transform 170ms ease",
          height: iconSize,
          width: iconSize,
          transform: `
             ${shouldIconMove ? `translateX(${theme.space.space10})` : "translateX(0)"}
             ${isExpanded ? `rotate(90deg)` : "rotate(0deg)"}`
        },
        /* @__PURE__ */ React3.createElement(import_ChevronDisclosureIcon.ChevronDisclosureIcon, { color: "inherit", decorative: true, size: iconSize })
      ),
      children
    ));
  }
);
StyledDisclosureHeading.displayName = "StyledDisclosureHeading";
var DisclosureHeading = ({
  children,
  as,
  element = "DISCLOSURE_HEADING",
  disabled,
  focusable,
  ...props
}) => {
  const { disclosure, variant, setIsDisabled, setIsHeadingHovered, isHeadingHovered, isDisabled } = React3.useContext(DisclosureContext);
  return /* @__PURE__ */ React3.createElement(
    import_disclosure_primitive2.DisclosurePrimitive,
    {
      ...disclosure,
      ...props,
      as: StyledDisclosureHeading,
      disabled,
      disclosureVariant: variant,
      element,
      focusable,
      renderAs: as,
      isHovered: isHeadingHovered,
      setIsDisabled,
      setIsHovered: setIsHeadingHovered,
      isDisabled
    },
    children
  );
};
DisclosureHeading.displayName = "DisclosureHeading";

// src/DisclosureContent.tsx
var import_animation_library = require("@twilio-paste/animation-library");
var import_box3 = require("@twilio-paste/box");
var import_disclosure_primitive3 = require("@twilio-paste/disclosure-primitive");
var React4 = __toESM(require("react"));
var AnimatedDisclosureContent = (0, import_animation_library.animated)(import_box3.Box);
var baseContainedStyles2 = {
  borderWidth: "borderWidth10",
  borderStyle: "solid",
  borderBottomLeftRadius: "borderRadius20",
  borderBottomRightRadius: "borderRadius20",
  borderTop: "none",
  transition: "border-color 100ms ease-out"
};
var containedStyles2 = {
  ...baseContainedStyles2,
  borderColor: "colorBorderWeaker"
};
var containedHoverStyles2 = {
  ...baseContainedStyles2,
  borderColor: "colorBorderWeak"
};
var DisclosureContent = React4.forwardRef(
  ({ children, element = "DISCLOSURE_CONTENT", visible, ...props }, ref) => {
    const { disclosure, variant, isHeadingHovered, isDisabled } = React4.useContext(DisclosureContext);
    const { opacity } = (0, import_animation_library.useSpring)({
      opacity: disclosure.visible ? 1 : 0,
      onRest: disclosure.stopAnimation,
      config: {
        mass: 1,
        tension: 150,
        friction: 20,
        duration: 100
      }
    });
    let variantStyles = {};
    if (variant === "contained") {
      variantStyles = containedStyles2;
      if (isHeadingHovered && !isDisabled) {
        variantStyles = containedHoverStyles2;
      }
    }
    return /* @__PURE__ */ React4.createElement(
      import_disclosure_primitive3.DisclosurePrimitiveContent,
      {
        ...disclosure,
        ...(0, import_box3.safelySpreadBoxProps)(props),
        as: AnimatedDisclosureContent,
        element,
        backgroundColor: "colorBackgroundBody",
        padding: "space50",
        ref,
        style: {
          opacity
        },
        ...variantStyles
      },
      children
    );
  }
);
DisclosureContent.displayName = "DisclosureContent";
