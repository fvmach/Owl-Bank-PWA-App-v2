"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source2, options) {
      return target.concat(source2).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source2, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source2).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source2[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source2[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source2[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source2, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source2);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source2, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source2, options);
      } else {
        return mergeObject(target, source2, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module2.exports = deepmerge_1;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ChatComposer: () => ChatComposer,
  ChatComposerActionGroup: () => ChatComposerActionGroup,
  ChatComposerAttachmentCard: () => ChatComposerAttachmentCard,
  ChatComposerAttachmentDescription: () => ChatComposerAttachmentDescription,
  ChatComposerAttachmentGroup: () => ChatComposerAttachmentGroup,
  ChatComposerAttachmentLink: () => ChatComposerAttachmentLink,
  ChatComposerContainer: () => ChatComposerContainer
});
module.exports = __toCommonJS(src_exports);

// src/ChatComposer.tsx
var import_box2 = require("@twilio-paste/box");
var import_lexical_library4 = require("@twilio-paste/lexical-library");
var import_styling_library2 = require("@twilio-paste/styling-library");
var import_deepmerge = __toESM(require_cjs());
var React5 = __toESM(require("react"));

// src/AutoLinkPlugin.tsx
var import_lexical_library = require("@twilio-paste/lexical-library");
var React = __toESM(require("react"));
var URL_MATCHER = /(?:(?:https?:\/\/(?:www\.)?)|(?:www\.))[\w#%+.:=@~-]{1,256}\.[\d()A-Za-z]{1,6}\b[\w#%&()+./:=?@~-]*/;
var EMAIL_MATCHER = /(?:(?:[^\s"(),.:;<>@[\\\]]+(?:\.[^\s"(),.:;<>@[\\\]]+)*)|(?:".+"))@(?:(?:\[(?:\d{1,3}\.){3}\d{1,3}])|(?:(?:[\dA-Za-z\-]+\.)+[A-Za-z]{2,}))/;
var MATCHERS = [
  (text) => {
    const match = URL_MATCHER.exec(text);
    return match && {
      index: match.index,
      length: match[0].length,
      text: match[0],
      url: match[0]
    };
  },
  (text) => {
    const match = EMAIL_MATCHER.exec(text);
    return match && {
      index: match.index,
      length: match[0].length,
      text: match[0],
      url: `mailto:${match[0]}`
    };
  }
];
var AutoLinkPlugin = () => {
  return /* @__PURE__ */ React.createElement(import_lexical_library.AutoLinkPlugin, { matchers: MATCHERS });
};
AutoLinkPlugin.displayName = "AutoLinkPlugin";

// src/ChatComposerContext.ts
var React2 = __toESM(require("react"));
var ChatComposerContext = React2.createContext({
  isDisabled: false
});

// src/PlaceholderWrapper.tsx
var import_box = require("@twilio-paste/box");
var React3 = __toESM(require("react"));
var PlaceholderWrapper = ({ placeholder, element }) => /* @__PURE__ */ React3.createElement(
  import_box.Box,
  {
    position: "absolute",
    top: "space30",
    left: "space40",
    right: "space40",
    display: "flex",
    alignItems: "center",
    color: "colorTextWeak",
    pointerEvents: "none",
    userSelect: "none",
    fontStyle: "italic",
    element
  },
  placeholder
);
PlaceholderWrapper.displayName = "PlaceholderWrapper";

// src/ToggleEditablePlugin.tsx
var import_lexical_library2 = require("@twilio-paste/lexical-library");
var React4 = __toESM(require("react"));
var ToggleEditablePlugin = ({ disabled }) => {
  const [editor] = (0, import_lexical_library2.useLexicalComposerContext)();
  const { setIsDisabled } = React4.useContext(ChatComposerContext);
  React4.useEffect(() => {
    if (disabled !== void 0) {
      if (setIsDisabled !== void 0) {
        setIsDisabled(disabled);
      }
      editor.setEditable(!disabled);
    }
  }, [disabled]);
  return null;
};
ToggleEditablePlugin.displayName = "ToggleEditablePlugin";

// src/helpers.ts
var import_lexical_library3 = require("@twilio-paste/lexical-library");
var renderInitialText = (text) => {
  const root = (0, import_lexical_library3.$getRoot)();
  if (root.getFirstChild() === null) {
    const paragraph = (0, import_lexical_library3.$createParagraphNode)();
    paragraph.append((0, import_lexical_library3.$createTextNode)(text));
    root.append(paragraph);
  }
};
var baseConfig = {
  theme: {
    paragraph: "paste-chat-composer-paragraph"
  },
  nodes: [import_lexical_library3.AutoLinkNode]
};

// src/styles.ts
var import_styling_library = require("@twilio-paste/styling-library");
var chatComposerLexicalStyles = import_styling_library.EmotionCSS`
.paste-chat-composer-paragraph {
  margin: 0;
  position: relative;
}

.paste-chat-composer-content-editable:focus {
  outline: none;
}
`;

// src/ChatComposer.tsx
var ChatComposer = React5.forwardRef(
  ({
    children,
    element = "CHAT_COMPOSER",
    onChange,
    placeholder = "",
    initialValue,
    config,
    maxHeight = "size30",
    disabled,
    fontSize,
    lineHeight,
    editorInstanceRef,
    ...props
  }, ref) => {
    const { setIsDisabled } = React5.useContext(ChatComposerContext);
    const baseConfigWithEditorState = {
      ...baseConfig,
      editable: disabled ? false : true,
      editorState: initialValue ? () => renderInitialText(initialValue) : void 0
    };
    const getDisabledStyling = React5.useCallback(() => {
      if (setIsDisabled !== void 0) {
        return {};
      }
      return {
        color: "colorTextWeaker",
        backgroundColor: "colorBackground"
      };
    }, [Boolean(setIsDisabled)]);
    return /* @__PURE__ */ React5.createElement(
      import_box2.Box,
      {
        flexGrow: 1,
        ref,
        element,
        position: "relative",
        transition: "background-color 100ms ease-in,box-shadow 100ms ease-in,color 100ms ease-in",
        paddingY: "space30",
        paddingX: "space40",
        borderRadius: "borderRadius20",
        _focusWithin: { boxShadow: "shadowFocus" },
        overflowY: "auto",
        maxHeight,
        disabled,
        "aria-disabled": disabled,
        _disabled: getDisabledStyling(),
        fontSize,
        lineHeight,
        gridArea: "1/1"
      },
      /* @__PURE__ */ React5.createElement(import_styling_library2.StylingGlobals, { styles: chatComposerLexicalStyles }),
      /* @__PURE__ */ React5.createElement(import_lexical_library4.LexicalComposer, { initialConfig: (0, import_deepmerge.default)(baseConfigWithEditorState, config) }, /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(
        import_lexical_library4.RichTextPlugin,
        {
          contentEditable: /* @__PURE__ */ React5.createElement(import_lexical_library4.ContentEditable, { ...props, className: "paste-chat-composer-content-editable" }),
          placeholder: /* @__PURE__ */ React5.createElement(PlaceholderWrapper, { element: `${element}_PLACEHOLDER_WRAPPER`, placeholder }),
          ErrorBoundary: import_lexical_library4.ErrorBoundary
        }
      ), onChange && /* @__PURE__ */ React5.createElement(import_lexical_library4.OnChangePlugin, { onChange }), /* @__PURE__ */ React5.createElement(import_lexical_library4.HistoryPlugin, null), /* @__PURE__ */ React5.createElement(AutoLinkPlugin, null), /* @__PURE__ */ React5.createElement(ToggleEditablePlugin, { disabled }), editorInstanceRef && /* @__PURE__ */ React5.createElement(import_lexical_library4.EditorRefPlugin, { editorRef: editorInstanceRef }), children))
    );
  }
);
ChatComposer.displayName = "ChatComposer";

// src/ChatComposerActionGroup.tsx
var import_box3 = require("@twilio-paste/box");
var React6 = __toESM(require("react"));
var ChatComposerActionGroup = React6.forwardRef(
  ({ element = "CHAT_COMPOSER_ACTION_GROUP", children, ...props }, ref) => /* @__PURE__ */ React6.createElement(
    import_box3.Box,
    {
      ...(0, import_box3.safelySpreadBoxProps)(props),
      element,
      ref,
      gridArea: "1/2",
      display: "inline-flex",
      alignSelf: "end",
      role: "group",
      columnGap: "space30",
      marginBottom: "space30",
      marginLeft: "space30",
      marginRight: "space20"
    },
    children
  )
);
ChatComposerActionGroup.displayName = "ChatComposerActionGroup";

// src/ChatComposerAttachmentGroup.tsx
var import_box4 = require("@twilio-paste/box");
var React7 = __toESM(require("react"));
var ChatComposerAttachmentGroup = React7.forwardRef(
  ({ element = "CHAT_COMPOSER_ATTACHMENT_GROUP", columns = 2, children, ...props }, ref) => {
    const getColumnStyles = () => {
      if (Array.isArray(columns)) {
        return columns.map((column) => `repeat(${column}, minmax(0,1fr))`);
      }
      return `repeat(${columns}, 1fr)`;
    };
    return /* @__PURE__ */ React7.createElement(
      import_box4.Box,
      {
        ...(0, import_box4.safelySpreadBoxProps)(props),
        element,
        ref,
        gridArea: "2/1/3/3",
        role: "group",
        display: "grid",
        gridTemplateColumns: getColumnStyles(),
        flexWrap: "wrap",
        columnGap: "space40",
        paddingBottom: "space30",
        paddingX: "space10",
        rowGap: "space40"
      },
      children
    );
  }
);
ChatComposerAttachmentGroup.displayName = "ChatComposerAttachmentGroup";

// src/ChatComposerContainer.tsx
var import_box5 = require("@twilio-paste/box");
var React8 = __toESM(require("react"));
var Styles = {
  default: {},
  contained: {
    borderWidth: "borderWidth10",
    borderStyle: "solid",
    borderRadius: "borderRadius30",
    borderColor: "colorBorderWeaker",
    boxShadow: "shadowLow",
    backgroundColor: "colorBackgroundBody"
  }
};
var ChatComposerContainer = React8.forwardRef(
  ({ variant = "default", element = "CHAT_COMPOSER_CONTAINER", maxHeight = "size40", children, ...props }, ref) => {
    const [isDisabled, setIsDisabled] = React8.useState(false);
    return /* @__PURE__ */ React8.createElement(ChatComposerContext.Provider, { value: { isDisabled, setIsDisabled } }, /* @__PURE__ */ React8.createElement(
      import_box5.Box,
      {
        ...(0, import_box5.safelySpreadBoxProps)(props),
        element,
        ref,
        display: "grid",
        gridTemplateRows: "auto-fit",
        gridAutoColumns: "1fr auto",
        disabled: isDisabled,
        "aria-disabled": isDisabled,
        _disabled: {
          color: "colorTextWeaker",
          backgroundColor: "colorBackground"
        },
        padding: "space30",
        maxHeight,
        overflowY: "auto",
        rowGap: "space50",
        width: "100%",
        ...Styles[variant]
      },
      children
    ));
  }
);
ChatComposerContainer.displayName = "ChatComposerContainer";

// src/ChatComposerAttachmentCard.tsx
var import_box27 = require("@twilio-paste/box");

// ../anchor/dist/index.es.js
var import_box6 = require("@twilio-paste/box");
var import_LinkExternalIcon = require("@twilio-paste/icons/cjs/LinkExternalIcon");
var React32 = __toESM(require("react"));
var import_box7 = require("@twilio-paste/box");
var React9 = __toESM(require("react"));
var import_box8 = require("@twilio-paste/box");
var React22 = __toESM(require("react"));
var DefaultAnchor = React9.forwardRef((props, ref) => React9.createElement(import_box7.Box, { ...props, as: "a", color: "colorTextLink", fontSize: "inherit", fontWeight: "inherit", lineHeight: "inherit", outline: "none", ref, textDecoration: "underline", _active: { color: "colorTextLinkStrongest", textDecoration: "none" }, _focus: { boxShadow: "shadowFocus", color: "colorTextLink", textDecoration: "underline", borderRadius: "borderRadius20" }, _hover: { color: "colorTextLinkStronger", textDecoration: "none" } }, props.children));
DefaultAnchor.displayName = "DefaultAnchor";
var InverseAnchor = React22.forwardRef((props, ref) => React22.createElement(import_box8.Box, { ...props, as: "a", color: "colorTextInverse", fontSize: "inherit", fontWeight: "inherit", lineHeight: "inherit", outline: "none", ref, textDecoration: "underline", _active: { color: "colorTextInverse", textDecoration: "none" }, _focus: { boxShadow: "shadowFocusInverse", color: "colorTextInverse", textDecoration: "underline", borderRadius: "borderRadius20" }, _hover: { color: "colorTextInverse", textDecoration: "none" } }, props.children));
InverseAnchor.displayName = "InverseAnchor";
var AnchorVariants = { inverse: InverseAnchor, default: DefaultAnchor };
var EXTERNAL_URL_REGEX = /^(https?:)\S*$/;
var EXTERNAL_TARGET_DEFAULT = "_blank";
var EXTERNAL_REL_DEFAULT = "noreferrer noopener";
var isExternalUrl = (url) => EXTERNAL_URL_REGEX.test(url);
var secureExternalLink = (href) => {
  if (!!isExternalUrl(href))
    return { rel: EXTERNAL_REL_DEFAULT, target: EXTERNAL_TARGET_DEFAULT };
};
var Anchor = React32.forwardRef(({ element = "ANCHOR", variant = "default", showExternal, display: display2, height, minHeight, maxHeight, width, minWidth, maxWidth, size, margin, marginBottom, marginLeft, marginRight, marginTop, marginX = null, marginY = null, padding, paddingBottom, paddingLeft, paddingRight, paddingTop, paddingX = null, paddingY = null, verticalAlign: verticalAlign2, i18nExternalLinkLabel = "(link takes you to an external page)", ...props }, ref) => {
  let AnchorComponent = AnchorVariants[variant];
  return React32.createElement(AnchorComponent, { href: props.href, ref, variant, ...secureExternalLink(props.href), ...(0, import_box6.safelySpreadBoxProps)(props), element, display: display2, height, minHeight, maxHeight, width, minWidth, maxWidth, size, margin, marginBottom, marginLeft, marginRight, marginTop, marginX, marginY, padding, paddingBottom, paddingLeft, paddingRight, paddingTop, paddingX, paddingY, verticalAlign: verticalAlign2 }, showExternal ? React32.createElement(import_box6.Box, { as: "span" }, props.children, React32.createElement(import_box6.Box, { as: "span", display: "inline-block", flexShrink: 0, verticalAlign: "middle" }, React32.createElement(import_LinkExternalIcon.LinkExternalIcon, { decorative: false, title: i18nExternalLinkLabel }))) : props.children);
});
Anchor.displayName = "Anchor";

// ../button/dist/index.es.js
var import_animation_library = require("@twilio-paste/animation-library");
var import_box9 = require("@twilio-paste/box");
var import_ArrowForwardIcon = require("@twilio-paste/icons/cjs/ArrowForwardIcon");
var import_LinkExternalIcon2 = require("@twilio-paste/icons/cjs/LinkExternalIcon");

// ../spinner/dist/index.es.js
var import_IconWrapper = require("@twilio-paste/icons/cjs/helpers/IconWrapper");
var import_theme = require("@twilio-paste/theme");

// ../../../paste-libraries/uid/dist/index.es.js
var import_react = __toESM(require("react"));
var React33 = __toESM(require("react"));
var import_react2 = require("react");
var React10 = __toESM(require("react"));
var import_react3 = require("react");
var import_react4 = require("react");
var generateUID = function() {
  var counter2 = 1, map = /* @__PURE__ */ new WeakMap(), uid2 = function(item, index) {
    return typeof item == "number" || typeof item == "string" ? index ? "idx-".concat(index) : "val-".concat(item) : map.has(item) ? "uid" + map.get(item) : (map.set(item, counter2++), uid2(item));
  };
  return uid2;
};
var uid = generateUID();
var createSource = function(prefix) {
  return prefix === void 0 && (prefix = ""), { value: 1, prefix, uid: generateUID() };
};
var counter = createSource();
var source = React10.createContext(createSource());
var getId = function(source2) {
  return source2.value++;
};
var getPrefix = function(source2) {
  return source2 ? source2.prefix : "";
};
var generateUID2 = function(context) {
  var quartz = context || counter, prefix = getPrefix(quartz), id = getId(quartz), uid2 = prefix + id, gen = function(item) {
    return uid2 + quartz.uid(item);
  };
  return { uid: uid2, gen };
};
var useUIDState = function() {
  var context = (0, import_react4.useContext)(source), uid2 = (0, import_react4.useState)(function() {
    return generateUID2(context);
  })[0];
  return uid2;
};
var useUID = function() {
  var uid2 = useUIDState().uid;
  return uid2;
};
var useUIDSeed = function() {
  var gen = useUIDState().gen;
  return gen;
};
var useId = "useId";
var maybeReactUseId = import_react.default[useId];
var useUID2 = maybeReactUseId !== void 0 ? maybeReactUseId : useUID;
var useUIDSeed2 = maybeReactUseId !== void 0 ? () => {
  let id = maybeReactUseId();
  return (seed) => `${id}-${seed}`;
} : useUIDSeed;

// ../spinner/dist/index.es.js
var React11 = __toESM(require("react"));
var import_styling_library3 = require("@twilio-paste/styling-library");
var import_styling_library4 = require("@twilio-paste/styling-library");
var circleGeometry = { cx: 50, cy: 50, r: 45 };
var circleCircumference = Math.PI * 2 * 45;
var SvgKeyframes = import_styling_library4.keyframes`
  0%,
  15% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(0);
  }

  50%,
  75% {
    stroke-dashoffset: ${circleCircumference * 0.2};
    transform: rotate(45deg);
  }

  100% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(360deg);
  }
`;
var CircleKeyframes = import_styling_library4.keyframes`
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
`;
var SafariSvgKeyframes = import_styling_library4.keyframes`
  0%,
  75% {
    stroke-dashoffset: 90%;
  }

  100% {
    stroke-dashoffset: 90%;
    transform: rotate(360deg);
  }
`;
var StyledCircleTrack = import_styling_library3.styled.circle({ transformOrigin: "center", opacity: 0.25 });
var AnimatedStyledCircle = import_styling_library3.styled.circle(({ show, isSafari }) => ({ transformOrigin: "center", animation: isSafari ? "none" : `1.5s ease-in-out infinite both ${CircleKeyframes}`, strokeDasharray: circleCircumference, opacity: show ? 1 : 0 }));
var StyledSvg = import_styling_library3.styled.svg(({ isSafari }) => ({ height: "100%", width: "100%", display: "block", animation: isSafari ? `1s infinite linear ${SafariSvgKeyframes}` : `4.25s linear infinite both ${SvgKeyframes}` }));
var Spinner = React11.forwardRef(({ size, color = "currentColor", title, as, display: display2, decorative, delay = 250, element = "SPINNER" }, ref) => {
  let titleId = `spinner-${useUID2()}`, { borderWidths: { borderWidth40 } } = (0, import_theme.useTheme)(), [show, setShow] = React11.useState(delay === 0);
  if (!decorative && title == null)
    throw new Error("[Spinner]: Missing a title for non-decorative icon.");
  React11.useEffect(() => {
    if (delay === 0)
      return;
    let showTimer = setTimeout(() => setShow(true), delay);
    return () => clearTimeout(showTimer);
  }, [delay]);
  let [isSafari, setIsSafari] = React11.useState(null);
  return React11.useEffect(() => {
    setIsSafari(navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome"));
  }, []), isSafari == null ? null : React11.createElement(import_IconWrapper.IconWrapper, { as, element, display: display2, size, color, "aria-hidden": decorative, ref }, React11.createElement(StyledSvg, { viewBox: "0 0 100 100", xmlns: "http://www.w3.org/2000/svg", "aria-labelledby": titleId, isSafari }, title ? React11.createElement("title", { id: titleId }, title) : null, React11.createElement("g", { strokeWidth: borderWidth40, stroke: "currentColor", strokeLinecap: "round", fill: "transparent" }, React11.createElement(StyledCircleTrack, { ...circleGeometry }), React11.createElement(AnimatedStyledCircle, { show, ...circleGeometry, isSafari }))));
});
Spinner.displayName = "Spinner";

// ../button/dist/index.es.js
var React13 = __toESM(require("react"));
var import_box10 = require("@twilio-paste/box");
var React12 = __toESM(require("react"));
var import_box11 = require("@twilio-paste/box");
var React23 = __toESM(require("react"));
var import_box12 = require("@twilio-paste/box");
var React34 = __toESM(require("react"));
var import_box13 = require("@twilio-paste/box");
var React43 = __toESM(require("react"));
var import_box14 = require("@twilio-paste/box");
var React52 = __toESM(require("react"));
var import_box15 = require("@twilio-paste/box");
var React62 = __toESM(require("react"));
var import_box16 = require("@twilio-paste/box");
var React72 = __toESM(require("react"));
var import_box17 = require("@twilio-paste/box");
var React82 = __toESM(require("react"));
var import_box18 = require("@twilio-paste/box");
var React92 = __toESM(require("react"));
var import_box19 = require("@twilio-paste/box");
var React102 = __toESM(require("react"));
var import_box20 = require("@twilio-paste/box");
var React112 = __toESM(require("react"));
var import_box21 = require("@twilio-paste/box");
var React122 = __toESM(require("react"));
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames2(from))
      !__hasOwnProp2.call(to, key) && key !== except && __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_cjs2 = __commonJS2({ "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
  "use strict";
  var isMergeableObject = function(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value == "object";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol == "function" && Symbol.for, REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
  }
  function defaultArrayMerge(target, source2, options) {
    return target.concat(source2).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key, options) {
    if (!options.customMerge)
      return deepmerge;
    var customMerge = options.customMerge(key);
    return typeof customMerge == "function" ? customMerge : deepmerge;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return target.propertyIsEnumerable(symbol);
    }) : [];
  }
  function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property) {
    try {
      return property in object;
    } catch {
      return false;
    }
  }
  function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
  }
  function mergeObject(target, source2, options) {
    var destination = {};
    return options.isMergeableObject(target) && getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    }), getKeys(source2).forEach(function(key) {
      propertyIsUnsafe(target, key) || (propertyIsOnObject(target, key) && options.isMergeableObject(source2[key]) ? destination[key] = getMergeFunction(key, options)(target[key], source2[key], options) : destination[key] = cloneUnlessOtherwiseSpecified(source2[key], options));
    }), destination;
  }
  function deepmerge(target, source2, options) {
    options = options || {}, options.arrayMerge = options.arrayMerge || defaultArrayMerge, options.isMergeableObject = options.isMergeableObject || isMergeableObject, options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source2), targetIsArray = Array.isArray(target), sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    return sourceAndTargetTypesMatch ? sourceIsArray ? options.arrayMerge(target, source2, options) : mergeObject(target, source2, options) : cloneUnlessOtherwiseSpecified(source2, options);
  }
  deepmerge.all = function(array, options) {
    if (!Array.isArray(array))
      throw new Error("first argument should be an array");
    return array.reduce(function(prev, next) {
      return deepmerge(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge;
  module2.exports = deepmerge_1;
} });
var import_deepmerge2 = __toESM2(require_cjs2());
var import_deepmerge3 = __toESM2(require_cjs2());
var ResetStyles = { appearance: "none", background: "none", display: "inline-block", border: "none", outline: "none", transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in", fontFamily: "inherit", fontWeight: "fontWeightSemibold", textDecoration: "none", position: "relative", margin: "space0", borderRadius: "borderRadius20", _hover: { textDecoration: "none" }, _focus: { textDecoration: "none", boxShadow: "shadowFocus" }, _active: { textDecoration: "none" } };
var BaseStyles = { default: (0, import_deepmerge3.default)(ResetStyles, { cursor: "pointer", _active: { boxShadow: "none" } }), disabled: (0, import_deepmerge3.default)(ResetStyles, { cursor: "not-allowed" }), loading: (0, import_deepmerge3.default)(ResetStyles, { cursor: "wait" }) };
var SizeStyles = { default: { paddingTop: "space30", paddingBottom: "space30", paddingLeft: "space40", paddingRight: "space40", borderRadius: "borderRadius20", fontSize: "fontSize30", lineHeight: "lineHeight20" }, small: { paddingTop: "space20", paddingBottom: "space20", paddingLeft: "space30", paddingRight: "space30", borderRadius: "borderRadius10", fontSize: "fontSize30", lineHeight: "lineHeight20" }, icon: { padding: "space30", borderRadius: "borderRadius20" }, icon_small: { padding: "space20", borderRadius: "borderRadius20" }, reset: { paddingTop: "space0", paddingRight: "space0", paddingBottom: "space0", paddingLeft: "space0", borderWidth: "borderWidth0", fontSize: "inherit" }, rounded_small: { borderRadius: "borderRadiusPill", paddingTop: "space20", paddingBottom: "space20", paddingLeft: "space30", paddingRight: "space30", fontSize: "fontSize30", lineHeight: "lineHeight20" }, circle: { padding: "space30", borderRadius: "borderRadiusCircle" }, circle_small: { padding: "space20", borderRadius: "borderRadiusCircle" } };
var ToggleStyles = { transition: "background-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in", color: "colorText", backgroundColor: "colorBackgroundBody", _disabled: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeaker", color: "colorTextWeaker" }, _hover: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimary", color: "colorTextPrimary" }, _active: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimaryStrongest", color: "colorTextPrimaryStrongest" }, _pressed: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimary", color: "colorTextPrimary" }, _pressed_hover: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimaryStronger", color: "colorTextPrimaryStronger" }, _pressed_active: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimaryStrongest", color: "colorTextPrimaryStrongest" }, _pressed_focus: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowFocusShadowBorder", color: "colorTextPrimary" }, _pressed_disabled: { backgroundColor: "colorBackgroundStrong", boxShadow: "shadowBorderWeaker", color: "colorTextWeakest" } };
var DestructiveSecondaryToggleStyles = { transition: "background-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in", color: "colorTextError", backgroundColor: "colorBackgroundBody", _disabled: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeaker", color: "colorTextWeaker" }, _hover: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderError", color: "colorTextError" }, _active: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderErrorStrongest", color: "colorTextErrorStrongest" }, _pressed: { backgroundColor: "colorBackgroundErrorWeakest", boxShadow: "shadowBorderError", color: "colorTextError" }, _pressed_hover: { backgroundColor: "colorBackgroundErrorWeakest", boxShadow: "shadowBorderErrorStronger", color: "colorTextErrorStronger" }, _pressed_active: { backgroundColor: "colorBackgroundErrorWeakest", boxShadow: "shadowBorderError", color: "colorTextError" }, _pressed_focus: { backgroundColor: "colorBackgroundErrorWeakest", boxShadow: "shadowFocusShadowBorder", color: "colorTextError" }, _pressed_disabled: { backgroundColor: "colorBackgroundStrong", boxShadow: "shadowBorderWeaker", color: "colorTextWeakest" } };
var ToggleIconButtonStyles = { transition: "background-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in", color: "colorTextIcon", backgroundColor: "colorBackgroundBody", _hover: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimary", color: "colorTextPrimaryStronger" }, _active: { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimaryStrongest", color: "colorTextPrimaryStrongest" }, _disabled: { backgroundColor: "colorBackgroundBody", color: "colorTextWeaker" }, _pressed: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimary", color: "colorTextPrimary" }, _pressed_hover: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimaryStronger", color: "colorTextPrimaryStronger" }, _pressed_focus: { backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowFocusShadowBorder", color: "colorTextPrimary" }, _pressed_disabled: { backgroundColor: "colorBackgroundStrong", boxShadow: "shadowBorderWeaker", color: "colorTextWeakest" } };
var defaultStyles = (0, import_deepmerge2.default)(BaseStyles.default, { color: "colorTextInverse", backgroundColor: "colorBackgroundDestructive", boxShadow: "shadowBorderDestructive", _hover: { color: "colorTextDestructive", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderDestructive" }, _focus: { boxShadow: "shadowFocus" }, _active: { color: "colorTextDestructive", backgroundColor: "colorBackgroundDestructiveWeakest", boxShadow: "shadowBorderDestructive" } });
var loadingStyles = (0, import_deepmerge2.default)(BaseStyles.loading, { color: "colorTextDestructive", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak" });
var disabledStyles = (0, import_deepmerge2.default)(BaseStyles.disabled, { color: "colorTextWeakest", backgroundColor: "colorBackgroundStrong", boxShadow: "shadowBorderWeaker" });
var ButtonStyleMapping = { default: defaultStyles, loading: loadingStyles, disabled: disabledStyles };
var DestructiveButton = React12.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React12.createElement(import_box10.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box10.safelySpreadBoxProps)(props), ...ButtonStyleMapping[buttonState], ...SizeStyles[size] }));
DestructiveButton.defaultProps = { as: "button" };
DestructiveButton.displayName = "DestructiveButton";
var import_deepmerge32 = __toESM2(require_cjs2());
var defaultStyles2 = (0, import_deepmerge32.default)(BaseStyles.default, { color: "colorTextDestructive", _hover: { color: "colorTextDestructiveStrongest" }, _active: { color: "colorTextDestructiveStrongest" } });
var loadingStyles2 = (0, import_deepmerge32.default)(BaseStyles.loading, { color: "colorTextDestructive" });
var disabledStyles2 = (0, import_deepmerge32.default)(BaseStyles.disabled, { color: "colorTextWeaker" });
var ButtonStyleMapping2 = { default: defaultStyles2, loading: loadingStyles2, disabled: disabledStyles2 };
var DestructiveIconButton = React23.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React23.createElement(import_box11.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box11.safelySpreadBoxProps)(props), ...ButtonStyleMapping2[buttonState], ...SizeStyles[size] }));
DestructiveIconButton.defaultProps = { as: "button" };
DestructiveIconButton.displayName = "DestructiveIconButton";
var import_deepmerge4 = __toESM2(require_cjs2());
var defaultStyles3 = (0, import_deepmerge4.default)(BaseStyles.default, { color: "colorTextLinkDestructive", textAlign: "left", transition: "none", _hover: { color: "colorTextLinkDestructiveStrongest", textDecoration: "underline" }, _active: { color: "colorTextLinkDestructiveStrongest", textDecoration: "underline" } });
var loadingStyles3 = (0, import_deepmerge4.default)(BaseStyles.loading, { color: "colorTextLinkDestructive", textAlign: "left", _hover: { color: "colorTextLinkDestructiveStronger" }, _active: { color: "colorTextLinkDestructiveStronger" }, _focus: { color: "colorTextLinkDestructiveStronger" } });
var disabledStyles3 = (0, import_deepmerge4.default)(BaseStyles.disabled, { color: "colorTextWeaker", textAlign: "left", _hover: { color: "colorTextLinkDestructiveWeak" }, _active: { color: "colorTextLinkDestructiveWeak" }, _focus: { color: "colorTextLinkDestructiveWeak" } });
var ButtonStyleMapping3 = { default: defaultStyles3, loading: loadingStyles3, disabled: disabledStyles3 };
var DestructiveLinkButton = React34.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React34.createElement(import_box12.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box12.safelySpreadBoxProps)(props), ...ButtonStyleMapping3[buttonState], ...SizeStyles[size] }));
DestructiveLinkButton.defaultProps = { as: "a" };
DestructiveLinkButton.displayName = "DestructiveLinkButton";
var import_deepmerge5 = __toESM2(require_cjs2());
var defaultStyles4 = (0, import_deepmerge5.default)(BaseStyles.default, { color: "colorTextDestructive", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak", _hover: { color: "colorTextDestructive", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderDestructive" }, _focus: { boxShadow: "shadowFocusShadowBorder" }, _active: { color: "colorTextDestructive", backgroundColor: "colorBackgroundDestructiveWeakest", boxShadow: "shadowBorderDestructive" } });
var baseLoadingStyles = { color: "colorTextDestructive", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak" };
var loadingStyles4 = (0, import_deepmerge5.default)(BaseStyles.loading, { ...baseLoadingStyles, _hover: baseLoadingStyles, _active: baseLoadingStyles, _focus: baseLoadingStyles });
var baseDisabledStyles = { color: "colorTextWeaker", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeaker" };
var disabledStyles4 = (0, import_deepmerge5.default)(BaseStyles.disabled, { ...baseDisabledStyles, _hover: baseDisabledStyles, _active: baseDisabledStyles, _focus: baseDisabledStyles });
var ButtonStyleMapping4 = { default: defaultStyles4, loading: loadingStyles4, disabled: disabledStyles4 };
var DestructiveSecondaryButton = React43.forwardRef(({ size, buttonState, fullWidth, pressed, ...props }, ref) => {
  let toggleStyles = pressed === void 0 ? {} : DestructiveSecondaryToggleStyles;
  return React43.createElement(import_box13.Box, { ref, width: fullWidth ? "100%" : "auto", "aria-pressed": pressed, ...(0, import_box13.safelySpreadBoxProps)(props), ...ButtonStyleMapping4[buttonState], ...toggleStyles, ...SizeStyles[size] });
});
DestructiveSecondaryButton.defaultProps = { as: "button" };
DestructiveSecondaryButton.displayName = "DestructiveSecondaryButton";
var import_deepmerge6 = __toESM2(require_cjs2());
var defaultStyles5 = (0, import_deepmerge6.default)(BaseStyles.default, { color: "colorTextInverse", backgroundColor: "colorBackgroundInverse", boxShadow: "shadowBorderInverseWeaker", _hover: { color: "colorTextInverse", backgroundColor: "colorBackgroundInverseStrong", boxShadow: "shadowBorderInverseStronger" }, _focus: { boxShadow: "shadowFocusInverse" }, _active: { color: "colorTextInverse", backgroundColor: "colorBackgroundInverseStrong", boxShadow: "shadowBorderInverseStrongest" } });
var loadingStyles5 = (0, import_deepmerge6.default)(BaseStyles.loading, { color: "colorTextInverse", backgroundColor: "colorBackgroundInverseStrong", boxShadow: "shadowBorderInverseWeaker" });
var disabledStyles5 = (0, import_deepmerge6.default)(BaseStyles.disabled, { color: "colorTextInverseWeakest", backgroundColor: "colorBackgroundInverseStrong", boxShadow: "shadowBorderInverseWeakest" });
var ButtonStyleMapping5 = { default: defaultStyles5, loading: loadingStyles5, disabled: disabledStyles5 };
var InverseButton = React52.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React52.createElement(import_box14.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box14.safelySpreadBoxProps)(props), ...ButtonStyleMapping5[buttonState], ...SizeStyles[size] }));
InverseButton.defaultProps = { as: "button" };
InverseButton.displayName = "InverseButton";
var import_deepmerge7 = __toESM2(require_cjs2());
var defaultStyles6 = (0, import_deepmerge7.default)(BaseStyles.default, { color: "colorTextInverse", textAlign: "left", transition: "none", _hover: { color: "colorTextInverseWeaker", textDecoration: "underline" }, _focus: { boxShadow: "shadowFocusInverse" }, _active: { color: "colorTextInverseWeaker", textDecoration: "underline" } });
var loadingStyles6 = (0, import_deepmerge7.default)(BaseStyles.loading, { color: "colorTextInverse", textAlign: "left" });
var disabledStyles6 = (0, import_deepmerge7.default)(BaseStyles.disabled, { color: "colorTextInverseWeakest", textAlign: "left" });
var ButtonStyleMapping6 = { default: defaultStyles6, loading: loadingStyles6, disabled: disabledStyles6 };
var InverseLinkButton = React62.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React62.createElement(import_box15.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box15.safelySpreadBoxProps)(props), ...ButtonStyleMapping6[buttonState], ...SizeStyles[size] }));
InverseLinkButton.defaultProps = { as: "a" };
InverseLinkButton.displayName = "InverseLinkButton";
var import_deepmerge8 = __toESM2(require_cjs2());
var defaultStyles7 = (0, import_deepmerge8.default)(BaseStyles.default, { color: "colorTextPrimary", textAlign: "left", transition: "none", _hover: { color: "colorTextPrimaryStrongest", textDecoration: "underline" }, _active: { color: "colorTextPrimaryStrongest", textDecoration: "underline" } });
var loadingStyles7 = (0, import_deepmerge8.default)(BaseStyles.loading, { color: "colorTextPrimary", textAlign: "left" });
var disabledStyles7 = (0, import_deepmerge8.default)(BaseStyles.disabled, { color: "colorTextWeaker", textAlign: "left" });
var ButtonStyleMapping7 = { default: defaultStyles7, loading: loadingStyles7, disabled: disabledStyles7 };
var LinkButton = React72.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React72.createElement(import_box16.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box16.safelySpreadBoxProps)(props), ...ButtonStyleMapping7[buttonState], ...SizeStyles[size] }));
LinkButton.defaultProps = { as: "a" };
LinkButton.displayName = "LinkButton";
var import_deepmerge9 = __toESM2(require_cjs2());
var defaultStyles8 = (0, import_deepmerge9.default)(BaseStyles.default, { color: "colorTextInverse", backgroundColor: "colorBackgroundPrimary", boxShadow: "shadowBorderPrimary", _hover: { color: "colorTextPrimary", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimary" }, _focus: { boxShadow: "shadowFocus" }, _active: { color: "colorTextPrimaryStrong", backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimaryStrong" } });
var loadingStyles8 = (0, import_deepmerge9.default)(BaseStyles.loading, { color: "colorTextPrimary", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak" });
var disabledStyles8 = (0, import_deepmerge9.default)(BaseStyles.disabled, { color: "colorTextWeakest", backgroundColor: "colorBackgroundStrong", boxShadow: "shadowBorderWeaker" });
var ButtonStyleMapping8 = { default: defaultStyles8, loading: loadingStyles8, disabled: disabledStyles8 };
var PrimaryButton = React82.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React82.createElement(import_box17.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box17.safelySpreadBoxProps)(props), ...ButtonStyleMapping8[buttonState], ...SizeStyles[size] }));
PrimaryButton.defaultProps = { as: "button" };
PrimaryButton.displayName = "PrimaryButton";
var import_deepmerge10 = __toESM2(require_cjs2());
var defaultStyles9 = (0, import_deepmerge10.default)(BaseStyles.default, { color: "colorTextPrimary", _hover: { color: "colorTextPrimaryStrongest" }, _active: { color: "colorTextPrimaryStrongest" } });
var loadingStyles9 = (0, import_deepmerge10.default)(BaseStyles.loading, { color: "colorTextPrimary" });
var disabledStyles9 = (0, import_deepmerge10.default)(BaseStyles.disabled, { color: "colorTextWeaker" });
var ButtonStyleMapping9 = { default: defaultStyles9, loading: loadingStyles9, disabled: disabledStyles9 };
var PrimaryIconButton = React92.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React92.createElement(import_box18.Box, { ref, width: fullWidth ? "100%" : "auto", ...(0, import_box18.safelySpreadBoxProps)(props), ...ButtonStyleMapping9[buttonState], ...SizeStyles[size] }));
PrimaryIconButton.defaultProps = { as: "button" };
PrimaryIconButton.displayName = "PrimaryIconButton";
var import_deepmerge11 = __toESM2(require_cjs2());
var defaultStyles10 = (0, import_deepmerge11.default)(BaseStyles.default, { fontWeight: "inherit", color: "inherit" });
var loadingStyles10 = (0, import_deepmerge11.default)(BaseStyles.loading, { fontSize: "inherit", fontWeight: "inherit" });
var disabledStyles10 = (0, import_deepmerge11.default)(BaseStyles.disabled, { fontSize: "inherit", fontWeight: "inherit" });
var ButtonStyleMapping10 = { default: defaultStyles10, loading: loadingStyles10, disabled: disabledStyles10 };
var ResetButton = React102.forwardRef(({ size, buttonState, fullWidth, ...props }, ref) => React102.createElement(import_box19.Box, { ref, width: fullWidth ? "100%" : "auto", ...ButtonStyleMapping10[buttonState], ...SizeStyles[size], ...props }));
ResetButton.defaultProps = { as: "button" };
ResetButton.displayName = "ResetButton";
var import_deepmerge12 = __toESM2(require_cjs2());
var defaultStyles11 = (0, import_deepmerge12.default)(BaseStyles.default, { color: "colorText", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak", _hover: { color: "colorTextPrimary", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderPrimary" }, _focus: { boxShadow: "shadowFocusShadowBorder" }, _active: { color: "colorTextPrimaryStrong", backgroundColor: "colorBackgroundPrimaryWeakest", boxShadow: "shadowBorderPrimaryStrong" } });
var baseLoadingStyles2 = { color: "colorTextPrimary", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeak" };
var loadingStyles11 = (0, import_deepmerge12.default)(BaseStyles.loading, { ...baseLoadingStyles2, _hover: baseLoadingStyles2, _active: baseLoadingStyles2, _focus: baseLoadingStyles2 });
var baseDisabledStyles2 = { color: "colorTextWeaker", backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeaker" };
var disabledStyles11 = (0, import_deepmerge12.default)(BaseStyles.disabled, { ...baseDisabledStyles2, _hover: baseDisabledStyles2, _active: baseDisabledStyles2, _focus: baseDisabledStyles2, _pressed: { backgroundColor: "colorBackgroundStrong", color: "colorTextWeak", boxShadow: "none" }, _pressed_hover: { backgroundColor: "colorBackgroundStrong", color: "colorTextWeak", boxShadow: "none" } });
var ButtonStyleMapping11 = { default: defaultStyles11, loading: loadingStyles11, disabled: disabledStyles11 };
var SecondaryButton = React112.forwardRef(({ size, buttonState, fullWidth, pressed, ...props }, ref) => {
  let toggleStyles = pressed === void 0 ? {} : ToggleStyles;
  return React112.createElement(import_box20.Box, { ref, width: fullWidth ? "100%" : "auto", "aria-pressed": pressed, ...(0, import_box20.safelySpreadBoxProps)(props), ...ButtonStyleMapping11[buttonState], ...toggleStyles, ...SizeStyles[size] });
});
SecondaryButton.defaultProps = { as: "button" };
SecondaryButton.displayName = "SecondaryButton";
var import_deepmerge13 = __toESM2(require_cjs2());
var defaultStyles12 = (0, import_deepmerge13.default)(BaseStyles.default, { color: "colorTextIcon", _hover: { color: "colorTextPrimaryStrongest" }, _active: { color: "colorTextPrimaryStrongest" } });
var loadingStyles12 = (0, import_deepmerge13.default)(BaseStyles.loading, { color: "colorTextPrimary" });
var disabledStyles12 = (0, import_deepmerge13.default)(BaseStyles.disabled, { color: "colorTextWeaker", _pressed: { backgroundColor: "colorBackgroundStrong", color: "colorTextWeak" }, _pressed_hover: { backgroundColor: "colorBackgroundStrong", color: "colorTextWeak" } });
var ButtonStyleMapping12 = { default: defaultStyles12, loading: loadingStyles12, disabled: disabledStyles12 };
var SecondaryIconButton = React122.forwardRef(({ size, buttonState, fullWidth, pressed, ...props }, ref) => {
  let toggleStyles = pressed === void 0 ? {} : ToggleIconButtonStyles;
  return React122.createElement(import_box21.Box, { ref, "aria-pressed": pressed, width: fullWidth ? "100%" : "auto", ...(0, import_box21.safelySpreadBoxProps)(props), ...toggleStyles, ...ButtonStyleMapping12[buttonState], ...SizeStyles[size] });
});
SecondaryIconButton.defaultProps = { as: "button" };
SecondaryIconButton.displayName = "SecondaryIconButton";
var AnimatedBox = (0, import_animation_library.animated)(import_box9.Box);
var getButtonSize = (variant, children, size) => {
  let smartSize = "default";
  return size != null ? smartSize = size : variant === "link" || variant === "destructive_link" || variant === "reset" ? smartSize = "reset" : React13.Children.count(children) === 1 && React13.Children.forEach(children, (child) => {
    React13.isValidElement(child) && typeof child.type.displayName == "string" && child.type.displayName.includes("Icon") && (smartSize = "icon");
  }), smartSize;
};
var getButtonState = (disabled, loading) => disabled ? "disabled" : loading ? "loading" : "default";
var handlePropValidation = ({ as, href, tabIndex, variant, size, fullWidth, children, disabled, loading, pressed }) => {
  let hasHref = href != null && href !== "", hasTabIndex = tabIndex != null;
  if (as !== "a" && hasHref)
    throw new Error(`[Paste: Button] You cannot pass href into a button without the 'a' tag.  Use 'as="a"'.`);
  if (as === "a") {
    if (!hasHref)
      throw new Error("[Paste: Button] Missing href prop for link button.");
    if (variant === "link" || variant === "inverse_link")
      throw new Error("[Paste: Button] Using Button component as an Anchor. Use the Paste Anchor component instead.");
    if (variant !== "primary" && variant !== "secondary" && variant !== "reset" && variant !== "inverse")
      throw new Error('[Paste: Button] <Button as="a"> only works with the following variants: primary and secondary.');
    if (disabled || loading)
      throw new Error('[Paste: Button] <Button as="a"> cannot be disabled or loading.');
  }
  if (variant === "reset" && size !== "reset")
    throw new Error('[Paste: Button] The "RESET" variant can only be used with the "RESET" size.');
  if ((size === "icon" || size === "icon_small" || size === "circle" || size === "circle_small") && fullWidth)
    throw new Error("[Paste: Button] Icon buttons should not be fullWidth.");
  if (children == null)
    throw new Error("[Paste: Button] Must have non-null children.");
  if (hasTabIndex && !(tabIndex === 0 || tabIndex === -1))
    throw new Error("[Paste: Button] tabIndex must be 0 or -1.");
  if (pressed && !(variant === "secondary" || variant === "secondary_icon" || variant === "destructive_secondary"))
    throw new Error('[Paste: Button] pressed can only be used with "secondary" and "secondary_icon" and "destructive_secondary" variants.');
};
var variantsWithoutBoundingBox = /* @__PURE__ */ new Set(["link", "destructive_link", "inverse_link", "reset"]);
var ButtonContents = ({ buttonState, children, showLoading, variant }) => {
  let buttonVariantHasBoundingBox = variant && variantsWithoutBoundingBox.has(variant);
  return React13.createElement(React13.Fragment, null, React13.createElement(import_box9.Box, { as: "span", display: "flex", textDecoration: "inherit", opacity: buttonState === "loading" ? "0" : "1", justifyContent: buttonVariantHasBoundingBox ? null : "center", columnGap: "space20", alignItems: "center", width: "100%" }, children), showLoading ? React13.createElement(import_box9.Box, { as: "span", position: "absolute", top: 0, right: 0, bottom: 0, left: 0, display: "flex", justifyContent: "center", alignItems: "center", lineHeight: "lineHeight30" }, React13.createElement(Spinner, { decorative: true, delay: 0 })) : null);
};
ButtonContents.displayName = "ButtonContents";
var getButtonComponent = (variant) => {
  switch (variant) {
    case "primary_icon":
      return PrimaryIconButton;
    case "secondary":
      return SecondaryButton;
    case "secondary_icon":
      return SecondaryIconButton;
    case "destructive":
      return DestructiveButton;
    case "destructive_icon":
      return DestructiveIconButton;
    case "destructive_secondary":
      return DestructiveSecondaryButton;
    case "link":
      return LinkButton;
    case "destructive_link":
      return DestructiveLinkButton;
    case "reset":
      return ResetButton;
    case "inverse":
      return InverseButton;
    case "inverse_link":
      return InverseLinkButton;
    case "primary":
    default:
      return PrimaryButton;
  }
};
var Button = React13.forwardRef(({ element = "BUTTON", i18nExternalLinkLabel = "(link takes you to an external page)", ...props }, ref) => {
  let { size, variant, children, disabled, loading, ...rest } = props, [hovered, setHovered] = React13.useState(false), arrowIconStyles = (0, import_animation_library.useSpring)({ translateX: hovered ? "4px" : "0px", config: { mass: 0.1, tension: 275, friction: 16 } }), smartDefaultSize = React13.useMemo(() => getButtonSize(variant, children, size), [size, variant, children]);
  handlePropValidation({ ...props, size: smartDefaultSize });
  let buttonState = getButtonState(disabled, loading), showLoading = buttonState === "loading", showDisabled = buttonState !== "default", ButtonComponent = getButtonComponent(variant), externalLinkProps = props.href != null ? secureExternalLink(props.href) : null, injectIconChildren = children;
  return props.as === "a" && props.href != null && typeof children == "string" && variant !== "reset" && (injectIconChildren = React13.createElement(React13.Fragment, null, children, externalLinkProps != null ? React13.createElement(import_LinkExternalIcon2.LinkExternalIcon, { decorative: false, title: i18nExternalLinkLabel }) : React13.createElement(AnimatedBox, { style: arrowIconStyles }, React13.createElement(import_ArrowForwardIcon.ArrowForwardIcon, { decorative: true })))), React13.createElement(ButtonComponent, { ...externalLinkProps, ...rest, onMouseEnter: (event) => {
    typeof rest.onMouseEnter == "function" && rest.onMouseEnter(event), setHovered(true);
  }, onMouseLeave: (event) => {
    typeof rest.onMouseLeave == "function" && rest.onMouseLeave(event), setHovered(false);
  }, buttonState, disabled: showDisabled, element, variant, size: smartDefaultSize, "aria-busy": buttonState === "loading" ? "true" : "false", ref }, React13.createElement(ButtonContents, { buttonState, showLoading, variant }, injectIconChildren));
});
Button.defaultProps = { as: "button", fullWidth: false, disabled: false, loading: false, type: "button", variant: "primary" };
Button.displayName = "Button";

// src/ChatComposerAttachmentCard.tsx
var import_ClearIcon = require("@twilio-paste/icons/cjs/ClearIcon");

// ../../layout/media-object/dist/index.es.js
var import_box22 = require("@twilio-paste/box");
var React14 = __toESM(require("react"));
var import_box23 = require("@twilio-paste/box");
var React24 = __toESM(require("react"));
var import_box24 = require("@twilio-paste/box");
var React35 = __toESM(require("react"));
var MediaObject = React14.forwardRef(({ as = "span", children, element = "MEDIA_OBJECT", marginBottom, marginTop, verticalAlign: verticalAlign2 = "top", ...props }, ref) => React14.createElement(import_box22.Box, { ...(0, import_box22.safelySpreadBoxProps)(props), alignItems: verticalAlign2 === "top" ? "flex-start" : "center", as, display: "flex", element, marginBottom, marginTop, ref }, children));
MediaObject.displayName = "MediaObject";
var MediaFigure = React24.forwardRef(({ align = "start", as = "span", children, element = "MEDIA_FIGURE", spacing = "space0", ...props }, ref) => React24.createElement(import_box23.Box, { ...(0, import_box23.safelySpreadBoxProps)(props), as, display: "flex", element, flexShrink: 0, marginLeft: align === "end" ? spacing : void 0, marginRight: align === "start" ? spacing : void 0, ref }, children));
MediaFigure.displayName = "MediaFigure";
var MediaBody = React35.forwardRef(({ as = "span", children, element = "MEDIA_BODY", ...props }, ref) => React35.createElement(import_box24.Box, { ...(0, import_box24.safelySpreadBoxProps)(props), as, element, flex: 1, minWidth: "size0", ref }, children));
MediaBody.displayName = "MediaBody";

// ../screen-reader-only/dist/index.es.js
var import_box25 = require("@twilio-paste/box");
var React15 = __toESM(require("react"));
var ScreenReaderOnly = React15.forwardRef(({ as = "span", children, ...props }, ref) => React15.createElement(import_box25.Box, { ...props, as, border: "none", clip: "rect(0 0 0 0)", height: "1px", margin: "spaceNegative10", overflow: "hidden", padding: "space0", position: "absolute", ref, textTransform: "none", whiteSpace: "nowrap", width: "1px" }, children));
ScreenReaderOnly.displayName = "ScreenReaderOnly";

// ../../layout/stack/dist/index.es.js
var import_box26 = require("@twilio-paste/box");
var React16 = __toESM(require("react"));
var getStackDisplay = (orientation) => Array.isArray(orientation) ? orientation.map((value) => value === "horizontal" ? "flex" : "block") : orientation === "horizontal" ? "flex" : "block";
var getStackStyles = (orientation) => ({ display: getStackDisplay(orientation), alignItems: "center", flexWrap: "wrap" });
var getStackChildMargins = (orientation, spacing) => {
  let styles = {};
  if (Array.isArray(orientation)) {
    let marginRight = [], marginBottom = [];
    orientation.forEach((value, i) => {
      marginRight[i] = value === "horizontal" ? spacing : "space0", marginBottom[i] = value === "horizontal" ? "space0" : spacing;
    }), styles = { marginRight, marginBottom };
  }
  return orientation === "horizontal" && (styles = { marginRight: spacing }), orientation === "vertical" && (styles = { marginBottom: spacing }), styles;
};
var Stack = React16.forwardRef(({ children, orientation, spacing, element = "STACK", ...props }, ref) => {
  let [childrenCount, validChildren] = React16.useMemo(() => {
    let filteredChildren = React16.Children.toArray(children).filter((child) => React16.isValidElement(child) || typeof child == "string");
    return [filteredChildren.length, filteredChildren];
  }, [children]), stackStyles = React16.useMemo(() => getStackStyles(orientation), [orientation]), childMargins = React16.useMemo(() => getStackChildMargins(orientation, spacing), [orientation, spacing]), keySeed = useUIDSeed2();
  return React16.createElement(import_box26.Box, { element, ...(0, import_box26.safelySpreadBoxProps)(props), ...stackStyles, ref }, validChildren.map((child, index) => React16.createElement(import_box26.Box, { element: `${element}_CHILD`, ...childrenCount !== index + 1 ? childMargins : null, key: keySeed(`stack-${index}`) }, child)));
});
Stack.displayName = "Stack";

// src/ChatComposerAttachmentCard.tsx
var React17 = __toESM(require("react"));
var closeButtonBackgroundStyles = {
  backgroundColor: "colorBackgroundBody",
  borderRadius: "borderRadiusCircle",
  width: "12px",
  height: "12px",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
};
var ChatComposerAttachmentCard = React17.forwardRef(
  ({
    children,
    onDismiss,
    i18nDismissLabel = "Remove attachment",
    element = "CHAT_COMPOSER_ATTACHMENT_CARD",
    attachmentIcon,
    ...props
  }, ref) => {
    const { isDisabled } = React17.useContext(ChatComposerContext);
    return /* @__PURE__ */ React17.createElement(
      import_box27.Box,
      {
        ...(0, import_box27.safelySpreadBoxProps)(props),
        ref,
        paddingY: "space30",
        paddingX: "space40",
        borderStyle: "solid",
        borderColor: "colorBorderWeaker",
        borderRadius: "borderRadius30",
        borderWidth: "borderWidth10",
        boxShadow: "shadowLow",
        position: "relative",
        display: "inline-block",
        width: "100%",
        element
      },
      /* @__PURE__ */ React17.createElement(MediaObject, { as: "div", ref, verticalAlign: "center", element: `${element}_MEDIA_OBJECT` }, /* @__PURE__ */ React17.createElement(MediaFigure, { as: "div", spacing: "space30" }, /* @__PURE__ */ React17.createElement(import_box27.Box, { color: "colorTextIcon", element: `${element}_ICON` }, attachmentIcon)), /* @__PURE__ */ React17.createElement(MediaBody, { as: "div", element: `${element}_BODY` }, /* @__PURE__ */ React17.createElement(Stack, { orientation: "vertical", spacing: "space10" }, children))),
      onDismiss && /* @__PURE__ */ React17.createElement(
        import_box27.Box,
        {
          position: "absolute",
          top: "space0",
          right: "space0",
          transform: "translate(50%, -50%)",
          ...closeButtonBackgroundStyles
        },
        /* @__PURE__ */ React17.createElement(
          Button,
          {
            "aria-disabled": isDisabled,
            disabled: isDisabled,
            element: `${element}_REMOVE_BUTTON`,
            variant: "secondary_icon",
            size: "reset",
            onClick: onDismiss
          },
          /* @__PURE__ */ React17.createElement(import_ClearIcon.ClearIcon, { decorative: true }),
          /* @__PURE__ */ React17.createElement(ScreenReaderOnly, null, i18nDismissLabel)
        )
      )
    );
  }
);
ChatComposerAttachmentCard.displayName = "ChatComposerAttachmentCard";

// ../../primitives/text/dist/index.es.js
var import_styling_library5 = require("@twilio-paste/styling-library");
var React18 = __toESM(require("react"));
var import_styling_library6 = require("@twilio-paste/styling-library");
var import_style_props = require("@twilio-paste/style-props");
var __create3 = Object.create;
var __defProp3 = Object.defineProperty;
var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames3 = Object.getOwnPropertyNames;
var __getProtoOf3 = Object.getPrototypeOf;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __commonJS3 = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps3 = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames3(from))
      !__hasOwnProp3.call(to, key) && key !== except && __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
  return to;
};
var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_cjs3 = __commonJS3({ "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
  "use strict";
  var isMergeableObject = function(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value == "object";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol == "function" && Symbol.for, REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
  }
  function defaultArrayMerge(target, source2, options) {
    return target.concat(source2).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key, options) {
    if (!options.customMerge)
      return deepmerge;
    var customMerge = options.customMerge(key);
    return typeof customMerge == "function" ? customMerge : deepmerge;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return target.propertyIsEnumerable(symbol);
    }) : [];
  }
  function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property) {
    try {
      return property in object;
    } catch {
      return false;
    }
  }
  function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
  }
  function mergeObject(target, source2, options) {
    var destination = {};
    return options.isMergeableObject(target) && getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    }), getKeys(source2).forEach(function(key) {
      propertyIsUnsafe(target, key) || (propertyIsOnObject(target, key) && options.isMergeableObject(source2[key]) ? destination[key] = getMergeFunction(key, options)(target[key], source2[key], options) : destination[key] = cloneUnlessOtherwiseSpecified(source2[key], options));
    }), destination;
  }
  function deepmerge(target, source2, options) {
    options = options || {}, options.arrayMerge = options.arrayMerge || defaultArrayMerge, options.isMergeableObject = options.isMergeableObject || isMergeableObject, options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source2), targetIsArray = Array.isArray(target), sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    return sourceAndTargetTypesMatch ? sourceIsArray ? options.arrayMerge(target, source2, options) : mergeObject(target, source2, options) : cloneUnlessOtherwiseSpecified(source2, options);
  }
  deepmerge.all = function(array, options) {
    if (!Array.isArray(array))
      throw new Error("first argument should be an array");
    return array.reduce(function(prev, next) {
      return deepmerge(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge;
  module2.exports = deepmerge_1;
} });
var customStyleProps = { color: { property: "color", scale: "textColors" }, cursor: true, outline: true, transition: true, transitionDelay: true, textDecoration: true, textTransform: true, whiteSpace: true, wordBreak: true, wordWrap: true, fontVariantNumeric: true, textOverflow: true, overflowWrap: true, listStyleType: true, listStylePosition: true, listStyleImage: true };
var PseudoPropStyles = { _hover: "&:hover", _active: "&:active, &[data-active=true]", _focus: "&:focus", _visited: "&:visited", _even: "&:nth-of-type(even)", _odd: "&:nth-of-type(odd)", _disabled: "&:disabled, &:disabled:focus, &:disabled:hover, &[aria-disabled=true], &[aria-disabled=true]:focus, &[aria-disabled=true]:hover", _checked: "&:checked, &[aria-checked=true]", _mixed: "&:indeterminate, &[aria-checked=mixed]", _selected: "&[aria-selected=true]", _selected_hover: "&[aria-selected=true]:hover", _selected_focus: "&[aria-selected=true]:focus", _selected_focusVisible: "&[aria-selected=true]:focus-visible", _invalid: "&:invalid, &[aria-invalid=true]", _pressed: "&[aria-pressed=true]", _readOnly: "&[aria-readonly=true], &[readonly]", _first: "&:first-of-type", _last: "&:last-of-type", _expanded: "&[aria-expanded=true]", _grabbed: "&[aria-grabbed=true]", _notFirst: "&:not(:first-of-type)", _notLast: "&:not(:last-of-type)", _before: "&:before", _after: "&:after", _focusWithin: "&:focus-within" };
var import_deepmerge14 = __toESM3(require_cjs3());
var PasteStyleProps = (0, import_styling_library6.system)(customStyleProps);
var getPseudoStyles = (props) => {
  let pseudoProps = Object.keys(props).filter((propName) => propName.startsWith("_"));
  if (pseudoProps.length === 0)
    return {};
  let pseudoStyles = {};
  return pseudoProps.forEach((pseudoProp) => {
    PseudoPropStyles[pseudoProp] != null && (pseudoStyles[PseudoPropStyles[pseudoProp]] = props[pseudoProp]);
  }), (0, import_styling_library6.css)(pseudoStyles);
};
var getCustomElementStyles = (props) => {
  if (props != null && props.theme != null && props.theme.elements != null) {
    let themeElements = props.theme.elements, targetElement = props["data-paste-element"];
    if (themeElements[targetElement] != null) {
      let elementOverrides = themeElements[targetElement], computedStyles = (0, import_styling_library6.css)(elementOverrides)(props), { variants, ...elementStyles } = computedStyles, variantStyles = {};
      return props.variant != null && variants != null && variants[props.variant] != null && (variantStyles = variants[props.variant]), () => (0, import_deepmerge14.default)(elementStyles, variantStyles);
    }
  }
  return {};
};
var TEXT_PROPS_TO_BLOCK = [...import_style_props.SHADOW_PROPS, ...import_style_props.SPACE_PROPS, ...import_style_props.TYPOGRAPHY_PROPS, ...import_style_props.OVERFLOW_PROPS, ...Object.keys(PseudoPropStyles), "display", "verticalAlign", "className", "style"];
var safelySpreadTextProps = (props) => Object.keys(props).reduce((newProps, key) => (TEXT_PROPS_TO_BLOCK.includes(key) || (newProps[key] = props[key]), newProps), {});
var coreVersionNumberPlaceholder = "20.15.0";
var shouldForwardProp = (0, import_styling_library5.createShouldForwardProp)([...import_styling_library5.props, ...Object.keys({ ...customStyleProps, ...PseudoPropStyles })]);
var StyledText = (0, import_styling_library5.styled)("div", { shouldForwardProp })({ margin: 0, padding: 0 }, (0, import_styling_library5.compose)(import_styling_library5.boxShadow, import_styling_library5.display, import_styling_library5.overflow, import_styling_library5.position, import_styling_library5.space, import_styling_library5.typography, import_styling_library5.verticalAlign, PasteStyleProps), getPseudoStyles, getCustomElementStyles);
var Text = React18.forwardRef(({ children, color = "colorText", fontSize = "fontSize30", lineHeight = "lineHeight30", element = "TEXT", ...props }, ref) => React18.createElement(StyledText, { "data-paste-element": element, "data-paste-core-version": coreVersionNumberPlaceholder, ref, color, fontSize, lineHeight, ...props }, children));
Text.displayName = "Text";

// src/ChatComposerAttachmentDescription.tsx
var React19 = __toESM(require("react"));
var ChatComposerAttachmentDescription = React19.forwardRef(
  ({ children, element = "CHAT_COMPOSER_ATTACHMENT_DESCRIPTION", ...props }, ref) => {
    return /* @__PURE__ */ React19.createElement(
      Text,
      {
        ...safelySpreadTextProps(props),
        element,
        ref,
        as: "div",
        fontSize: "fontSize20",
        color: "colorTextWeak",
        lineHeight: "lineHeight20"
      },
      children
    );
  }
);
ChatComposerAttachmentDescription.displayName = "ChatComposerAttachmentDescription";

// ../truncate/dist/index.es.js
var import_box28 = require("@twilio-paste/box");
var React20 = __toESM(require("react"));
var Truncate = React20.forwardRef(({ children, ...props }, ref) => React20.createElement(import_box28.Box, { ...props, as: "span", display: "inline-block", verticalAlign: "bottom", textDecoration: "inherit", maxWidth: "100%", overflow: "hidden", ref, textOverflow: "ellipsis", whiteSpace: "nowrap" }, children));
Truncate.displayName = "Truncate";

// src/ChatComposerAttachmentLink.tsx
var React21 = __toESM(require("react"));
var ChatComposerAttachmentLink = React21.forwardRef(
  ({ children, href, element = "CHAT_COMPOSER_ATTACHMENT_LINK", ...props }, ref) => {
    return /* @__PURE__ */ React21.createElement(Anchor, { href, ref, element, variant: "default", ...props }, /* @__PURE__ */ React21.createElement(Truncate, { title: children }, children));
  }
);
ChatComposerAttachmentLink.displayName = "ChatComposerAttachmentLink";
