// src/Toast.tsx
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { NeutralIcon } from "@twilio-paste/icons/esm/NeutralIcon";
import { SuccessIcon } from "@twilio-paste/icons/esm/SuccessIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
import { MediaBody, MediaFigure, MediaObject } from "@twilio-paste/media-object";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React5 from "react";

// src/ErrorToast.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import * as React from "react";
var ErrorToast = React.forwardRef(({ element = "TOAST", variant, ...props }, ref) => {
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      ...safelySpreadBoxProps(props),
      ref,
      color: "colorTextError",
      width: ["100%", "size40", "size40"],
      backgroundColor: "colorBackgroundErrorWeakest",
      borderColor: "colorBorderErrorWeak",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant
    },
    props.children
  );
});
ErrorToast.displayName = "ErrorToast";

// src/NeutralToast.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React2 from "react";
var NeutralToast = React2.forwardRef(({ element = "TOAST", variant, ...props }, ref) => {
  return /* @__PURE__ */ React2.createElement(
    Box2,
    {
      ...safelySpreadBoxProps2(props),
      ref,
      color: "colorTextNeutral",
      width: ["100%", "size40", "size40"],
      backgroundColor: "colorBackgroundNeutralWeakest",
      borderColor: "colorBorderNeutralWeak",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant
    },
    props.children
  );
});
NeutralToast.displayName = "NeutralToast";

// src/SuccessToast.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React3 from "react";
var SuccessToast = React3.forwardRef(({ element = "TOAST", variant, ...props }, ref) => {
  return /* @__PURE__ */ React3.createElement(
    Box3,
    {
      ...safelySpreadBoxProps3(props),
      ref,
      color: "colorTextSuccess",
      width: ["100%", "size40", "size40"],
      backgroundColor: "colorBackgroundSuccessWeakest",
      borderColor: "colorBorderSuccessWeak",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant
    },
    props.children
  );
});
SuccessToast.displayName = "SuccessToast";

// src/WarningToast.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import * as React4 from "react";
var WarningToast = React4.forwardRef(({ element = "TOAST", variant, ...props }, ref) => {
  return /* @__PURE__ */ React4.createElement(
    Box4,
    {
      ...safelySpreadBoxProps4(props),
      ref,
      color: "colorTextWarningStrong",
      width: ["100%", "size40", "size40"],
      backgroundColor: "colorBackgroundWarningWeakest",
      borderColor: "colorBorderWarningWeak",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant
    },
    props.children
  );
});
WarningToast.displayName = "WarningToast";

// src/constants.ts
var ToastVariantObject = {
  ERROR: "error",
  NEUTRAL: "neutral",
  SUCCESS: "success",
  WARNING: "warning"
};

// src/Toast.tsx
var ToastComponentVariants = {
  error: ErrorToast,
  neutral: NeutralToast,
  success: SuccessToast,
  warning: WarningToast
};
var renderToastIcon = (variant, title, element) => {
  switch (variant) {
    case ToastVariantObject.ERROR:
      return /* @__PURE__ */ React5.createElement(
        ErrorIcon,
        {
          color: "colorTextIconError",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.SUCCESS:
      return /* @__PURE__ */ React5.createElement(
        SuccessIcon,
        {
          color: "colorTextIconSuccess",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.WARNING:
      return /* @__PURE__ */ React5.createElement(
        WarningIcon,
        {
          color: "colorTextIconWarning",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.NEUTRAL:
    default:
      return /* @__PURE__ */ React5.createElement(
        NeutralIcon,
        {
          color: "colorTextIconNeutral",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
  }
};
var Toast = React5.forwardRef(
  ({
    children,
    onDismiss,
    variant = "neutral",
    element = "TOAST",
    setFocus,
    i18nDismissLabel = "Dismiss toast",
    i18nErrorLabel = "(error)",
    i18nNeutralLabel = "(information)",
    i18nSuccessLabel = "(success)",
    i18nWarningLabel = "(warning)",
    ...props
  }, ref) => {
    const ToastComponent = ToastComponentVariants[variant];
    const buttonRef = React5.useRef(null);
    React5.useEffect(() => {
      if (setFocus && buttonRef.current) {
        buttonRef.current.focus({ preventScroll: true });
      }
    }, [setFocus]);
    const i18nVariants = {
      error: i18nErrorLabel,
      neutral: i18nNeutralLabel,
      success: i18nSuccessLabel,
      warning: i18nWarningLabel
    };
    return /* @__PURE__ */ React5.createElement(ToastComponent, { role: "status", variant, element, ref, ...props }, /* @__PURE__ */ React5.createElement(MediaObject, { as: "div" }, /* @__PURE__ */ React5.createElement(MediaFigure, { as: "div", spacing: "space60" }, renderToastIcon(variant, i18nVariants[variant], element)), /* @__PURE__ */ React5.createElement(MediaBody, { as: "div" }, children), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React5.createElement(MediaFigure, { align: "end", spacing: "space40" }, /* @__PURE__ */ React5.createElement(
      Button,
      {
        onClick: onDismiss,
        variant: "secondary_icon",
        ref: buttonRef,
        size: "reset",
        element: `${element}_CLOSE_BUTTON`
      },
      /* @__PURE__ */ React5.createElement(CloseIcon, { decorative: true, size: "sizeIcon20", element: `${element}_CLOSE_ICON` }),
      /* @__PURE__ */ React5.createElement(ScreenReaderOnly, null, i18nDismissLabel)
    ))));
  }
);
Toast.displayName = "Toast";

// src/ToastContainer.tsx
import { Stack } from "@twilio-paste/stack";
import * as React7 from "react";

// src/ToastPortal.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import { Portal } from "@twilio-paste/reakit-library";
import { StyledBase } from "@twilio-paste/theme";
import * as React6 from "react";
var ToastPortal = React6.forwardRef(({ children, left, ...props }, ref) => {
  return /* @__PURE__ */ React6.createElement(Portal, null, /* @__PURE__ */ React6.createElement(StyledBase, null, /* @__PURE__ */ React6.createElement(
    Box5,
    {
      ...safelySpreadBoxProps5(props),
      position: "fixed",
      right: "space40",
      top: "space90",
      left,
      zIndex: "zIndex90",
      ref
    },
    children
  )));
});
ToastPortal.displayName = "ToastPortal";

// src/ToastContainer.tsx
var ToastContainer = React7.forwardRef(({ children, ...props }, ref) => {
  return /* @__PURE__ */ React7.createElement(ToastPortal, { ...props }, /* @__PURE__ */ React7.createElement(Stack, { orientation: "vertical", spacing: "space40", ref }, children));
});
ToastContainer.displayName = "ToastContainer";

// src/Toaster.tsx
import { animated, useReducedMotion, useTransition } from "@twilio-paste/animation-library";
import { Box as Box6 } from "@twilio-paste/box";
import { useTheme } from "@twilio-paste/theme";
import * as React8 from "react";
var AnimatedToast = animated(Box6);
var Toaster = ({ toasts, pop, ...props }) => {
  const prefersReducedMotion = useReducedMotion();
  const [refMap] = React8.useState(() => /* @__PURE__ */ new WeakMap());
  const [returnTarget, setReturnTarget] = React8.useState({ trigger: null });
  const theme = useTheme();
  const transitions = useTransition(toasts, {
    from: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(100%) scale(1)",
      height: prefersReducedMotion ? "auto" : 0
    },
    enter: prefersReducedMotion ? { marginBottom: theme.space.space40, opacity: 1, transform: "translateX(0px) scale(1)" } : (item) => async (next) => {
      await next({
        marginBottom: theme.space.space40,
        opacity: 1,
        transform: "translateX(0px) scale(1)",
        height: refMap.get(item).offsetHeight
      });
    },
    leave: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(0px) scale(0.8)",
      height: prefersReducedMotion ? "auto" : 0
    },
    config: {
      mass: 1,
      tension: 150,
      friction: 20
    }
  });
  const clearReturnTarget = React8.useCallback(() => {
    setReturnTarget({ trigger: null });
  }, [returnTarget]);
  React8.useEffect(() => {
    if (returnTarget.trigger != null && toasts.length === 0) {
      returnTarget.trigger.focus();
      clearReturnTarget();
    }
  }, [toasts]);
  return /* @__PURE__ */ React8.createElement(ToastPortal, { ...props }, transitions((styles, item, state, index) => {
    return /* @__PURE__ */ React8.createElement(AnimatedToast, { as: "div", key: state.key, style: styles }, /* @__PURE__ */ React8.createElement(
      Toast,
      {
        key: item.id,
        ...item,
        onDismiss: () => {
          if (item.onDismiss != null) {
            item.onDismiss();
          }
          pop(item.id);
        },
        ref: (ref) => {
          if (ref != null) {
            refMap.set(item, ref);
          }
        },
        setFocus: index === 0,
        onFocus: (e) => {
          if (e.relatedTarget && !returnTarget.trigger) {
            setReturnTarget({ trigger: e.relatedTarget });
          }
        }
      },
      item.message
    ));
  }));
};
Toaster.displayName = "Toaster";

// src/useToaster.ts
import { uid } from "@twilio-paste/uid-library";
import * as React9 from "react";
var useToaster = () => {
  const isMounted = React9.useRef(null);
  const [toasts, setToasts] = React9.useState([]);
  React9.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
      toasts.forEach((toast) => {
        if (toast.timeOutId) {
          window.clearTimeout(toast.timeOutId);
        }
      });
    };
  }, []);
  const pop = (id) => {
    if (!isMounted.current) {
      return;
    }
    setToasts(
      (currentToasts) => currentToasts.filter((toast) => {
        if (toast.id === id) {
          if (toast.timeOutId) {
            window.clearTimeout(toast.timeOutId);
          }
          if (toast.onDismiss) {
            toast.onDismiss();
          }
        }
        return toast.id !== id;
      })
    );
  };
  const push = (newToast) => {
    if (!isMounted.current) {
      return;
    }
    const generatedID = uid(newToast);
    let timeOutId;
    if (newToast.dismissAfter != null && Number.isInteger(newToast.dismissAfter)) {
      timeOutId = window.setTimeout(pop, newToast.dismissAfter, newToast.id || generatedID);
    }
    setToasts((state) => {
      const existingToasts = state.map((toast) => {
        const tmpToast = toast;
        tmpToast.setFocus = false;
        return tmpToast;
      });
      return [{ id: generatedID, timeOutId, setFocus: true, ...newToast }, ...existingToasts];
    });
  };
  return { toasts, push, pop };
};
export {
  Toast,
  ToastContainer,
  Toaster,
  useToaster
};
