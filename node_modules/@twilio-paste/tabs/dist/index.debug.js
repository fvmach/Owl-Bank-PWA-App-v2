"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Tab: () => Tab,
  TabList: () => TabList,
  TabPanel: () => TabPanel,
  TabPanels: () => TabPanels,
  Tabs: () => Tabs,
  TabsContext: () => TabsContext,
  useTabState: () => import_tabs_primitive.useTabPrimitiveState
});
module.exports = __toCommonJS(src_exports);

// src/Tabs.tsx
var import_box = require("@twilio-paste/box");
var import_flex = require("@twilio-paste/flex");
var import_tabs_primitive = require("@twilio-paste/tabs-primitive");
var React3 = __toESM(require("react"));

// src/TabsContext.tsx
var React = __toESM(require("react"));
var TabsContext = React.createContext({});

// src/utils.ts
var import_react = __toESM(require("react"));
var getElementName = (orientation, fallback, elementName) => elementName != null ? elementName : `${orientation.toUpperCase()}_${fallback}`;
var useElementsOutOfBounds = () => {
  const [elementOutOBoundsLeft, setElementOutOfBoundsLeft] = import_react.default.useState(null);
  const [elementOutOBoundsRight, setElementOutOfBoundsRight] = import_react.default.useState(null);
  const determineElementsOutOfBounds = (scrollContainer, listContainer) => {
    if (scrollContainer && listContainer) {
      const currentScrollContainerRightPosition = scrollContainer?.getBoundingClientRect().right;
      const currentScrollContainerXOffset = scrollContainer?.getBoundingClientRect().x;
      let leftOutOfBounds = null;
      let rightOutOfBounds = null;
      listContainer.childNodes.forEach((tab) => {
        const { x, right } = tab.getBoundingClientRect();
        const isSpanningView = x < currentScrollContainerXOffset && right > currentScrollContainerRightPosition;
        if (!isSpanningView) {
          if (Math.round(x) < Math.round(currentScrollContainerXOffset - 28)) {
            leftOutOfBounds = tab;
          }
          if (Math.round(right) > Math.round(currentScrollContainerRightPosition + 28) && !rightOutOfBounds) {
            rightOutOfBounds = tab;
          }
        }
        setElementOutOfBoundsLeft(leftOutOfBounds);
        setElementOutOfBoundsRight(rightOutOfBounds);
      });
    }
  };
  return { elementOutOBoundsLeft, elementOutOBoundsRight, determineElementsOutOfBounds };
};
var useShowShadow = () => {
  const [showShadow, setShowShadow] = import_react.default.useState(false);
  let showShadowTimer;
  const handleShadow = () => {
    if (showShadowTimer) {
      window.clearTimeout(showShadowTimer);
    }
    setShowShadow(true);
    showShadowTimer = window.setTimeout(() => {
      setShowShadow(false);
    }, 500);
  };
  return { showShadow, handleShadow };
};
var handleScrollDirection = (direction, elementOutOBoundsLeft, elementOutOBoundsRight, scrollContainer) => {
  const elementToScrollTo = direction === "left" ? elementOutOBoundsLeft : elementOutOBoundsRight;
  if (scrollContainer && elementToScrollTo) {
    const elementRect = elementToScrollTo.getBoundingClientRect();
    const containerRect = scrollContainer.getBoundingClientRect();
    const containerScrollLeft = scrollContainer.scrollLeft;
    const newScrollLeft = containerScrollLeft + (elementRect.left - containerRect.left) - containerRect.width / 2 + elementRect.width / 2;
    scrollContainer.scrollTo({ left: newScrollLeft, behavior: "smooth" });
  }
};

// src/Tabs.tsx
var Tabs = React3.forwardRef(
  ({ children, element, orientation = "horizontal", state, variant, ...initialState }, ref) => {
    const { orientation: tabOrientation = orientation, ...tab } = state || (0, import_tabs_primitive.useTabPrimitiveState)({ orientation, ...initialState });
    const elementName = getElementName(tabOrientation, "TABS", element);
    const value = React3.useMemo(
      () => ({ ...tab, orientation: tabOrientation, variant }),
      [tab, tabOrientation, variant]
    );
    const returnValue = /* @__PURE__ */ React3.createElement(TabsContext.Provider, { value }, children);
    if (tabOrientation === "vertical") {
      return /* @__PURE__ */ React3.createElement(import_flex.Flex, { element: elementName, ref, wrap: false, vAlignContent: "stretch" }, returnValue);
    }
    return /* @__PURE__ */ React3.createElement(import_box.Box, { element: elementName }, returnValue);
  }
);
Tabs.displayName = "Tabs";

// src/TabList.tsx
var import_box3 = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var import_tabs_primitive2 = require("@twilio-paste/tabs-primitive");
var React5 = __toESM(require("react"));

// src/OverflowButton.tsx
var import_box2 = require("@twilio-paste/box");
var import_ChevronLeftIcon = require("@twilio-paste/icons/cjs/ChevronLeftIcon");
var import_ChevronRightIcon = require("@twilio-paste/icons/cjs/ChevronRightIcon");
var import_theme = require("@twilio-paste/theme");
var import_react2 = __toESM(require("react"));
var Styles = {
  color: "colorTextIcon",
  _hover: {
    color: "colorTextPrimaryStrongest",
    cursor: "pointer"
  }
};
var InverseStyles = {
  color: "colorTextIconInverse",
  _hover: {
    color: "colorTextInverse",
    cursor: "pointer"
  }
};
var OverflowButton = ({
  onClick,
  position,
  visible,
  element = "TAB_LIST",
  showShadow
}) => {
  const theme = (0, import_theme.useTheme)();
  const { variant } = import_react2.default.useContext(TabsContext);
  const isInverse = variant?.includes("inverse");
  const Chevron = position === "left" ? import_ChevronLeftIcon.ChevronLeftIcon : import_ChevronRightIcon.ChevronRightIcon;
  if (!visible)
    return null;
  const determineShadow = () => {
    if (showShadow) {
      if (position === "left")
        return isInverse ? theme.shadows.shadowLeftInverse : theme.shadows.shadowLeft;
      return isInverse ? theme.shadows.shadowRightInverse : theme.shadows.shadowRight;
    }
    return void 0;
  };
  return /* @__PURE__ */ import_react2.default.createElement(
    import_box2.Box,
    {
      onClick,
      "aria-hidden": true,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "sizeBase70",
      padding: "space20",
      boxShadow: determineShadow(),
      element: `${element}_OVERFLOW_BUTTON_${position.toUpperCase()}`,
      zIndex: "zIndex10",
      ...isInverse ? InverseStyles : Styles
    },
    /* @__PURE__ */ import_react2.default.createElement(Chevron, { decorative: true })
  );
};
OverflowButton.displayName = "OverflowButton";

// src/TabList.tsx
var StyledTabList = import_styling_library.styled.div(() => {
  return (0, import_styling_library.css)({
    overflowX: "auto",
    overflowY: "hidden",
    overflowScrolling: "touch",
    "@supports (-moz-appearance:none)": {
      paddingBottom: "0px",
      scrollbarWidth: "none"
    },
    "::-webkit-scrollbar": {
      height: 0
    },
    "::-webkit-scrollbar-track": {
      background: "transparent"
    }
  });
});
var HorizontalTabList = ({
  children,
  variant,
  element
}) => {
  const ref = React5.useRef(null);
  const { selectedId } = React5.useContext(TabsContext);
  const scrollableRef = React5.useRef(null);
  const isInverse = variant === "inverse" || variant === "inverse_fitted";
  const { determineElementsOutOfBounds, elementOutOBoundsLeft, elementOutOBoundsRight } = useElementsOutOfBounds();
  const { handleShadow, showShadow } = useShowShadow();
  const handleScrollEvent = () => {
    handleShadow();
    determineElementsOutOfBounds(scrollableRef.current, ref.current);
  };
  React5.useEffect(() => {
    if (ref.current && scrollableRef.current) {
      scrollableRef.current?.addEventListener("scroll", handleScrollEvent);
      window.addEventListener("resize", handleScrollEvent);
      determineElementsOutOfBounds(scrollableRef.current, ref.current);
    }
  }, [ref.current, scrollableRef.current]);
  React5.useEffect(() => {
    if (scrollableRef.current && selectedId) {
      const selectedTabEl = document.getElementById(selectedId);
      const scrollableWidth = scrollableRef.current.getBoundingClientRect().width;
      if (selectedTabEl && (selectedTabEl?.getBoundingClientRect().x < 0 || selectedTabEl?.getBoundingClientRect().right > scrollableWidth)) {
        const scrollLeft = selectedTabEl.getBoundingClientRect().x - scrollableRef.current.getBoundingClientRect().x;
        scrollableRef.current.scrollLeft += scrollLeft;
      }
    }
  }, [scrollableRef.current, selectedId]);
  React5.useEffect(() => {
    return () => {
      if (scrollableRef.current) {
        scrollableRef.current.removeEventListener("scroll", handleScrollEvent);
        window.removeEventListener("resize", handleScrollEvent);
      }
    };
  }, []);
  return /* @__PURE__ */ React5.createElement(import_box3.Box, { display: "flex", overflow: "hidden" }, /* @__PURE__ */ React5.createElement(
    OverflowButton,
    {
      position: "left",
      onClick: () => handleScrollDirection("left", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
      visible: Boolean(elementOutOBoundsLeft),
      element,
      showShadow
    }
  ), /* @__PURE__ */ React5.createElement(import_box3.Box, { as: StyledTabList, ref: scrollableRef, flexGrow: 1, element: `${element}_SCROLL_WRAPPER` }, /* @__PURE__ */ React5.createElement(
    import_box3.Box,
    {
      ref,
      position: "relative",
      whiteSpace: "nowrap",
      element,
      display: "flex",
      columnGap: "space20",
      paddingTop: "1px",
      boxShadow: isInverse ? "shadowBorderBottomInverseWeakerInset" : "shadowBorderBottomWeakInset",
      width: elementOutOBoundsRight || elementOutOBoundsLeft ? "max-content" : "auto"
    },
    children,
    /* @__PURE__ */ React5.createElement(
      import_box3.Box,
      {
        position: "absolute",
        width: "100%",
        height: "1px",
        backgroundColor: isInverse ? "colorBackgroundInverse" : "colorBackgroundBody",
        bottom: "-1px"
      }
    )
  )), /* @__PURE__ */ React5.createElement(
    OverflowButton,
    {
      position: "right",
      onClick: () => handleScrollDirection("right", elementOutOBoundsLeft, elementOutOBoundsRight, scrollableRef.current),
      visible: Boolean(elementOutOBoundsRight),
      element,
      showShadow
    }
  ));
};
HorizontalTabList.displayName = "HorizontalTabList";
var VerticalTabList = ({
  children,
  element,
  variant
}) => {
  const isInverse = variant === "inverse" || variant === "inverse_fitted";
  return /* @__PURE__ */ React5.createElement(
    import_box3.Box,
    {
      element,
      marginRight: "space110",
      minWidth: "size20",
      maxWidth: "size40",
      borderRightStyle: "solid",
      borderRightWidth: "borderWidth10",
      borderRightColor: isInverse ? "colorBorderInverseWeaker" : "colorBorderWeak"
    },
    children
  );
};
VerticalTabList.displayName = "VerticalTabList";
var TabList = React5.forwardRef(({ children, element, variant, ...props }, ref) => {
  const tab = React5.useContext(TabsContext);
  const { orientation } = tab;
  const elementName = getElementName(orientation, "TAB_LIST", element);
  const TabListWrapper = orientation === "vertical" ? VerticalTabList : HorizontalTabList;
  return /* @__PURE__ */ React5.createElement(import_tabs_primitive2.TabPrimitiveList, { ...tab, as: import_box3.Box, ...props, element: elementName, ref }, /* @__PURE__ */ React5.createElement(TabListWrapper, { variant: variant || tab.variant, element: `${elementName}_CHILD` }, children));
});
TabList.displayName = "TabList";

// src/Tab.tsx
var import_box4 = require("@twilio-paste/box");
var import_tabs_primitive3 = require("@twilio-paste/tabs-primitive");
var React6 = __toESM(require("react"));
var getTabBoxStyles = (orientation, variant) => {
  const isInverse = variant === "inverse" || variant === "inverse_fitted" || variant === "inverse_full_width";
  const isFitted = variant === "fitted" || variant === "inverse_fitted" || variant === "full_width" || variant === "inverse_full_width";
  switch (orientation) {
    case "vertical":
      return {
        color: isInverse ? "colorTextInverseWeak" : "colorTextWeak",
        display: "block",
        marginBottom: "space30",
        paddingBottom: "space30",
        paddingLeft: "space50",
        paddingRight: "space50",
        paddingTop: "space30",
        _last: {
          marginBottom: "space0"
        },
        _selected: {
          color: isInverse ? "colorTextInverse" : "colorTextLink"
        },
        _hover: {
          color: isInverse ? "colorTextInverse" : "colorTextLinkStronger",
          boxShadow: isInverse ? "shadowBorderRightInverseStrong" : "none"
        },
        _disabled: {
          borderLeftColor: "transparent",
          color: isInverse ? "colorTextInverseWeakest" : "colorTextWeaker",
          boxShadow: "none"
        },
        _disabled_focus: {
          boxShadow: "none"
        },
        _focus: {
          boxShadow: isInverse ? "shadowFocusInverseInset" : "shadowFocusInset",
          outline: "none",
          borderTopLeftRadius: "borderRadius30",
          borderBottomLeftRadius: "borderRadius30"
        },
        _selected_after: {
          content: '" "',
          position: "absolute",
          height: "80%",
          width: "4px",
          backgroundColor: isInverse ? "colorBackgroundInverseStrongest" : "colorBackgroundPrimary",
          borderTopLeftRadius: "borderRadius30",
          borderBottomLeftRadius: "borderRadius30",
          right: -1,
          top: "10%"
        },
        _selected_hover: {
          boxShadow: "none"
        },
        _selected_hover_after: {
          content: '" "',
          position: "absolute",
          height: "80%",
          width: "4px",
          backgroundColor: isInverse ? "colorBackgroundPrimary" : "colorBackgroundPrimaryStrongest",
          borderTopLeftRadius: "borderRadius30",
          borderBottomLeftRadius: "borderRadius30",
          right: -1,
          top: "10%"
        },
        _focus_selected_after: {
          display: "none"
        },
        _focus_selected_hover_after: {
          display: "none"
        },
        _disabled_focus_after: {
          content: '" "',
          position: "absolute",
          height: "80%",
          width: "4px",
          backgroundColor: isInverse ? "colorBackgroundInverseStronger" : "colorBackgroundStrong",
          borderTopLeftRadius: "borderRadius30",
          borderBottomLeftRadius: "borderRadius30",
          right: -1,
          top: "10%"
        }
      };
    case "horizontal":
    default:
      return {
        color: isInverse ? "colorTextInverseWeak" : "colorTextWeak",
        borderColor: "transparent",
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        borderBottomWidth: "borderWidth20",
        borderTopLeftRadius: "borderRadius30",
        borderTopRightRadius: "borderRadius30",
        display: "inline-block",
        flexBasis: isFitted ? "50%" : void 0,
        flexGrow: isFitted ? 1 : void 0,
        flexShrink: isFitted ? 1 : void 0,
        minWidth: "sizeSquare130",
        paddingY: "space30",
        paddingX: "space50",
        textAlign: "center",
        bottom: "-1px",
        _selected: {
          borderColor: isInverse ? "colorBorderInverse" : "colorBorderWeak",
          borderBottomColor: isInverse ? "colorBorderInverseWeakest" : "colorBorderWeakest",
          color: isInverse ? "colorTextInverse" : "colorTextPrimary",
          boxShadow: isInverse ? "shadowBorderTopInverseStrongest" : "shadowBorderTopPrimary",
          backgroundColor: isInverse ? "colorBackgroundInverse" : "colorBackgroundBody"
        },
        _disabled: {
          borderBottomColor: "transparent",
          color: isInverse ? "colorTextInverseWeakest" : "colorTextWeaker"
        },
        _hover: {
          color: isInverse ? "colorTextInverse" : "colorTextPrimaryStrongest",
          borderBottomColor: isInverse ? "colorBorderInverseStrong" : "transparent"
        },
        _selected_hover: {
          color: isInverse ? "colorTextInverse" : "colorTextPrimaryStronger",
          borderBottomColor: "transparent",
          boxShadow: isInverse ? "shadowBorderTopPrimary" : "shadowBorderTopPrimaryStrongest"
        },
        _focus: {
          outline: "none",
          borderColor: "colorBorderPrimary",
          boxShadow: "shadowFocusInset",
          borderBottomColor: "colorBorderPrimary"
        },
        _selected_focus: {
          borderStyle: "solid",
          boxShadow: "shadowFocusInset",
          color: isInverse ? "colorTextInverse" : "colorTextPrimary",
          borderColor: "colorBorderPrimary"
        },
        _disabled_focus: {
          borderColor: isInverse ? "colorBorderInverseWeaker" : "colorBorderWeak",
          boxShadow: "none",
          borderBottom: "none",
          overflow: "clip"
        }
      };
  }
};
var Tab = React6.forwardRef(({ children, element, ...tabProps }, ref) => {
  const tab = React6.useContext(TabsContext);
  const boxStyles = React6.useMemo(() => getTabBoxStyles(tab.orientation, tab.variant), [tab.orientation, tab.variant]);
  const { orientation, variant } = tab;
  const elementName = getElementName(orientation, "TAB", element);
  return /* @__PURE__ */ React6.createElement(
    import_tabs_primitive3.TabPrimitive,
    {
      ...tab,
      ...tabProps,
      orientation: orientation === "vertical" ? void 0 : "horizontal",
      ref
    },
    (props) => {
      return /* @__PURE__ */ React6.createElement(
        import_box4.Box,
        {
          ...(0, import_box4.safelySpreadBoxProps)(props),
          ...boxStyles,
          as: "span",
          cursor: props["aria-disabled"] ? "not-allowed" : "pointer",
          element: elementName,
          fontSize: "fontSize30",
          lineHeight: "lineHeight30",
          fontWeight: "fontWeightMedium",
          overflow: orientation !== "vertical" ? "hidden" : void 0,
          position: "relative",
          textOverflow: orientation !== "vertical" ? "ellipsis" : void 0,
          transition: "border-color 100ms ease, color 100ms ease",
          whiteSpace: orientation !== "vertical" ? "nowrap" : void 0,
          minWidth: variant === "fitted" || variant === "inverse_fitted" ? "auto" : "fit-content"
        },
        children
      );
    }
  );
});
Tab.displayName = "Tab";

// src/TabPanels.tsx
var import_box5 = require("@twilio-paste/box");
var React7 = __toESM(require("react"));
var TabPanels = React7.forwardRef(({ children, element, ...props }, ref) => {
  const { orientation } = React7.useContext(TabsContext);
  const elementName = getElementName(orientation, "TAB_PANELS", element);
  return /* @__PURE__ */ React7.createElement(import_box5.Box, { ...(0, import_box5.safelySpreadBoxProps)(props), element: elementName, width: "100%", ref }, children);
});
TabPanels.displayName = "TabPanels";

// src/TabPanel.tsx
var import_box6 = require("@twilio-paste/box");
var import_tabs_primitive4 = require("@twilio-paste/tabs-primitive");
var React8 = __toESM(require("react"));
var TabPanel = React8.forwardRef(
  ({ children, element, paddingTop = "space60", ...props }, ref) => {
    const tab = React8.useContext(TabsContext);
    const elementName = getElementName(tab.orientation, "TAB_PANEL", element);
    return /* @__PURE__ */ React8.createElement(
      import_tabs_primitive4.TabPrimitivePanel,
      {
        ...tab,
        paddingTop,
        borderRadius: "borderRadius20",
        _focusVisible: {
          boxShadow: "shadowFocusInset",
          outline: "none"
        },
        ...props,
        element: elementName,
        as: import_box6.Box,
        ref
      },
      children
    );
  }
);
TabPanel.displayName = "TabPanel";
