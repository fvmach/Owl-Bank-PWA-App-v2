import type { BoxProps } from "@twilio-paste/box";
import type { TabPrimitiveProps } from "@twilio-paste/tabs-primitive";
import type { HTMLPasteProps } from "@twilio-paste/types";
import * as React from "react";
export interface TabProps extends HTMLPasteProps<"div"> {
    /**
     * Same as the HTML attribute.
     *
     * @type {TabPrimitiveProps["id"]}
     * @memberof TabProps
     */
    id?: TabPrimitiveProps["id"];
    /**
     * When an element is disabled, it may still be focusable. It works similarly to readOnly on form elements. In this case, only aria-disabled will be set.
     *
     * @type {TabPrimitiveProps["focusable"]}
     * @memberof TabProps
     */
    focusable?: TabPrimitiveProps["focusable"];
    /**
     * Same as HTML attribute.
     *
     * @type {TabPrimitiveProps["disabled"]}
     * @memberof TabProps
     */
    disabled?: TabPrimitiveProps["disabled"];
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider.
     *
     * @default "HORIZONTAL_TAB" or "VERTICAL_TAB"
     * @type {BoxProps["element"]}
     * @memberof TabProps
     */
    element?: BoxProps["element"];
    children: React.ReactNode;
    "aria-disabled"?: TabPrimitiveProps["aria-disabled"];
}
declare const Tab: React.ForwardRefExoticComponent<TabProps & React.RefAttributes<HTMLDivElement>>;
export { Tab };
//# sourceMappingURL=Tab.d.ts.map