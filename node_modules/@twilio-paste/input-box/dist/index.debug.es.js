// src/InputBox.tsx
import * as React7 from "react";

// src/FauxInput/index.tsx
import * as React3 from "react";

// src/FauxInput/DefaultFauxInput.tsx
import { Box } from "@twilio-paste/box";
import * as React from "react";
var DefaultFauxInput = React.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundBody";
    let boxShadow = "shadowBorder";
    let boxShadowHover = "shadowBorderPrimary";
    let boxShadowActive = "shadowBorderPrimaryStronger";
    if (disabled && type !== "hidden") {
      boxShadow = "shadowBorderWeak";
      boxShadowHover = "shadowBorderWeak";
      backgroundColor = "colorBackground";
      boxShadowActive = "shadowBorderWeak";
    } else if (readOnly && type !== "hidden") {
      boxShadowHover = "shadowBorder";
      backgroundColor = "colorBackground";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderError";
      boxShadowHover = "shadowBorderErrorStronger";
    } else if (type === "hidden") {
      boxShadow = null;
      boxShadowHover = null;
      backgroundColor = null;
      boxShadowActive = null;
    }
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          boxShadow: disabled ? boxShadow : "shadowFocusShadowBorder"
        },
        _active: {
          boxShadow: boxShadowActive
        }
      },
      children
    );
  }
);
DefaultFauxInput.displayName = "DefaultFauxInput";

// src/FauxInput/InverseFauxInput.tsx
import { Box as Box2 } from "@twilio-paste/box";
import * as React2 from "react";
var InverseFauxInput = React2.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundInverse";
    let boxShadow = "shadowBorderInverse";
    let boxShadowHover = "shadowBorderInverseStrongest";
    if (disabled && type !== "hidden") {
      backgroundColor = "colorBackgroundInverse";
      boxShadow = "shadowBorderInverseWeaker";
      boxShadowHover = "shadowBorderInverseWeaker";
    } else if (readOnly && type !== "hidden") {
      backgroundColor = "colorBackgroundInverseStrong";
      boxShadowHover = "shadowBorderInverse";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderErrorWeak";
    } else if (type === "hidden") {
      backgroundColor = null;
      boxShadow = null;
      boxShadowHover = null;
    }
    return /* @__PURE__ */ React2.createElement(
      Box2,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        color: "colorTextInverse",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          backgroundColor: "colorBackgroundInverse",
          boxShadow: disabled ? boxShadow : "shadowFocusInverse"
        },
        _active: {
          boxShadow: boxShadowHover
        }
      },
      children
    );
  }
);
InverseFauxInput.displayName = "InverseFauxInput";

// src/FauxInput/index.tsx
var FauxInputVariants = {
  default: DefaultFauxInput,
  inverse: InverseFauxInput
};
var FieldWrapper = React3.forwardRef(
  ({ children, disabled, element, hasError, readOnly, type, variant = "default" }, ref) => {
    const FieldWrapperComponent = FauxInputVariants[variant];
    return /* @__PURE__ */ React3.createElement(
      FieldWrapperComponent,
      {
        disabled,
        element,
        hasError,
        readOnly,
        type,
        variant,
        ref
      },
      children
    );
  }
);
FieldWrapper.displayName = "FieldWrapper";

// src/InputBoxContext.tsx
import * as React4 from "react";
var InputBoxContext = React4.createContext(null);
var useInputBoxContext = () => {
  const context = React4.useContext(InputBoxContext);
  if (!context) {
    throw new Error("useInputBoxContext must be used within a <InputBox> component.");
  }
  return context;
};

// src/Prefix.tsx
import { Box as Box3 } from "@twilio-paste/box";
import * as React5 from "react";
var Prefix = React5.forwardRef(
  ({ children, disabled, element = "PREFIX", variant }, ref) => {
    let backgroundColor = "colorBackgroundWeak";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverse";
      borderColor = "colorBorderInverse";
    } else if (disabled) {
      backgroundColor = "none";
      borderColor = "colorBorderWeaker";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React5.createElement(
      Box3,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomLeftRadius: "borderRadius20",
        borderRightColor: borderColor,
        borderRightStyle: "solid",
        borderRightWidth: "borderWidth10",
        borderTopLeftRadius: "borderRadius20",
        display: "flex",
        element: `${element}_PREFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Prefix.displayName = "Prefix";

// src/Suffix.tsx
import { Box as Box4 } from "@twilio-paste/box";
import * as React6 from "react";
var Suffix = React6.forwardRef(
  ({ children, disabled, element = "SUFFIX", variant }, ref) => {
    let backgroundColor = "colorBackgroundWeak";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverse";
      borderColor = "colorBorderInverse";
    } else if (disabled) {
      backgroundColor = "none";
      borderColor = "colorBorderWeaker";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React6.createElement(
      Box4,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomRightRadius: "borderRadius20",
        borderLeftColor: borderColor,
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth10",
        borderTopRightRadius: "borderRadius20",
        display: "flex",
        element: `${element}_SUFFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Suffix.displayName = "Suffix";

// src/InputBox.tsx
var InputBox = React7.forwardRef(
  ({
    children,
    disabled = false,
    readOnly = false,
    element = "INPUT_BOX",
    hasError,
    insertAfter,
    insertBefore,
    type,
    variant = "default",
    ...props
  }, ref) => /* @__PURE__ */ React7.createElement(InputBoxContext.Provider, { value: { disabled, readOnly, variant } }, /* @__PURE__ */ React7.createElement(
    FieldWrapper,
    {
      disabled,
      element,
      hasError,
      readOnly,
      type,
      variant,
      ref,
      ...props
    },
    insertBefore && /* @__PURE__ */ React7.createElement(Prefix, { disabled, element, variant }, insertBefore),
    children,
    insertAfter && /* @__PURE__ */ React7.createElement(Suffix, { disabled, element, variant }, insertAfter)
  ))
);
InputBox.displayName = "InputBox";

// src/InputChevronWrapper.tsx
import { Box as Box5 } from "@twilio-paste/box";
import * as React8 from "react";
var getChevronWrapperState = (disabled, readOnly) => disabled ? "disabled" : readOnly ? "readOnly" : "default";
var IconColors = {
  default: {
    default: "colorTextIcon",
    disabled: "colorTextWeaker",
    readOnly: "colorTextWeaker"
  },
  inverse: {
    default: "colorTextIconInverse",
    disabled: "colorTextInverseWeakest",
    readOnly: "colorTextInverseWeakest"
  }
};
var getInputChevronIconColor = (variant = "default", disabled = false, readOnly = false) => {
  return IconColors[variant][getChevronWrapperState(disabled, readOnly)];
};
var BackgroundColorStyles = {
  default: {
    default: "colorBackground",
    disabled: "colorBackground",
    readOnly: "colorBackground"
  },
  inverse: {
    default: "colorBackgroundInverseStrong",
    disabled: "colorBackgroundInverse",
    readOnly: "colorBackgroundInverseStrong"
  }
};
var InputChevronWrapper = React8.forwardRef(
  ({ children, element = "CHEVRON_WRAPPER" }, ref) => {
    const { disabled, readOnly, variant } = useInputBoxContext();
    return /* @__PURE__ */ React8.createElement(
      Box5,
      {
        backgroundColor: BackgroundColorStyles[variant][getChevronWrapperState(disabled, readOnly)],
        borderRadius: "borderRadius20",
        cursor: "pointer",
        alignItems: "center",
        display: "inline-flex",
        position: "absolute",
        pointerEvents: "none",
        right: "space30",
        top: "50%",
        transform: "translateY(-50%)",
        zIndex: "zIndex10",
        element,
        ref
      },
      children
    );
  }
);
InputChevronWrapper.displayName = "InputChevronWrapper";
export {
  InputBox,
  InputChevronWrapper,
  Prefix,
  Suffix,
  getInputChevronIconColor
};
