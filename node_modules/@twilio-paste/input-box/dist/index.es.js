import*as React7 from"react";import*as React3 from"react";import{Box}from"@twilio-paste/box";import*as React from"react";var DefaultFauxInput=React.forwardRef(({disabled,element,hasError,readOnly,children,type,variant},ref)=>{let backgroundColor="colorBackgroundBody",boxShadow="shadowBorder",boxShadowHover="shadowBorderPrimary",boxShadowActive="shadowBorderPrimaryStronger";return disabled&&type!=="hidden"?(boxShadow="shadowBorderWeak",boxShadowHover="shadowBorderWeak",backgroundColor="colorBackground",boxShadowActive="shadowBorderWeak"):readOnly&&type!=="hidden"?(boxShadowHover="shadowBorder",backgroundColor="colorBackground"):hasError&&type!=="hidden"?(boxShadow="shadowBorderError",boxShadowHover="shadowBorderErrorStronger"):type==="hidden"&&(boxShadow=null,boxShadowHover=null,backgroundColor=null,boxShadowActive=null),React.createElement(Box,{element,ref,display:"flex",width:"100%",backgroundColor,boxShadow,borderRadius:"borderRadius20",transition:"box-shadow 100ms ease-in",cursor:disabled?"not-allowed":"text",variant,_hover:{boxShadow:boxShadowHover},_focusWithin:{boxShadow:disabled?boxShadow:"shadowFocusShadowBorder"},_active:{boxShadow:boxShadowActive}},children)});DefaultFauxInput.displayName="DefaultFauxInput";import{Box as Box2}from"@twilio-paste/box";import*as React2 from"react";var InverseFauxInput=React2.forwardRef(({disabled,element,hasError,readOnly,children,type,variant},ref)=>{let backgroundColor="colorBackgroundInverse",boxShadow="shadowBorderInverse",boxShadowHover="shadowBorderInverseStrongest";return disabled&&type!=="hidden"?(backgroundColor="colorBackgroundInverse",boxShadow="shadowBorderInverseWeaker",boxShadowHover="shadowBorderInverseWeaker"):readOnly&&type!=="hidden"?(backgroundColor="colorBackgroundInverseStrong",boxShadowHover="shadowBorderInverse"):hasError&&type!=="hidden"?boxShadow="shadowBorderErrorWeak":type==="hidden"&&(backgroundColor=null,boxShadow=null,boxShadowHover=null),React2.createElement(Box2,{element,ref,display:"flex",width:"100%",backgroundColor,boxShadow,borderRadius:"borderRadius20",color:"colorTextInverse",transition:"box-shadow 100ms ease-in",cursor:disabled?"not-allowed":"text",variant,_hover:{boxShadow:boxShadowHover},_focusWithin:{backgroundColor:"colorBackgroundInverse",boxShadow:disabled?boxShadow:"shadowFocusInverse"},_active:{boxShadow:boxShadowHover}},children)});InverseFauxInput.displayName="InverseFauxInput";var FauxInputVariants={default:DefaultFauxInput,inverse:InverseFauxInput},FieldWrapper=React3.forwardRef(({children,disabled,element,hasError,readOnly,type,variant="default"},ref)=>{let FieldWrapperComponent=FauxInputVariants[variant];return React3.createElement(FieldWrapperComponent,{disabled,element,hasError,readOnly,type,variant,ref},children)});FieldWrapper.displayName="FieldWrapper";import*as React4 from"react";var InputBoxContext=React4.createContext(null),useInputBoxContext=()=>{let context=React4.useContext(InputBoxContext);if(!context)throw new Error("useInputBoxContext must be used within a <InputBox> component.");return context};import{Box as Box3}from"@twilio-paste/box";import*as React5 from"react";var Prefix=React5.forwardRef(({children,disabled,element="PREFIX",variant},ref)=>{let backgroundColor="colorBackgroundWeak",borderColor="colorBorderWeaker";return disabled&&variant==="inverse"?(backgroundColor="none",borderColor="colorBorderInverseWeaker"):variant==="inverse"?(backgroundColor="colorBackgroundInverse",borderColor="colorBorderInverse"):disabled&&(backgroundColor="none",borderColor="colorBorderWeaker"),children==null?null:React5.createElement(Box3,{alignItems:"flex-start",backgroundColor,borderBottomLeftRadius:"borderRadius20",borderRightColor:borderColor,borderRightStyle:"solid",borderRightWidth:"borderWidth10",borderTopLeftRadius:"borderRadius20",display:"flex",element:`${element}_PREFIX`,lineHeight:"lineHeight20",padding:"space30",variant,ref},children)});Prefix.displayName="Prefix";import{Box as Box4}from"@twilio-paste/box";import*as React6 from"react";var Suffix=React6.forwardRef(({children,disabled,element="SUFFIX",variant},ref)=>{let backgroundColor="colorBackgroundWeak",borderColor="colorBorderWeaker";return disabled&&variant==="inverse"?(backgroundColor="none",borderColor="colorBorderInverseWeaker"):variant==="inverse"?(backgroundColor="colorBackgroundInverse",borderColor="colorBorderInverse"):disabled&&(backgroundColor="none",borderColor="colorBorderWeaker"),children==null?null:React6.createElement(Box4,{alignItems:"flex-start",backgroundColor,borderBottomRightRadius:"borderRadius20",borderLeftColor:borderColor,borderLeftStyle:"solid",borderLeftWidth:"borderWidth10",borderTopRightRadius:"borderRadius20",display:"flex",element:`${element}_SUFFIX`,lineHeight:"lineHeight20",padding:"space30",variant,ref},children)});Suffix.displayName="Suffix";var InputBox=React7.forwardRef(({children,disabled=!1,readOnly=!1,element="INPUT_BOX",hasError,insertAfter,insertBefore,type,variant="default",...props},ref)=>React7.createElement(InputBoxContext.Provider,{value:{disabled,readOnly,variant}},React7.createElement(FieldWrapper,{disabled,element,hasError,readOnly,type,variant,ref,...props},insertBefore&&React7.createElement(Prefix,{disabled,element,variant},insertBefore),children,insertAfter&&React7.createElement(Suffix,{disabled,element,variant},insertAfter))));InputBox.displayName="InputBox";import{Box as Box5}from"@twilio-paste/box";import*as React8 from"react";var getChevronWrapperState=(disabled,readOnly)=>disabled?"disabled":readOnly?"readOnly":"default",IconColors={default:{default:"colorTextIcon",disabled:"colorTextWeaker",readOnly:"colorTextWeaker"},inverse:{default:"colorTextIconInverse",disabled:"colorTextInverseWeakest",readOnly:"colorTextInverseWeakest"}},getInputChevronIconColor=(variant="default",disabled=!1,readOnly=!1)=>IconColors[variant][getChevronWrapperState(disabled,readOnly)],BackgroundColorStyles={default:{default:"colorBackground",disabled:"colorBackground",readOnly:"colorBackground"},inverse:{default:"colorBackgroundInverseStrong",disabled:"colorBackgroundInverse",readOnly:"colorBackgroundInverseStrong"}},InputChevronWrapper=React8.forwardRef(({children,element="CHEVRON_WRAPPER"},ref)=>{let{disabled,readOnly,variant}=useInputBoxContext();return React8.createElement(Box5,{backgroundColor:BackgroundColorStyles[variant][getChevronWrapperState(disabled,readOnly)],borderRadius:"borderRadius20",cursor:"pointer",alignItems:"center",display:"inline-flex",position:"absolute",pointerEvents:"none",right:"space30",top:"50%",transform:"translateY(-50%)",zIndex:"zIndex10",element,ref},children)});InputChevronWrapper.displayName="InputChevronWrapper";export{InputBox,InputChevronWrapper,Prefix,Suffix,getInputChevronIconColor};
