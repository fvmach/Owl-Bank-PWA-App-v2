// src/Meter.tsx
import { Box } from "@twilio-paste/box";
import { useMeter } from "@twilio-paste/react-spectrum-library";
import { Text } from "@twilio-paste/text";
import * as React from "react";

// src/constants.ts
var LABEL_SUFFIX = "METER_LABEL";

// src/Meter.tsx
var Meter = React.forwardRef(
  ({ element = "METER", id, minLabel, maxLabel, ...props }, ref) => {
    const { value = 0, minValue = 0, maxValue = 100 } = props;
    let labelledBy = props["aria-labelledby"];
    if (labelledBy == null && props["aria-label"] == null && id != null) {
      labelledBy = `${id}${LABEL_SUFFIX}`;
    }
    const { meterProps } = useMeter({
      ...props,
      "aria-labelledby": labelledBy
    });
    const percentage = (value - minValue) / (maxValue - minValue);
    const fillWidth = `${Math.round(percentage * 100)}%`;
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        as: "div",
        ...meterProps,
        role: "meter",
        id,
        ref,
        width: "100%",
        position: "relative",
        element,
        "aria-labelledby": labelledBy
      },
      /* @__PURE__ */ React.createElement(
        Box,
        {
          height: "10px",
          backgroundColor: "colorBackgroundStrong",
          borderRadius: "borderRadiusPill",
          element: `${element}_BAR`
        },
        /* @__PURE__ */ React.createElement(
          Box,
          {
            width: fillWidth,
            height: "10px",
            backgroundColor: "colorBackgroundPrimaryStronger",
            borderTopLeftRadius: "borderRadiusPill",
            borderBottomLeftRadius: "borderRadiusPill",
            borderTopRightRadius: fillWidth === "100%" ? "borderRadiusPill" : "borderRadius10",
            borderBottomRightRadius: fillWidth === "100%" ? "borderRadiusPill" : "borderRadius10",
            element: `${element}_FILL`
          }
        )
      ),
      (minLabel || maxLabel) && /* @__PURE__ */ React.createElement(
        Box,
        {
          display: "flex",
          flexDirection: "row",
          justifyContent: "space-between",
          columnGap: "space20",
          marginTop: "space20",
          "aria-hidden": "true",
          overflowWrap: "anywhere",
          element: `${element}_MIN_MAX_WRAPPER`
        },
        minLabel ? /* @__PURE__ */ React.createElement(Text, { as: "span", color: "colorTextWeak", fontWeight: "fontWeightNormal", element: `${element}_MIN` }, minLabel) : /* @__PURE__ */ React.createElement("span", null),
        maxLabel ? /* @__PURE__ */ React.createElement(
          Text,
          {
            as: "span",
            color: "colorTextWeak",
            fontWeight: "fontWeightNormal",
            textAlign: "end",
            element: `${element}_MAX`
          },
          maxLabel
        ) : /* @__PURE__ */ React.createElement("span", null)
      )
    );
  }
);
Meter.displayName = "Meter";

// src/MeterLabel.tsx
import { Box as Box2 } from "@twilio-paste/box";
import { Label } from "@twilio-paste/label";
import { Text as Text2 } from "@twilio-paste/text";
import * as React2 from "react";
var MeterLabel = React2.forwardRef(
  ({ element = "METER_LABEL", children, htmlFor, valueLabel, ...labelProps }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      Box2,
      {
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "flex-end",
        element: `${element}_WRAPPER`
      },
      /* @__PURE__ */ React2.createElement(Label, { ...labelProps, as: "div", element, id: `${htmlFor}${LABEL_SUFFIX}`, ref }, children),
      valueLabel && /* @__PURE__ */ React2.createElement(
        Text2,
        {
          as: "span",
          fontWeight: "fontWeightSemibold",
          textAlign: "end",
          marginBottom: "space20",
          marginLeft: "space20",
          "aria-hidden": "true",
          element: `${element}_VALUE_LABEL`
        },
        valueLabel
      )
    );
  }
);
MeterLabel.displayName = "MeterLabel";
export {
  Meter,
  MeterLabel
};
