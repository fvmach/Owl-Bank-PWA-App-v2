"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  EditableCodeBlock: () => EditableCodeBlock,
  EditableCodeBlockHeader: () => EditableCodeBlockHeader,
  EditableCodeBlockWrapper: () => EditableCodeBlockWrapper
});
module.exports = __toCommonJS(src_exports);

// src/EditableCodeBlockWrapper.tsx
var import_box = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React = __toESM(require("react"));
var StyledEditableCodeBlockWrapper = (0, import_styling_library.styled)(import_box.Box)(
  (0, import_styling_library.css)({
    backgroundColor: "rgb(1, 22, 39)",
    borderRadius: "borderRadius20",
    overflow: "hidden"
  })
);
var EditableCodeBlockWrapper = React.forwardRef(
  ({ children, element = "EDITABLE_CODE_BLOCK_WRAPPER", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(StyledEditableCodeBlockWrapper, { ...(0, import_box.safelySpreadBoxProps)(props), element, ref }, children);
  }
);
EditableCodeBlockWrapper.displayName = "EditableCodeBlockWrapper";

// src/EditableCodeBlockHeader.tsx
var import_box2 = require("@twilio-paste/box");
var React2 = __toESM(require("react"));
var EditableCodeBlockHeader = React2.forwardRef(
  ({ children, element = "EDITABLE_CODE_BLOCK_HEADER", as = "h3", ...props }, ref) => /* @__PURE__ */ React2.createElement(
    import_box2.Box,
    {
      ...(0, import_box2.safelySpreadBoxProps)(props),
      ref,
      element,
      as,
      backgroundColor: "colorBackgroundInverseStrong",
      color: "colorTextInverse",
      paddingY: "space50",
      paddingX: "space70",
      margin: "space0",
      borderTopLeftRadius: "borderRadius20",
      borderTopRightRadius: "borderRadius20",
      fontWeight: "fontWeightSemibold",
      fontSize: "fontSize30",
      borderBottomWidth: "borderWidth30",
      borderBottomColor: "colorBorderInverseWeakest",
      borderBottomStyle: "solid"
    },
    children
  )
);
EditableCodeBlockHeader.displayName = "EditableCodeBlockHeader";

// src/EditableCodeBlock.tsx
var import_box3 = require("@twilio-paste/box");
var import_code_editor_library = require("@twilio-paste/code-editor-library");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var import_spinner = require("@twilio-paste/spinner");
var import_styling_library2 = require("@twilio-paste/styling-library");
var import_theme = require("@twilio-paste/theme");
var React3 = __toESM(require("react"));
var EditableCodeblockLoadingMessage = ({ i18nLoadingLabel }) => /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(import_spinner.Spinner, { color: "colorTextPrimaryWeak", decorative: true }), /* @__PURE__ */ React3.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nLoadingLabel));
EditableCodeblockLoadingMessage.displayName = "EditableCodeblockLoadingMessage";
var InlineErrorStyles = {
  ".paste-editable-code-editor-margin-error": {
    ":before": {
      content: '""',
      display: "inline-block",
      position: "relative",
      left: "2px",
      width: "16px",
      height: "16px",
      background: `url(https://assets.twilio.com/public_assets/paste-assets/1.0.0/icons/editable-codeblock-error.svg) no-repeat center center`
    }
  },
  ".paste-editable-code-editor-row-error": {
    backgroundColor: "rgba(255, 0, 0, 0.3)"
  }
};
var EditableCodeBlock = ({
  onMount,
  element = "EDITABLE_CODE_BLOCK",
  lineNumbers = "on",
  readOnly = false,
  folding = true,
  indentationGuide = true,
  showMinimap = false,
  scrollBeyondLastLine = false,
  inlineErrorRange,
  inlineErrorHoverMessage,
  inlineErrorIsWholeLine = true,
  i18nLoadingLabel = "Loading code...",
  ...props
}) => {
  const theme = (0, import_theme.useTheme)();
  const controlledOptions = React3.useMemo(() => {
    return {
      lineHeight: 20,
      fontFamily: theme.fonts.fontFamilyCode,
      lineNumbers,
      folding,
      readOnly,
      scrollBeyondLastLine,
      glyphMargin: inlineErrorRange != null,
      minimap: {
        enabled: showMinimap
      },
      guides: {
        indentation: indentationGuide
      }
    };
  }, [
    readOnly,
    showMinimap,
    folding,
    inlineErrorRange,
    scrollBeyondLastLine,
    indentationGuide,
    lineNumbers,
    theme
  ]);
  const globalStyles = React3.useMemo(() => {
    return {
      ".monaco-hover-content": {
        fontFamily: theme.fonts.fontFamilyText
      },
      ...inlineErrorRange ? InlineErrorStyles : {}
    };
  }, [theme, inlineErrorRange]);
  const handleEditorDidMount = React3.useCallback(
    (editor, monaco) => {
      monaco.editor.defineTheme("paste", import_code_editor_library.CodeEditorPasteTheme);
      monaco.editor.setTheme("paste");
      if (inlineErrorRange) {
        editor.createDecorationsCollection([
          {
            range: new monaco.Range(
              inlineErrorRange.startLineNumber,
              inlineErrorRange.startColumn,
              inlineErrorRange.endLineNumber,
              inlineErrorRange.endColumn
            ),
            options: {
              isWholeLine: inlineErrorIsWholeLine,
              className: ".paste-editable-code-editor-row-error",
              hoverMessage: inlineErrorHoverMessage,
              glyphMarginClassName: ".paste-editable-code-editor-margin-error",
              glyphMarginHoverMessage: inlineErrorHoverMessage,
              overviewRuler: {
                color: "#b82430",
                darkColor: "#b82430",
                position: monaco.editor.OverviewRulerLane.Right
              }
            }
          }
        ]);
      }
      onMount?.(editor, monaco);
    },
    [onMount, inlineErrorHoverMessage, inlineErrorRange, inlineErrorIsWholeLine]
  );
  return /* @__PURE__ */ React3.createElement(import_box3.Box, { element, borderRadius: "borderRadius10", overflow: "hidden" }, /* @__PURE__ */ React3.createElement(import_styling_library2.StylingGlobals, { styles: globalStyles }), /* @__PURE__ */ React3.createElement(
    import_code_editor_library.CodeEditor,
    {
      ...props,
      loading: /* @__PURE__ */ React3.createElement(EditableCodeblockLoadingMessage, { i18nLoadingLabel }),
      options: controlledOptions,
      onMount: handleEditorDidMount
    }
  ));
};
EditableCodeBlock.displayName = "EditableCodeBlock";
