// src/EditableCodeBlockWrapper.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { css, styled } from "@twilio-paste/styling-library";
import * as React from "react";
var StyledEditableCodeBlockWrapper = styled(Box)(
  css({
    backgroundColor: "rgb(1, 22, 39)",
    borderRadius: "borderRadius20",
    overflow: "hidden"
  })
);
var EditableCodeBlockWrapper = React.forwardRef(
  ({ children, element = "EDITABLE_CODE_BLOCK_WRAPPER", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(StyledEditableCodeBlockWrapper, { ...safelySpreadBoxProps(props), element, ref }, children);
  }
);
EditableCodeBlockWrapper.displayName = "EditableCodeBlockWrapper";

// src/EditableCodeBlockHeader.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React2 from "react";
var EditableCodeBlockHeader = React2.forwardRef(
  ({ children, element = "EDITABLE_CODE_BLOCK_HEADER", as = "h3", ...props }, ref) => /* @__PURE__ */ React2.createElement(
    Box2,
    {
      ...safelySpreadBoxProps2(props),
      ref,
      element,
      as,
      backgroundColor: "colorBackgroundInverseStrong",
      color: "colorTextInverse",
      paddingY: "space50",
      paddingX: "space70",
      margin: "space0",
      borderTopLeftRadius: "borderRadius20",
      borderTopRightRadius: "borderRadius20",
      fontWeight: "fontWeightSemibold",
      fontSize: "fontSize30",
      borderBottomWidth: "borderWidth30",
      borderBottomColor: "colorBorderInverseWeakest",
      borderBottomStyle: "solid"
    },
    children
  )
);
EditableCodeBlockHeader.displayName = "EditableCodeBlockHeader";

// src/EditableCodeBlock.tsx
import { Box as Box3 } from "@twilio-paste/box";
import {
  CodeEditor,
  CodeEditorPasteTheme
} from "@twilio-paste/code-editor-library";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { Spinner } from "@twilio-paste/spinner";
import { StylingGlobals } from "@twilio-paste/styling-library";
import { useTheme } from "@twilio-paste/theme";
import * as React3 from "react";
var EditableCodeblockLoadingMessage = ({ i18nLoadingLabel }) => /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Spinner, { color: "colorTextPrimaryWeak", decorative: true }), /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, i18nLoadingLabel));
EditableCodeblockLoadingMessage.displayName = "EditableCodeblockLoadingMessage";
var InlineErrorStyles = {
  ".paste-editable-code-editor-margin-error": {
    ":before": {
      content: '""',
      display: "inline-block",
      position: "relative",
      left: "2px",
      width: "16px",
      height: "16px",
      background: `url(https://assets.twilio.com/public_assets/paste-assets/1.0.0/icons/editable-codeblock-error.svg) no-repeat center center`
    }
  },
  ".paste-editable-code-editor-row-error": {
    backgroundColor: "rgba(255, 0, 0, 0.3)"
  }
};
var EditableCodeBlock = ({
  onMount,
  element = "EDITABLE_CODE_BLOCK",
  lineNumbers = "on",
  readOnly = false,
  folding = true,
  indentationGuide = true,
  showMinimap = false,
  scrollBeyondLastLine = false,
  inlineErrorRange,
  inlineErrorHoverMessage,
  inlineErrorIsWholeLine = true,
  i18nLoadingLabel = "Loading code...",
  ...props
}) => {
  const theme = useTheme();
  const controlledOptions = React3.useMemo(() => {
    return {
      lineHeight: 20,
      fontFamily: theme.fonts.fontFamilyCode,
      lineNumbers,
      folding,
      readOnly,
      scrollBeyondLastLine,
      glyphMargin: inlineErrorRange != null,
      minimap: {
        enabled: showMinimap
      },
      guides: {
        indentation: indentationGuide
      }
    };
  }, [
    readOnly,
    showMinimap,
    folding,
    inlineErrorRange,
    scrollBeyondLastLine,
    indentationGuide,
    lineNumbers,
    theme
  ]);
  const globalStyles = React3.useMemo(() => {
    return {
      ".monaco-hover-content": {
        fontFamily: theme.fonts.fontFamilyText
      },
      ...inlineErrorRange ? InlineErrorStyles : {}
    };
  }, [theme, inlineErrorRange]);
  const handleEditorDidMount = React3.useCallback(
    (editor, monaco) => {
      monaco.editor.defineTheme("paste", CodeEditorPasteTheme);
      monaco.editor.setTheme("paste");
      if (inlineErrorRange) {
        editor.createDecorationsCollection([
          {
            range: new monaco.Range(
              inlineErrorRange.startLineNumber,
              inlineErrorRange.startColumn,
              inlineErrorRange.endLineNumber,
              inlineErrorRange.endColumn
            ),
            options: {
              isWholeLine: inlineErrorIsWholeLine,
              className: ".paste-editable-code-editor-row-error",
              hoverMessage: inlineErrorHoverMessage,
              glyphMarginClassName: ".paste-editable-code-editor-margin-error",
              glyphMarginHoverMessage: inlineErrorHoverMessage,
              overviewRuler: {
                color: "#b82430",
                darkColor: "#b82430",
                position: monaco.editor.OverviewRulerLane.Right
              }
            }
          }
        ]);
      }
      onMount?.(editor, monaco);
    },
    [onMount, inlineErrorHoverMessage, inlineErrorRange, inlineErrorIsWholeLine]
  );
  return /* @__PURE__ */ React3.createElement(Box3, { element, borderRadius: "borderRadius10", overflow: "hidden" }, /* @__PURE__ */ React3.createElement(StylingGlobals, { styles: globalStyles }), /* @__PURE__ */ React3.createElement(
    CodeEditor,
    {
      ...props,
      loading: /* @__PURE__ */ React3.createElement(EditableCodeblockLoadingMessage, { i18nLoadingLabel }),
      options: controlledOptions,
      onMount: handleEditorDidMount
    }
  ));
};
EditableCodeBlock.displayName = "EditableCodeBlock";
export {
  EditableCodeBlock,
  EditableCodeBlockHeader,
  EditableCodeBlockWrapper
};
