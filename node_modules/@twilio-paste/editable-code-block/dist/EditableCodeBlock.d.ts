import { type BoxProps } from "@twilio-paste/box";
import { type CodeEditorProps, type IMarkdownString, type IRange } from "@twilio-paste/code-editor-library";
import * as React from "react";
export interface EditableCodeBlockProps extends Omit<CodeEditorProps, "wrapperProps" | "className" | "loading" | "theme" | "options"> {
    children?: never;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'EDITABLE_CODE_BLOCK'
     * @type {BoxProps['element']}
     * @memberof EditableCodeBlockProps
     */
    element?: BoxProps["element"];
    /**
     * Show line numbers in the gutter
     *
     * @default 'on'
     * @type {('on' | 'off')}
     * @memberof EditableCodeBlockProps
     */
    lineNumbers?: "on" | "off";
    /**
     * Enable code folding
     *
     * @default 'true'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    folding?: boolean;
    /**
     * Disable editing
     *
     * @default 'false'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    readOnly?: boolean;
    /**
     * Show indentation guides
     *
     * @default 'true'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    indentationGuide?: boolean;
    /**
     * Show minimap
     *
     * @default 'false'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    showMinimap?: boolean;
    /**
     * Allow scrolling beyond the last line
     *
     * @default 'false'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    scrollBeyondLastLine?: boolean;
    /**
     * Range of the error in the editor
     *
     * @type {IRange}
     * @memberof EditableCodeBlockProps
     */
    inlineErrorRange?: IRange;
    /**
     * Hover message for the error in the editor. If null, the hover message will be cleared.
     *
     * @type {(IMarkdownString | IMarkdownString[] | null)}
     * @memberof EditableCodeBlockProps
     */
    inlineErrorHoverMessage?: IMarkdownString | IMarkdownString[] | null;
    /**
     * Whether the error is a whole line or not.
     *
     * @default 'false'
     * @type {boolean}
     * @memberof EditableCodeBlockProps
     */
    inlineErrorIsWholeLine?: boolean;
    /**
     * Loading label for the editor.
     *
     * @default 'Loading code...'
     * @type {string}
     * @memberof EditableCodeBlockProps
     */
    i18nLoadingLabel?: string;
}
export declare const EditableCodeBlock: React.FC<EditableCodeBlockProps>;
//# sourceMappingURL=EditableCodeBlock.d.ts.map