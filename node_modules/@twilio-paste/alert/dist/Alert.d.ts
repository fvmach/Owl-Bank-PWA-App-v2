import type { BoxProps } from "@twilio-paste/box";
import type { HTMLPasteProps, ValueOf } from "@twilio-paste/types";
import * as React from "react";
export declare const AlertRoles: {
    readonly ERROR: "alert";
    readonly NEUTRAL: "status";
    readonly WARNING: "alert";
};
export declare const AlertVariants: {
    readonly ERROR: "error";
    readonly NEUTRAL: "neutral";
    readonly WARNING: "warning";
};
export declare const AlertBackgroundColors: BoxProps["backgroundColor"];
export declare const AlertBorderColors: BoxProps["borderColor"];
export declare const AlertTextColors: BoxProps["color"];
export type AlertVariants = ValueOf<typeof AlertVariants>;
export type AlertBackgroundColors = ValueOf<typeof AlertBackgroundColors>;
export type AlertRoles = ValueOf<typeof AlertRoles>;
export type AlertTextColors = ValueOf<typeof AlertTextColors>;
export interface AlertProps extends HTMLPasteProps<"div"> {
    children: NonNullable<React.ReactNode>;
    /**
     * Function to run on dismiss of the Alert. Adds a close button.
     *
     * @default null
     * @memberof AlertProps
     */
    onDismiss?: () => void;
    /**
     * ARIA role applied to the Alert.
     *
     * @default 'status' for Neutral Alerts, 'error' for Error Alerts, 'warning' for Warning Alerts
     * @memberof AlertProps
     * @type {AlertRoles}
     */
    role?: string;
    /**
     *
     * @memberof AlertProps
     * @type {AlertVariants}
     */
    variant: AlertVariants;
    /**
     * Title for dismiss label. Only necessary when using onDismiss.
     *
     * @default 'Dismiss alert'
     * @memberof AlertProps
     * @type {string}
     */
    i18nDismissLabel?: string;
    /**
     * Title for error icon when using Error Alerts.
     *
     * @default '(error)'
     * @memberof AlertProps
     * @type {string}
     */
    i18nErrorLabel?: string;
    /**
     * Title for info icon when using Neutral Alerts.
     *
     * @default '(information)'
     * @memberof AlertProps
     * @type {string}
     */
    i18nNeutralLabel?: string;
    /**
     * Title for info icon when using Warning Alerts.
     *
     * @default '(warning)'
     * @memberof AlertProps
     * @type {string}
     */
    i18nWarningLabel?: string;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'ALERT'
     * @type {BoxElementProps['element']}
     * @memberof AlertProps
     */
    element?: BoxProps["element"];
}
declare const Alert: React.ForwardRefExoticComponent<AlertProps & React.RefAttributes<HTMLDivElement>>;
export { Alert };
//# sourceMappingURL=Alert.d.ts.map