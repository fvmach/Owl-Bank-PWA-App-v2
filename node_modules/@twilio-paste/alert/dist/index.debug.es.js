// src/Alert.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { NeutralIcon } from "@twilio-paste/icons/esm/NeutralIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
import { MediaBody, MediaFigure, MediaObject } from "@twilio-paste/media-object";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React from "react";
var AlertRoles = {
  ERROR: "alert",
  NEUTRAL: "status",
  WARNING: "alert"
};
var AlertVariants = {
  ERROR: "error",
  NEUTRAL: "neutral",
  WARNING: "warning"
};
var AlertBackgroundColors = {
  ERROR: "colorBackgroundErrorWeakest",
  NEUTRAL: "colorBackgroundNeutralWeakest",
  WARNING: "colorBackgroundWarningWeakest"
};
var AlertBorderColors = {
  ERROR: "colorBorderErrorWeaker",
  NEUTRAL: "colorBorderNeutralWeaker",
  WARNING: "colorBorderWarningWeaker"
};
var AlertTextColors = {
  ERROR: "colorTextError",
  NEUTRAL: "colorTextNeutral",
  WARNING: "colorTextWarningStrong"
};
var renderAlertIcon = (variant, element, title) => {
  switch (variant) {
    case AlertVariants.ERROR:
      return /* @__PURE__ */ React.createElement(
        ErrorIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconError",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
    case AlertVariants.WARNING:
      return /* @__PURE__ */ React.createElement(
        WarningIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconWarning",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
    case AlertVariants.NEUTRAL:
    default:
      return /* @__PURE__ */ React.createElement(
        NeutralIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconNeutral",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
  }
};
var Alert = React.forwardRef(
  ({
    children,
    onDismiss,
    variant,
    role,
    element = "ALERT",
    i18nDismissLabel = "Dismiss alert",
    i18nErrorLabel = "(error)",
    i18nNeutralLabel = "(information)",
    i18nWarningLabel = "(warning)",
    ...props
  }, ref) => {
    const i18nLabelVariantMap = {
      error: i18nErrorLabel,
      neutral: i18nNeutralLabel,
      warning: i18nWarningLabel
    };
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        backgroundColor: AlertBackgroundColors[variant.toUpperCase()],
        borderColor: AlertBorderColors[variant.toUpperCase()],
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        borderRadius: "borderRadius30",
        padding: "space50",
        element,
        variant,
        ref,
        role: role != null ? role : AlertRoles[variant.toUpperCase()]
      },
      /* @__PURE__ */ React.createElement(MediaObject, { as: "div" }, /* @__PURE__ */ React.createElement(MediaFigure, { as: "div", spacing: "space30" }, renderAlertIcon(variant, element, i18nLabelVariantMap[variant])), /* @__PURE__ */ React.createElement(MediaBody, { as: "div" }, /* @__PURE__ */ React.createElement(Box, { color: AlertTextColors[variant.toUpperCase()] }, children)), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React.createElement(MediaFigure, { align: "end", spacing: "space60" }, /* @__PURE__ */ React.createElement(Button, { onClick: onDismiss, variant: "secondary_icon", size: "reset", element: `${element}_DISMISS_BUTTON` }, /* @__PURE__ */ React.createElement(CloseIcon, { element: `${element}_DISMISS_ICON`, color: "colorTextIcon", decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React.createElement(ScreenReaderOnly, null, i18nDismissLabel))))
    );
  }
);
Alert.displayName = "Alert";
export {
  Alert
};
