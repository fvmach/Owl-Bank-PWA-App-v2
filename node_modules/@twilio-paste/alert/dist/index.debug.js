"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Alert: () => Alert
});
module.exports = __toCommonJS(src_exports);

// src/Alert.tsx
var import_box = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_CloseIcon = require("@twilio-paste/icons/cjs/CloseIcon");
var import_ErrorIcon = require("@twilio-paste/icons/cjs/ErrorIcon");
var import_NeutralIcon = require("@twilio-paste/icons/cjs/NeutralIcon");
var import_WarningIcon = require("@twilio-paste/icons/cjs/WarningIcon");
var import_media_object = require("@twilio-paste/media-object");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React = __toESM(require("react"));
var AlertRoles = {
  ERROR: "alert",
  NEUTRAL: "status",
  WARNING: "alert"
};
var AlertVariants = {
  ERROR: "error",
  NEUTRAL: "neutral",
  WARNING: "warning"
};
var AlertBackgroundColors = {
  ERROR: "colorBackgroundErrorWeakest",
  NEUTRAL: "colorBackgroundNeutralWeakest",
  WARNING: "colorBackgroundWarningWeakest"
};
var AlertBorderColors = {
  ERROR: "colorBorderErrorWeaker",
  NEUTRAL: "colorBorderNeutralWeaker",
  WARNING: "colorBorderWarningWeaker"
};
var AlertTextColors = {
  ERROR: "colorTextError",
  NEUTRAL: "colorTextNeutral",
  WARNING: "colorTextWarningStrong"
};
var renderAlertIcon = (variant, element, title) => {
  switch (variant) {
    case AlertVariants.ERROR:
      return /* @__PURE__ */ React.createElement(
        import_ErrorIcon.ErrorIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconError",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
    case AlertVariants.WARNING:
      return /* @__PURE__ */ React.createElement(
        import_WarningIcon.WarningIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconWarning",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
    case AlertVariants.NEUTRAL:
    default:
      return /* @__PURE__ */ React.createElement(
        import_NeutralIcon.NeutralIcon,
        {
          element: `${element}_ICON`,
          color: "colorTextIconNeutral",
          decorative: false,
          title,
          size: "sizeIcon20"
        }
      );
  }
};
var Alert = React.forwardRef(
  ({
    children,
    onDismiss,
    variant,
    role,
    element = "ALERT",
    i18nDismissLabel = "Dismiss alert",
    i18nErrorLabel = "(error)",
    i18nNeutralLabel = "(information)",
    i18nWarningLabel = "(warning)",
    ...props
  }, ref) => {
    const i18nLabelVariantMap = {
      error: i18nErrorLabel,
      neutral: i18nNeutralLabel,
      warning: i18nWarningLabel
    };
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        backgroundColor: AlertBackgroundColors[variant.toUpperCase()],
        borderColor: AlertBorderColors[variant.toUpperCase()],
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        borderRadius: "borderRadius30",
        padding: "space50",
        element,
        variant,
        ref,
        role: role != null ? role : AlertRoles[variant.toUpperCase()]
      },
      /* @__PURE__ */ React.createElement(import_media_object.MediaObject, { as: "div" }, /* @__PURE__ */ React.createElement(import_media_object.MediaFigure, { as: "div", spacing: "space30" }, renderAlertIcon(variant, element, i18nLabelVariantMap[variant])), /* @__PURE__ */ React.createElement(import_media_object.MediaBody, { as: "div" }, /* @__PURE__ */ React.createElement(import_box.Box, { color: AlertTextColors[variant.toUpperCase()] }, children)), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React.createElement(import_media_object.MediaFigure, { align: "end", spacing: "space60" }, /* @__PURE__ */ React.createElement(import_button.Button, { onClick: onDismiss, variant: "secondary_icon", size: "reset", element: `${element}_DISMISS_BUTTON` }, /* @__PURE__ */ React.createElement(import_CloseIcon.CloseIcon, { element: `${element}_DISMISS_ICON`, color: "colorTextIcon", decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nDismissLabel))))
    );
  }
);
Alert.displayName = "Alert";
