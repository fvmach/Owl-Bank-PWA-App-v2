// src/Spinner.tsx
import { IconWrapper } from "@twilio-paste/icons/esm/helpers/IconWrapper";
import { useTheme } from "@twilio-paste/theme";
import { useUID } from "@twilio-paste/uid-library";
import * as React from "react";

// src/constants.ts
var circleRadius = 45;
var circleGeometry = {
  cx: 50,
  cy: 50,
  r: circleRadius
};
var circleCircumference = Math.PI * 2 * circleRadius;

// src/styled.tsx
import { styled } from "@twilio-paste/styling-library";

// src/keyframes.tsx
import { keyframes } from "@twilio-paste/styling-library";
var SvgKeyframes = keyframes`
  0%,
  15% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(0);
  }

  50%,
  75% {
    stroke-dashoffset: ${circleCircumference * 0.2};
    transform: rotate(45deg);
  }

  100% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(360deg);
  }
`;
var CircleKeyframes = keyframes`
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
`;
var SafariSvgKeyframes = keyframes`
  0%,
  75% {
    stroke-dashoffset: 90%;
  }

  100% {
    stroke-dashoffset: 90%;
    transform: rotate(360deg);
  }
`;

// src/styled.tsx
var StyledCircleTrack = styled.circle({
  transformOrigin: "center",
  opacity: 0.25
});
var AnimatedStyledCircle = styled.circle(({ show, isSafari }) => {
  return {
    transformOrigin: "center",
    animation: isSafari ? "none" : `1.5s ease-in-out infinite both ${CircleKeyframes}`,
    strokeDasharray: circleCircumference,
    opacity: show ? 1 : 0
  };
});
var StyledSvg = styled.svg(({ isSafari }) => {
  return {
    height: "100%",
    width: "100%",
    display: "block",
    animation: isSafari ? `1s infinite linear ${SafariSvgKeyframes}` : `4.25s linear infinite both ${SvgKeyframes}`
  };
});

// src/Spinner.tsx
var Spinner = React.forwardRef(
  ({ size, color = "currentColor", title, as, display, decorative, delay = 250, element = "SPINNER" }, ref) => {
    const titleId = `spinner-${useUID()}`;
    const {
      borderWidths: { borderWidth40 }
    } = useTheme();
    const [show, setShow] = React.useState(delay === 0);
    if (!decorative && title == null) {
      throw new Error("[Spinner]: Missing a title for non-decorative icon.");
    }
    React.useEffect(() => {
      if (delay === 0)
        return void 0;
      const showTimer = setTimeout(() => setShow(true), delay);
      return () => clearTimeout(showTimer);
    }, [delay]);
    const [isSafari, setIsSafari] = React.useState(null);
    React.useEffect(() => {
      setIsSafari(navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome"));
    }, []);
    if (isSafari == null) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(
      IconWrapper,
      {
        as,
        element,
        display,
        size,
        color,
        "aria-hidden": decorative,
        ref
      },
      /* @__PURE__ */ React.createElement(
        StyledSvg,
        {
          viewBox: "0 0 100 100",
          xmlns: "http://www.w3.org/2000/svg",
          "aria-labelledby": titleId,
          isSafari
        },
        title ? /* @__PURE__ */ React.createElement("title", { id: titleId }, title) : null,
        /* @__PURE__ */ React.createElement("g", { strokeWidth: borderWidth40, stroke: "currentColor", strokeLinecap: "round", fill: "transparent" }, /* @__PURE__ */ React.createElement(StyledCircleTrack, { ...circleGeometry }), /* @__PURE__ */ React.createElement(AnimatedStyledCircle, { show, ...circleGeometry, isSafari }))
      )
    );
  }
);
Spinner.displayName = "Spinner";
export {
  Spinner
};
