"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Label: () => Label,
  RequiredDot: () => RequiredDot
});
module.exports = __toCommonJS(src_exports);

// src/Label.tsx
var import_box2 = require("@twilio-paste/box");
var import_media_object = require("@twilio-paste/media-object");
var React2 = __toESM(require("react"));

// src/RequiredDot.tsx
var import_box = require("@twilio-paste/box");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var React = __toESM(require("react"));
var RequiredDot = ({
  element = "REQUIRED_DOT",
  i18nLabel = "Required",
  ...props
}) => {
  return /* @__PURE__ */ React.createElement(
    import_box.Box,
    {
      ...(0, import_box.safelySpreadBoxProps)(props),
      alignItems: "center",
      justifyContent: "center",
      as: "span",
      cursor: "pointer",
      display: "flex",
      height: "sizeIcon30",
      title: i18nLabel,
      element: `${element}_WRAPPER`
    },
    /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        as: "span",
        backgroundColor: "colorBackgroundRequired",
        borderRadius: "borderRadiusCircle",
        display: "block",
        height: "4px",
        width: "4px",
        element
      },
      /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, i18nLabel)
    )
  );
};
RequiredDot.displayName = "RequiredDot";

// src/Label.tsx
var Label = React2.forwardRef(
  ({
    as = "label",
    marginBottom,
    required,
    disabled,
    children,
    variant,
    element = "LABEL",
    i18nRequiredLabel = "",
    ...props
  }, ref) => {
    let textColor = "colorText";
    if (disabled && variant === "inverse") {
      textColor = "colorTextInverseWeaker";
    } else if (disabled) {
      textColor = "colorTextWeak";
    } else if (variant === "inverse") {
      textColor = "colorTextInverse";
    }
    let cursor = "pointer";
    if (disabled) {
      cursor = "not-allowed";
    } else if (as === "legend" || as === "div") {
      cursor = "default";
    }
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        as,
        borderBottomWidth: "borderWidth0",
        display: "block",
        marginBottom: marginBottom || "space20",
        paddingLeft: "space0",
        paddingRight: "space0",
        textTransform: "none",
        element,
        fontSize: "fontSize30",
        fontWeight: "fontWeightSemibold",
        lineHeight: "lineHeight30",
        color: textColor,
        cursor,
        ref
      },
      /* @__PURE__ */ React2.createElement(import_media_object.MediaObject, { verticalAlign: "top" }, required && /* @__PURE__ */ React2.createElement(import_media_object.MediaFigure, { spacing: "space20" }, /* @__PURE__ */ React2.createElement(RequiredDot, { element: `${element}_REQUIRED_DOT`, i18nLabel: i18nRequiredLabel })), /* @__PURE__ */ React2.createElement(import_media_object.MediaBody, null, children))
    );
  }
);
Label.displayName = "Label";
