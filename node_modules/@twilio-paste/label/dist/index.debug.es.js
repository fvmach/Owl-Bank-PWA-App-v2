// src/Label.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { MediaBody, MediaFigure, MediaObject } from "@twilio-paste/media-object";
import * as React2 from "react";

// src/RequiredDot.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import * as React from "react";
var RequiredDot = ({
  element = "REQUIRED_DOT",
  i18nLabel = "Required",
  ...props
}) => {
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      ...safelySpreadBoxProps(props),
      alignItems: "center",
      justifyContent: "center",
      as: "span",
      cursor: "pointer",
      display: "flex",
      height: "sizeIcon30",
      title: i18nLabel,
      element: `${element}_WRAPPER`
    },
    /* @__PURE__ */ React.createElement(
      Box,
      {
        as: "span",
        backgroundColor: "colorBackgroundRequired",
        borderRadius: "borderRadiusCircle",
        display: "block",
        height: "4px",
        width: "4px",
        element
      },
      /* @__PURE__ */ React.createElement(ScreenReaderOnly, null, i18nLabel)
    )
  );
};
RequiredDot.displayName = "RequiredDot";

// src/Label.tsx
var Label = React2.forwardRef(
  ({
    as = "label",
    marginBottom,
    required,
    disabled,
    children,
    variant,
    element = "LABEL",
    i18nRequiredLabel = "",
    ...props
  }, ref) => {
    let textColor = "colorText";
    if (disabled && variant === "inverse") {
      textColor = "colorTextInverseWeaker";
    } else if (disabled) {
      textColor = "colorTextWeak";
    } else if (variant === "inverse") {
      textColor = "colorTextInverse";
    }
    let cursor = "pointer";
    if (disabled) {
      cursor = "not-allowed";
    } else if (as === "legend" || as === "div") {
      cursor = "default";
    }
    return /* @__PURE__ */ React2.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        as,
        borderBottomWidth: "borderWidth0",
        display: "block",
        marginBottom: marginBottom || "space20",
        paddingLeft: "space0",
        paddingRight: "space0",
        textTransform: "none",
        element,
        fontSize: "fontSize30",
        fontWeight: "fontWeightSemibold",
        lineHeight: "lineHeight30",
        color: textColor,
        cursor,
        ref
      },
      /* @__PURE__ */ React2.createElement(MediaObject, { verticalAlign: "top" }, required && /* @__PURE__ */ React2.createElement(MediaFigure, { spacing: "space20" }, /* @__PURE__ */ React2.createElement(RequiredDot, { element: `${element}_REQUIRED_DOT`, i18nLabel: i18nRequiredLabel })), /* @__PURE__ */ React2.createElement(MediaBody, null, children))
    );
  }
);
Label.displayName = "Label";
export {
  Label,
  RequiredDot
};
