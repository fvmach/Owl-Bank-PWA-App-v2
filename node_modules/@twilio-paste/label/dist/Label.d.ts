import type { BoxProps } from "@twilio-paste/box";
import type { HTMLPasteProps } from "@twilio-paste/types";
import * as React from "react";
export type LabelVariants = "default" | "inverse";
type LabelBaseProps = {
    children: NonNullable<React.ReactNode>;
    /**
     * Shows the input is disabled.
     *
     * @type {boolean}
     * @memberof LabelBaseProps
     */
    disabled?: boolean;
    /**
     * Optionally remove Label's bottom margin.
     *
     * @type {"space0"}
     * @memberof LabelBaseProps
     */
    marginBottom?: "space0";
    /**
     * Shows the input is required.
     *
     * @type {boolean}
     * @memberof LabelBaseProps
     */
    required?: boolean;
    /**
     *
     * @type {LabelVariants}
     * @memberof LabelBaseProps
     */
    variant?: LabelVariants;
    /**
     * Label text for the required dot.
     *
     * @type {string}
     * @memberof LabelBaseProps
     */
    i18nRequiredLabel?: string;
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'LABEL'
     * @type {BoxProps['element']}
     * @memberof LabelBaseProps
     */
    element?: BoxProps["element"];
};
type LabelElementProps = HTMLPasteProps<"label"> & {
    as?: "label";
    /**
     * You must specify the 'htmlFor' prop to associate the label with an input.
     */
    htmlFor: string | undefined;
};
type LabelLegendElementProps = HTMLPasteProps<"legend"> & {
    as?: "legend";
    /**
     * You cannot apply htmlFor to a legend element.
     */
    htmlFor?: never;
};
type LabelDivElementProps = HTMLPasteProps<"div"> & {
    as?: "div";
    /**
     * You cannot apply htmlFor to a div element.
     */
    htmlFor?: never;
};
export type LabelProps = LabelBaseProps & (LabelElementProps | LabelLegendElementProps | LabelDivElementProps);
declare const Label: React.ForwardRefExoticComponent<LabelProps & React.RefAttributes<HTMLLabelElement>>;
export { Label };
//# sourceMappingURL=Label.d.ts.map