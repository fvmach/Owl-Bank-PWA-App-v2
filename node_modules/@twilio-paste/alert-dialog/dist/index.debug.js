"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  AlertDialog: () => AlertDialog
});
module.exports = __toCommonJS(src_exports);

// src/AlertDialog.tsx
var import_animation_library = require("@twilio-paste/animation-library");
var import_box4 = require("@twilio-paste/box");
var import_modal2 = require("@twilio-paste/modal");
var import_uid_library = require("@twilio-paste/uid-library");
var React4 = __toESM(require("react"));

// src/AlertDialogBody.tsx
var import_box = require("@twilio-paste/box");
var React = __toESM(require("react"));
var AlertDialogBody = React.forwardRef(
  ({ bodyID, children, element = "ALERT_DIALOG_BODY", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        as: "div",
        overflowY: "auto",
        padding: "space90",
        paddingTop: "space0",
        element,
        id: bodyID,
        ref
      },
      children
    );
  }
);
AlertDialogBody.displayName = "AlertDialogBody";

// src/AlertDialogContent.tsx
var import_modal = require("@twilio-paste/modal");
var import_styling_library = require("@twilio-paste/styling-library");
var AlertDialogContent = (0, import_styling_library.styled)(import_modal.ModalDialogContent)(
  () => (0, import_styling_library.css)({
    maxWidth: "size40"
  })
);
AlertDialogContent.displayName = "AlertDialogContent";

// src/AlertDialogFooter.tsx
var import_box2 = require("@twilio-paste/box");
var import_button = require("@twilio-paste/button");
var import_stack = require("@twilio-paste/stack");
var React2 = __toESM(require("react"));
var AlertDialogFooter = React2.forwardRef(
  ({
    destructive,
    element = "ALERT_DIALOG_FOOTER",
    onConfirm,
    onConfirmLabel,
    onDismiss,
    onDismissLabel,
    onConfirmDisabled,
    isConfirmDisabled = onConfirmDisabled || false,
    ...props
  }, ref) => {
    const primaryVariant = destructive ? "destructive" : "primary";
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        as: "div",
        flexShrink: 0,
        display: "flex",
        padding: "space90",
        paddingTop: "space0",
        border: "none",
        element,
        justifyContent: "flex-end",
        ref
      },
      /* @__PURE__ */ React2.createElement(import_stack.Stack, { orientation: "horizontal", spacing: "space50" }, /* @__PURE__ */ React2.createElement(import_button.Button, { variant: "secondary", onClick: onDismiss }, onDismissLabel), /* @__PURE__ */ React2.createElement(
        import_button.Button,
        {
          variant: primaryVariant,
          onClick: onConfirm,
          disabled: destructive && (isConfirmDisabled || onConfirmDisabled)
        },
        onConfirmLabel
      ))
    );
  }
);
AlertDialogFooter.displayName = "AlertDialogFooter";

// src/AlertDialogHeader.tsx
var import_box3 = require("@twilio-paste/box");
var import_heading = require("@twilio-paste/heading");
var React3 = __toESM(require("react"));
var AlertDialogHeader = React3.forwardRef(
  ({ children, element = "ALERT_DIALOG_HEADER", headingID, ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        as: "div",
        padding: "space90",
        flexShrink: 0,
        border: "none",
        element: `${element}_WRAPPER`,
        ref
      },
      /* @__PURE__ */ React3.createElement(import_heading.Heading, { as: "h3", element, marginBottom: "space0", variant: "heading30", id: headingID }, children)
    );
  }
);
AlertDialogHeader.displayName = "AlertDialogHeader";

// src/AlertDialog.tsx
var getAnimationStates = () => ({
  from: { opacity: 0, transform: `scale(0.675)` },
  enter: { opacity: 1, transform: `scale(1)` },
  leave: { opacity: 0, transform: `scale(0.675)` },
  config: {
    mass: 0.5,
    tension: 370,
    friction: 26
  }
});
var AlertDialog = React4.forwardRef(
  ({
    children,
    destructive,
    element = "ALERT_DIALOG",
    heading,
    isOpen,
    onConfirm,
    onConfirmLabel,
    onDismiss,
    onDismissLabel,
    onConfirmDisabled,
    isConfirmDisabled,
    ...props
  }, ref) => {
    const transitions = (0, import_animation_library.useTransition)(isOpen, getAnimationStates());
    const headingID = (0, import_uid_library.useUID)();
    const bodyID = (0, import_uid_library.useUID)();
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, transitions(
      (styles, item) => item && /* @__PURE__ */ React4.createElement(import_modal2.ModalDialogOverlay, { isOpen, style: { opacity: styles.opacity } }, /* @__PURE__ */ React4.createElement(
        import_box4.Box,
        {
          as: AlertDialogContent,
          ...(0, import_box4.safelySpreadBoxProps)(props),
          "aria-labelledby": headingID,
          "aria-describedby": bodyID,
          element,
          ref,
          role: "alertdialog",
          style: styles
        },
        /* @__PURE__ */ React4.createElement(AlertDialogHeader, { headingID, element: `${element}_HEADER` }, heading),
        /* @__PURE__ */ React4.createElement(AlertDialogBody, { bodyID, element: `${element}_BODY` }, children),
        /* @__PURE__ */ React4.createElement(
          AlertDialogFooter,
          {
            destructive,
            element: `${element}_FOOTER`,
            onDismiss,
            onDismissLabel,
            onConfirm,
            onConfirmLabel,
            isConfirmDisabled: isConfirmDisabled || onConfirmDisabled
          }
        )
      ))
    ));
  }
);
AlertDialog.displayName = "AlertDialog";
