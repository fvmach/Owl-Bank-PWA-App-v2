import type { ButtonProps } from "@twilio-paste/button";
import type { MenuPrimitiveButtonProps } from "@twilio-paste/menu-primitive";
import * as React from "react";
export type MenuButtonProps = MenuPrimitiveButtonProps & ButtonProps;
declare const MenuButton: React.ForwardRefExoticComponent<(Omit<import("@twilio-paste/paste-reakit-fork/ts").RoleOptions & {
    disabled?: boolean | undefined;
    focusable?: boolean | undefined;
} & {
    unstable_clickOnEnter?: boolean | undefined;
    unstable_clickOnSpace?: boolean | undefined;
} & Pick<Partial<import("@twilio-paste/reakit-library").DisclosureStateReturn>, "visible"> & Pick<import("@twilio-paste/reakit-library").DisclosureStateReturn, "baseId" | "toggle"> & Pick<Partial<import("@twilio-paste/paste-reakit-fork/ts").DialogStateReturn>, "unstable_disclosureRef"> & Pick<import("@twilio-paste/paste-reakit-fork/ts").DialogStateReturn, "toggle"> & Pick<Partial<import("@twilio-paste/reakit-library").PopoverStateReturn>, "unstable_referenceRef"> & Pick<Partial<import("@twilio-paste/menu-primitive").MenuPrimitiveStateReturn>, "hide" | "unstable_popoverStyles" | "unstable_arrowStyles" | "currentId" | "unstable_moves" | "move"> & Pick<import("@twilio-paste/menu-primitive").MenuPrimitiveStateReturn, "show" | "placement" | "first" | "last"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
    wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
} & {
    disabled?: boolean | undefined;
} & React.ButtonHTMLAttributes<any> & Omit<import("@twilio-paste/button/dist/types").DirectButtonProps, "size" | "buttonState" | "i18nExternalLinkLabel" | "loading"> & {
    i18nExternalLinkLabel?: string | undefined;
    loading?: boolean | undefined;
    size?: import("@twilio-paste/button/dist/types").ButtonSizes | undefined;
} & {
    variant?: ("destructive" | "link" | "primary" | "primary_icon" | "secondary" | "secondary_icon" | "destructive_icon" | "destructive_link" | "destructive_secondary" | "inverse_link" | "inverse") | undefined;
}, "ref"> | Omit<import("@twilio-paste/paste-reakit-fork/ts").RoleOptions & {
    disabled?: boolean | undefined;
    focusable?: boolean | undefined;
} & {
    unstable_clickOnEnter?: boolean | undefined;
    unstable_clickOnSpace?: boolean | undefined;
} & Pick<Partial<import("@twilio-paste/reakit-library").DisclosureStateReturn>, "visible"> & Pick<import("@twilio-paste/reakit-library").DisclosureStateReturn, "baseId" | "toggle"> & Pick<Partial<import("@twilio-paste/paste-reakit-fork/ts").DialogStateReturn>, "unstable_disclosureRef"> & Pick<import("@twilio-paste/paste-reakit-fork/ts").DialogStateReturn, "toggle"> & Pick<Partial<import("@twilio-paste/reakit-library").PopoverStateReturn>, "unstable_referenceRef"> & Pick<Partial<import("@twilio-paste/menu-primitive").MenuPrimitiveStateReturn>, "hide" | "unstable_popoverStyles" | "unstable_arrowStyles" | "currentId" | "unstable_moves" | "move"> & Pick<import("@twilio-paste/menu-primitive").MenuPrimitiveStateReturn, "show" | "placement" | "first" | "last"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
    wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
} & {
    disabled?: boolean | undefined;
} & React.ButtonHTMLAttributes<any> & Omit<import("@twilio-paste/button/dist/types").DirectButtonProps, "size" | "buttonState" | "i18nExternalLinkLabel" | "loading"> & {
    i18nExternalLinkLabel?: string | undefined;
    loading?: boolean | undefined;
    size?: import("@twilio-paste/button/dist/types").ButtonSizes | undefined;
} & Omit<import("@twilio-paste/box").BoxStyleProps, "size"> & {
    variant?: "reset" | undefined;
}, "ref">) & React.RefAttributes<HTMLButtonElement>>;
export { MenuButton };
//# sourceMappingURL=MenuButton.d.ts.map