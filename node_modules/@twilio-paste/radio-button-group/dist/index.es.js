import{Box as Box2,safelySpreadBoxProps}from"@twilio-paste/box";import{Button}from"@twilio-paste/button";import{useUID}from"@twilio-paste/uid-library";import*as React3 from"react";import{Box}from"@twilio-paste/box";import*as React from"react";var HiddenRadio=React.forwardRef((props,ref)=>React.createElement(Box,{as:"input",type:"radio",size:"size0",border:"none",overflow:"hidden",padding:"space0",margin:"space0",whiteSpace:"nowrap",textTransform:"none",position:"absolute",clip:"rect(0 0 0 0)",ref,...props}));HiddenRadio.displayName="HiddenRadio";import*as React2 from"react";var RadioButtonContext=React2.createContext({name:"",value:"",disabled:!1,hasError:!1,onChange:()=>{},attached:!1});import{ButtonToggleStyles,DestructiveSecondaryButtonToggleStyles}from"@twilio-paste/button";import{css,styled}from"@twilio-paste/styling-library";var StyledRadioButtonLabel=styled.label(css({"& > input[type=radio]:checked + span":{...ButtonToggleStyles._pressed,zIndex:1},"& > input[type=radio]:checked + span:hover":{...ButtonToggleStyles._pressed_hover,zIndex:2},"& > input[type=radio]:checked:focus + span":{...ButtonToggleStyles._pressed_focus,zIndex:3},"& > input[type=radio][aria-invalid=true]:checked + span":{...DestructiveSecondaryButtonToggleStyles._pressed,zIndex:1},"& > input[type=radio][aria-invalid=true]:checked + span:hover":{...DestructiveSecondaryButtonToggleStyles._pressed_hover,zIndex:2},"& > input[type=radio][aria-invalid=true]:checked:focus + span":{...DestructiveSecondaryButtonToggleStyles._pressed_focus,zIndex:3},"& > input[type=radio]:checked:disabled + span":{...ButtonToggleStyles._pressed_disabled,zIndex:0},"& > input[type=radio][aria-invalid=true]:checked:disabled + span:hover":{...DestructiveSecondaryButtonToggleStyles._pressed_disabled,zIndex:0},"& > input[type=radio]:disabled + span":{...ButtonToggleStyles._disabled,zIndex:0},"& > input[type=radio][aria-invalid=true]:disabled + span:hover":{...DestructiveSecondaryButtonToggleStyles._disabled,zIndex:0}}));var RadioButton=React3.forwardRef(({id,name,element="RADIO_BUTTON",value,checked,defaultChecked,disabled,hasError,onChange,children,...props},ref)=>{if(checked!=null&&defaultChecked!=null)throw new Error("[Paste RadioButton] Do not provide both 'defaultChecked' and 'checked' to RadioButton at the same time. Please consider if you want this component to be controlled or uncontrolled.");let radioGroupContext=React3.useContext(RadioButtonContext),radioId=id||useUID(),isControlled=React3.useMemo(()=>checked!==void 0||radioGroupContext.value!=="",[]),handleChange=React3.useCallback(event=>{onChange?onChange(event):radioGroupContext.onChange(event)},[onChange,radioGroupContext.onChange]),state={name:name??radioGroupContext.name,disabled:disabled??radioGroupContext.disabled,hasError:hasError??radioGroupContext.hasError};return isControlled?radioGroupContext.value!==""?state.checked=radioGroupContext.value===value:state.checked=checked:state.defaultChecked=defaultChecked,React3.createElement(Box2,{element,as:StyledRadioButtonLabel},React3.createElement(HiddenRadio,{...safelySpreadBoxProps(props),...state,value,"aria-invalid":state.hasError,onChange:handleChange,id:radioId,ref}),React3.createElement(Button,{variant:state.hasError?"destructive_secondary":"secondary",as:"span",disabled:state.disabled},children))});RadioButton.displayName="RadioButton";import{Box as Box3,safelySpreadBoxProps as safelySpreadBoxProps2}from"@twilio-paste/box";import{HelpText}from"@twilio-paste/help-text";import{Label}from"@twilio-paste/label";import*as React4 from"react";import{css as css2,styled as styled2}from"@twilio-paste/styling-library";var AttachedRadioButtonGroupWrapper=styled2.span(css2({"& > label:focus-within":{zIndex:2,position:"relative"},"& > label:first-of-type":{"& > span":{borderTopRightRadius:0,borderBottomRightRadius:0}},"& > label:not(:first-of-type):not(:last-of-type)":{"& > span":{borderRadius:0,marginLeft:"1px"}},"& > label:last-of-type":{"& > span":{marginLeft:"1px",borderTopLeftRadius:0,borderBottomLeftRadius:0}}})),UnattachedRadioButtonGroupWrapper=styled2.span(css2({"& > label:first-of-type":{marginLeft:"space0"},"& > label:not(:first-of-type)":{marginLeft:"space40"}}));var RadioButtonGroup=React4.forwardRef(({name,element="RADIO_BUTTON_GROUP",value,onChange,disabled=!1,errorText,children,i18nRequiredLabel="(required)",helpText,legend,required,attached=!1,...props},ref)=>{let onChangeHandler=React4.useCallback(event=>{onChange?.(event.target.value)},[onChange]),contextValue=React4.useMemo(()=>({name,value:value||"",disabled,hasError:errorText!=null,onChange:onChangeHandler}),[name,value,disabled,errorText,onChangeHandler]);return React4.createElement(RadioButtonContext.Provider,{value:contextValue},React4.createElement(Box3,{as:"fieldset",element,margin:"space0",padding:"space0",border:"none",display:"flex",flexDirection:"column",ref,...safelySpreadBoxProps2(props)},React4.createElement(Label,{as:"legend",element:"LEGEND",htmlFor:void 0,required,marginBottom:"space0",disabled,i18nRequiredLabel},legend),helpText&&React4.createElement(HelpText,{variant:"default",marginTop:"space0"},helpText),React4.createElement(Box3,{as:attached?AttachedRadioButtonGroupWrapper:UnattachedRadioButtonGroupWrapper,marginTop:"space20"},children),errorText&&React4.createElement(HelpText,{variant:"error"},errorText)))});RadioButtonGroup.displayName="RadioButtonGroup";export{RadioButton,RadioButtonGroup};
