import type { BoxProps } from "@twilio-paste/box";
import type { HTMLPasteProps } from "@twilio-paste/types";
import * as React from "react";
export interface FileUploaderDropzoneProps extends Omit<HTMLPasteProps<"input">, "onChange" | "onDragEnter" | "onDragLeave" | "onDrop" | "onDragStart" | "onDragEnd" | "onDragOver"> {
    /**
     * The allowed mime types for the input. It is convereted to a string and passed to the accept attribute.
     *
     * @type {string[]}
     * @memberof FileUploaderDropzoneProps
     */
    acceptedMimeTypes: string[];
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider
     *
     * @default 'FILE_UPLOADER_DROPZONE'
     * @type {BoxProps['element']}
     * @memberof FileUploaderDropzoneProps
     */
    element?: BoxProps["element"];
    children?: React.ReactNode;
    /**
     * A function that runs when the input within the Dropzone is changed
     *
     * @memberof FileUploaderDropzoneProps
     */
    onInputChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * A function that runs on drag leave on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDragEnd?: (event: React.DragEvent<HTMLLabelElement>) => void;
    /**
     * A function that runs on drag leave on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDragEnter?: (event: React.DragEvent<HTMLLabelElement>) => void;
    /**
     * A function that runs on drag leave on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDragLeave?: (event: React.DragEvent<HTMLLabelElement>) => void;
    /**
     * A function that runs on drag over on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDragOver?: (event: React.DragEvent<HTMLLabelElement>) => void;
    /**
     * A function that runs on drag leave on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDragStart?: (event: React.DragEvent<HTMLLabelElement>) => void;
    /**
     * A function that runs on drop on the label that wraps the FileUploaderDropzone
     *
     * @memberof FileUploaderDropzoneProps
     */
    onDrop?: (event: React.DragEvent<HTMLLabelElement>) => void;
}
export declare const FileUploaderDropzone: React.ForwardRefExoticComponent<FileUploaderDropzoneProps & React.RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=FileUploaderDropzone.d.ts.map