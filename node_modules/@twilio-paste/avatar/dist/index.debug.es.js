var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../../../node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "../../../../node_modules/react-is/cjs/react-is.production.min.js"(exports) {
    "use strict";
    var b = Symbol.for("react.element");
    var c = Symbol.for("react.portal");
    var d = Symbol.for("react.fragment");
    var e = Symbol.for("react.strict_mode");
    var f = Symbol.for("react.profiler");
    var g = Symbol.for("react.provider");
    var h = Symbol.for("react.context");
    var k = Symbol.for("react.server_context");
    var l = Symbol.for("react.forward_ref");
    var m = Symbol.for("react.suspense");
    var n = Symbol.for("react.suspense_list");
    var p = Symbol.for("react.memo");
    var q = Symbol.for("react.lazy");
    var t = Symbol.for("react.offscreen");
    var u = Symbol.for("react.module.reference");
    function v(a) {
      if ("object" === typeof a && null !== a) {
        var r = a.$$typeof;
        switch (r) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case m:
              case n:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case h:
                  case l:
                  case q:
                  case p:
                  case g:
                    return a;
                  default:
                    return r;
                }
            }
          case c:
            return r;
        }
      }
    }
    exports.ContextConsumer = h;
    exports.ContextProvider = g;
    exports.Element = b;
    exports.ForwardRef = l;
    exports.Fragment = d;
    exports.Lazy = q;
    exports.Memo = p;
    exports.Portal = c;
    exports.Profiler = f;
    exports.StrictMode = e;
    exports.Suspense = m;
    exports.SuspenseList = n;
    exports.isAsyncMode = function() {
      return false;
    };
    exports.isConcurrentMode = function() {
      return false;
    };
    exports.isContextConsumer = function(a) {
      return v(a) === h;
    };
    exports.isContextProvider = function(a) {
      return v(a) === g;
    };
    exports.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    exports.isForwardRef = function(a) {
      return v(a) === l;
    };
    exports.isFragment = function(a) {
      return v(a) === d;
    };
    exports.isLazy = function(a) {
      return v(a) === q;
    };
    exports.isMemo = function(a) {
      return v(a) === p;
    };
    exports.isPortal = function(a) {
      return v(a) === c;
    };
    exports.isProfiler = function(a) {
      return v(a) === f;
    };
    exports.isStrictMode = function(a) {
      return v(a) === e;
    };
    exports.isSuspense = function(a) {
      return v(a) === m;
    };
    exports.isSuspenseList = function(a) {
      return v(a) === n;
    };
    exports.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
    };
    exports.typeOf = v;
  }
});

// ../../../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../../../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_react_is_production_min();
    } else {
      module.exports = null;
    }
  }
});

// src/Avatar.tsx
var import_react_is = __toESM(require_react_is());
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { Text } from "@twilio-paste/text";
import * as React2 from "react";

// src/AvatarGroup.tsx
import { Stack } from "@twilio-paste/stack";
import * as React from "react";

// src/utils.ts
var getInitialsFromName = (fullname) => {
  return fullname.split(" ").map((name) => name.slice(0, 1)).reduce((previous, currentInitial, index, initials) => {
    if (index === 0 || index === initials.length - 1) {
      return `${previous}${currentInitial}`;
    }
    return previous;
  }, "");
};
var getCorrespondingLineHeightFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    return size.replace("sizeIcon", "lineHeight");
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getCorrespondingFontSizeFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    switch (size) {
      case "sizeIcon10":
      case "sizeIcon20":
      case "sizeIcon30":
      case "sizeIcon40":
      case "sizeIcon50":
      case "sizeIcon60":
      default:
        return "fontSize10";
      case "sizeIcon70":
        return "fontSize20";
      case "sizeIcon80":
        return "fontSize30";
      case "sizeIcon90":
        return "fontSize40";
      case "sizeIcon100":
        return "fontSize60";
      case "sizeIcon110":
        return "fontSize70";
    }
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getCorrespondingIconSizeFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    switch (size) {
      case "sizeIcon10":
      case "sizeIcon20":
      case "sizeIcon30":
      case "sizeIcon40":
      default:
        return "sizeIcon10";
      case "sizeIcon50":
      case "sizeIcon60":
        return "sizeIcon20";
      case "sizeIcon70":
        return "sizeIcon30";
      case "sizeIcon80":
        return "sizeIcon40";
      case "sizeIcon90":
        return "sizeIcon50";
      case "sizeIcon100":
        return "sizeIcon70";
      case "sizeIcon110":
        return "sizeIcon80";
    }
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getComputedTokenNames = (size) => {
  if (typeof size === "string") {
    return {
      lineHeight: getCorrespondingLineHeightFromSizeToken(size),
      fontSize: getCorrespondingFontSizeFromSizeToken(size),
      iconSize: getCorrespondingIconSizeFromSizeToken(size)
    };
  }
  if (Array.isArray(size)) {
    return {
      lineHeight: size.map((s) => {
        if (s != null) {
          return getCorrespondingLineHeightFromSizeToken(s);
        }
        return null;
      }),
      fontSize: size.map((s) => {
        if (s != null) {
          return getCorrespondingFontSizeFromSizeToken(s);
        }
        return null;
      }),
      iconSize: size.map((s) => {
        if (s != null) {
          return getCorrespondingIconSizeFromSizeToken(s);
        }
        return null;
      })
    };
  }
  throw new Error("[Avatar]: size must be a string or an array");
};
var getGroupSpacing = (size, variant) => {
  if (variant === "user") {
    switch (size) {
      case "sizeIcon10":
      case "sizeIcon20":
      case "sizeIcon30":
        return "spaceNegative10";
      case "sizeIcon40":
      case "sizeIcon50":
      case "sizeIcon60":
      case "sizeIcon70":
        return "spaceNegative20";
      case "sizeIcon80":
      case "sizeIcon90":
        return "spaceNegative30";
      case "sizeIcon100":
        return "spaceNegative40";
      case "sizeIcon110":
        return "spaceNegative50";
    }
  }
  switch (size) {
    case "sizeIcon10":
    case "sizeIcon20":
    case "sizeIcon30":
      return "spaceNegative10";
    case "sizeIcon40":
    case "sizeIcon50":
    case "sizeIcon60":
    case "sizeIcon70":
    case "sizeIcon80":
    case "sizeIcon90":
    case "sizeIcon100":
    case "sizeIcon110":
      return "spaceNegative20";
    default:
      return "spaceNegative20";
  }
};

// src/AvatarGroup.tsx
var AvatarGroupContext = React.createContext({});
var AvatarGroup = React.forwardRef(
  ({ variant, size, children, element = "AVATAR_GROUP" }, ref) => {
    return /* @__PURE__ */ React.createElement(AvatarGroupContext.Provider, { value: { variant, size } }, /* @__PURE__ */ React.createElement(Stack, { orientation: "horizontal", spacing: getGroupSpacing(size, variant), element, ref }, children));
  }
);
AvatarGroup.displayName = "AvatarGroup";

// src/Avatar.tsx
var DEFAULT_SIZE = "sizeIcon70";
var AvatarContents = ({
  name,
  size = DEFAULT_SIZE,
  src,
  icon: Icon
}) => {
  const { size: groupSize } = React2.useContext(AvatarGroupContext);
  const computedTokenNames = getComputedTokenNames(groupSize || size);
  if (src != null) {
    return /* @__PURE__ */ React2.createElement(Box, { as: "img", alt: name, maxWidth: "100%", boxShadow: "shadowBorderWeaker", src, size, title: name });
  }
  if (Icon != null) {
    if (!(0, import_react_is.isValidElementType)(Icon) || typeof Icon.displayName !== "string" || !Icon.displayName.includes("Icon")) {
      throw new Error("[Paste Avatar]: icon prop expected to be a Paste icon only.");
    }
    return /* @__PURE__ */ React2.createElement(Box, { maxWidth: "100%", size, display: "flex", alignItems: "center", justifyContent: "center" }, /* @__PURE__ */ React2.createElement(Icon, { decorative: false, title: name, size: computedTokenNames.iconSize }));
  }
  return /* @__PURE__ */ React2.createElement(
    Text,
    {
      as: "abbr",
      display: "inline-block",
      fontSize: computedTokenNames.fontSize,
      fontWeight: "fontWeightSemibold",
      lineHeight: computedTokenNames.lineHeight,
      verticalAlign: "top",
      textDecoration: "none",
      title: name,
      color: "inherit"
    },
    getInitialsFromName(name)
  );
};
AvatarContents.displayName = "AvatarContents";
var colorPropStyles = {
  default: {
    backgroundColor: "colorBackgroundUser",
    boxShadow: "shadowBorderUser",
    color: "colorTextUser"
  },
  decorative10: {
    backgroundColor: "colorBackgroundDecorative10Weakest",
    boxShadow: "shadowBorderDecorative10Weaker",
    color: "colorTextDecorative10"
  },
  decorative20: {
    backgroundColor: "colorBackgroundDecorative20Weakest",
    boxShadow: "shadowBorderDecorative20Weaker",
    color: "colorTextDecorative20"
  },
  decorative30: {
    backgroundColor: "colorBackgroundDecorative30Weakest",
    boxShadow: "shadowBorderDecorative30Weaker",
    color: "colorTextDecorative30"
  },
  decorative40: {
    backgroundColor: "colorBackgroundDecorative40Weakest",
    boxShadow: "shadowBorderDecorative40Weaker",
    color: "colorTextDecorative40"
  }
};
var variantStyles = {
  user: {
    borderRadius: "borderRadiusCircle"
  },
  entity: {
    borderRadius: "borderRadius30"
  }
};
var Avatar = React2.forwardRef(
  ({ name, size = DEFAULT_SIZE, element = "AVATAR", src, icon, color = "default", variant = "user", ...props }, ref) => {
    if (name === void 0) {
      console.error("[Paste Avatar]: name prop is required");
    }
    const { variant: groupVariant, size: groupSize } = React2.useContext(AvatarGroupContext);
    return /* @__PURE__ */ React2.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        as: "div",
        element,
        overflow: "hidden",
        textAlign: "center",
        flexShrink: 0,
        ref,
        size: groupSize || size,
        ...colorPropStyles[color],
        ...variantStyles[groupVariant || variant],
        ...src && { backgroundColor: "colorBackgroundBody", boxShadow: "shadowBorderWeaker" }
      },
      /* @__PURE__ */ React2.createElement(AvatarContents, { name, size: groupSize || size, icon, src })
    );
  }
);
Avatar.displayName = "Avatar";
export {
  Avatar,
  AvatarGroup
};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
