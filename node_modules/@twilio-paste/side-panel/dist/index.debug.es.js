// src/SidePanel.tsx
import { animated, useTransition } from "@twilio-paste/animation-library";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { useMergeRefs, useWindowSize } from "@twilio-paste/utils";
import * as React2 from "react";

// src/SidePanelContext.tsx
import * as React from "react";
var SidePanelContext = React.createContext({});

// src/SidePanel.tsx
var StyledSidePanelWrapper = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(
  Box,
  {
    ...props,
    display: "flex",
    ref,
    position: "sticky",
    zIndex: "zIndex30",
    top: props.top,
    right: 0,
    paddingRight: ["space0", "space40", "space40"],
    width: ["100%", "size40", "size40"],
    height: props.height
  }
));
StyledSidePanelWrapper.displayName = "StyledSidePanelWrapper";
var AnimatedStyledSidePanelWrapper = animated(StyledSidePanelWrapper);
var config = {
  mass: 0.3,
  tension: 288,
  friction: 20
};
var transitionStyles = {
  from: { opacity: 0, transform: "translateX(100%)" },
  enter: { opacity: 1, transform: "translateX(0%)" },
  leave: { opacity: 0, transform: "translateX(100%)" },
  config
};
var mobileTransitionStyles = {
  from: { opacity: 0, transform: "translateY(100%)" },
  enter: { opacity: 1, transform: "translateY(0%)" },
  leave: { opacity: 0, transform: "translateY(100%)" },
  config
};
var SidePanel = React2.forwardRef(
  ({ element = "SIDE_PANEL", label, children, ...props }, ref) => {
    const { sidePanelId, isOpen } = React2.useContext(SidePanelContext);
    const { breakpointIndex } = useWindowSize();
    const transitions = breakpointIndex === 0 ? useTransition(isOpen, mobileTransitionStyles) : useTransition(isOpen, transitionStyles);
    const screenSize = window.innerHeight;
    const sidePanelRef = React2.useRef(null);
    const mergedSidePanelRef = useMergeRefs(sidePanelRef, ref);
    const [offsetY, setOffsetY] = React2.useState(0);
    React2.useEffect(() => {
      const boundingClientRect = sidePanelRef?.current?.getBoundingClientRect();
      setOffsetY(boundingClientRect?.y || 0);
    }, []);
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, transitions(
      (styles, item) => item && /* @__PURE__ */ React2.createElement(
        Box,
        {
          ...safelySpreadBoxProps(props),
          position: "absolute",
          role: "dialog",
          "aria-label": label,
          top: 0,
          right: 0,
          width: ["100%", "auto", "auto"],
          height: "100%",
          element,
          id: sidePanelId
        },
        /* @__PURE__ */ React2.createElement(
          AnimatedStyledSidePanelWrapper,
          {
            ref: mergedSidePanelRef,
            element: `ANIMATED_${element}_WRAPPER`,
            style: styles,
            height: screenSize - offsetY,
            top: offsetY
          },
          /* @__PURE__ */ React2.createElement(
            Box,
            {
              display: "flex",
              maxHeight: "100%",
              flexDirection: "column",
              width: ["100%", "size40", "size40"],
              borderStyle: "solid",
              borderRadius: ["borderRadius0", "borderRadius70", "borderRadius70"],
              borderWidth: "borderWidth10",
              borderColor: "colorBorderWeaker",
              backgroundColor: "colorBackgroundBody",
              marginTop: "space40",
              marginBottom: ["space0", "space40", "space40"],
              paddingBottom: "space70",
              overflowY: "hidden",
              element: `INNER_${element}`
            },
            children
          )
        )
      )
    ));
  }
);
SidePanel.displayName = "SidePanel";

// src/SidePanelPushContentWrapper.tsx
import { animated as animated2, useSpring } from "@twilio-paste/animation-library";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { useTheme } from "@twilio-paste/theme";
import { useWindowSize as useWindowSize2 } from "@twilio-paste/utils";
import * as React3 from "react";
var StyledContentWrapper = React3.forwardRef((props, ref) => /* @__PURE__ */ React3.createElement(Box2, { ...props, as: "div", position: "relative", ref }));
StyledContentWrapper.displayName = "StyledContentWrapper";
var AnimatedStyledContentWrapper = animated2(StyledContentWrapper);
var SidePanelPushContentWrapper = React3.forwardRef(
  ({ element = "SIDE_PANEL_PUSH_CONTENT_WRAPPER", children, ...props }, ref) => {
    const { isOpen } = React3.useContext(SidePanelContext);
    const theme = useTheme();
    const { breakpointIndex } = useWindowSize2();
    const styles = useSpring({
      marginRight: isOpen ? theme.sizes.size40 : "0rem",
      config: {
        mass: 0.3,
        tension: 288,
        friction: 20
      }
    });
    return /* @__PURE__ */ React3.createElement(
      AnimatedStyledContentWrapper,
      {
        ...safelySpreadBoxProps2(props),
        ref,
        style: breakpointIndex === 0 ? void 0 : styles,
        marginRight: ["space0", theme.sizes.size40],
        minWidth: "size0",
        element
      },
      children
    );
  }
);
SidePanelPushContentWrapper.displayName = "SidePanelPushContentWrapper";

// src/SidePanelHeader.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import * as React4 from "react";
var SidePanelCloseButton = ({
  setIsOpen,
  i18nCloseSidePanelTitle,
  sidePanelId,
  isOpen,
  element
}) => {
  const internalButtonRef = React4.useRef(null);
  React4.useEffect(() => {
    internalButtonRef.current?.focus({ preventScroll: true });
  }, []);
  return /* @__PURE__ */ React4.createElement(
    Button,
    {
      variant: "secondary_icon",
      size: "reset",
      onClick: () => {
        setIsOpen(false);
      },
      ref: internalButtonRef,
      "aria-controls": sidePanelId,
      "aria-expanded": isOpen,
      "aria-label": i18nCloseSidePanelTitle,
      element
    },
    /* @__PURE__ */ React4.createElement(CloseIcon, { decorative: false, title: i18nCloseSidePanelTitle, size: "sizeIcon50" })
  );
};
SidePanelCloseButton.displayName = "SidePanelCloseButton";
var SidePanelHeader = React4.forwardRef(
  ({ element = "SIDE_PANEL_HEADER", children, ...props }, ref) => {
    const { sidePanelId, isOpen, setIsOpen, i18nCloseSidePanelTitle } = React4.useContext(SidePanelContext);
    return /* @__PURE__ */ React4.createElement(
      Box3,
      {
        width: "100%",
        padding: "space70",
        display: "flex",
        columnGap: "space30",
        alignItems: "flex-start",
        justifyContent: "space-between",
        ...safelySpreadBoxProps3(props),
        ref,
        element
      },
      children,
      /* @__PURE__ */ React4.createElement(
        SidePanelCloseButton,
        {
          setIsOpen,
          i18nCloseSidePanelTitle,
          sidePanelId,
          isOpen,
          element: `${element}_CLOSE_BUTTON`
        }
      )
    );
  }
);
SidePanelHeader.displayName = "SidePanelHeader";

// src/SidePanelHeaderActions.tsx
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import * as React5 from "react";
var SidePanelHeaderActions = React5.forwardRef(
  ({ element = "SIDE_PANEL_HEADER_ACTIONS", children, ...props }, ref) => {
    return /* @__PURE__ */ React5.createElement(
      Box4,
      {
        flexGrow: 1,
        display: "flex",
        justifyContent: "flex-end",
        columnGap: "space20",
        ...safelySpreadBoxProps4(props),
        ref,
        element
      },
      children
    );
  }
);
SidePanelHeaderActions.displayName = "SidePanelHeaderActions";

// src/SidePanelBody.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import { css, styled } from "@twilio-paste/styling-library";
import * as React6 from "react";
var SidePanelBodyWrapper = styled.div(({ theme }) => {
  const { colorBackgroundBody, colorBackgroundStrong, colorBackgroundStronger } = theme.backgroundColors;
  return css({
    "::-webkit-scrollbar": {
      width: "6px"
    },
    "::-webkit-scrollbar-track": {
      marginTop: "8px",
      marginBottom: "8px",
      background: colorBackgroundBody,
      borderRadius: "10px"
    },
    "::-webkit-scrollbar-thumb": {
      background: colorBackgroundStrong,
      borderRadius: "10px"
    },
    "::-webkit-scrollbar-thumb:hover": {
      background: colorBackgroundStronger
    }
  });
});
var SidePanelBody = React6.forwardRef(
  ({ element = "SIDE_PANEL_BODY", children, ...props }, ref) => {
    return /* @__PURE__ */ React6.createElement(
      Box5,
      {
        ...safelySpreadBoxProps5(props),
        as: SidePanelBodyWrapper,
        width: "100%",
        height: "100%",
        paddingLeft: "space70",
        paddingRight: "18px",
        display: "flex",
        ref,
        element,
        overflowY: "scroll"
      },
      children
    );
  }
);
SidePanelBody.displayName = "SidePanelBody";

// src/SidePanelContainer.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
import { useUID } from "@twilio-paste/uid-library";
import * as React7 from "react";
var SidePanelContainer = React7.forwardRef(
  ({
    element = "SIDE_PANEL_CONTAINER",
    children,
    sidePanelId,
    isOpen,
    setIsOpen,
    i18nCloseSidePanelTitle = "close the side panel",
    i18nOpenSidePanelTitle = "open the side panel",
    ...props
  }, ref) => {
    if (sidePanelId === void 0)
      sidePanelId = useUID();
    return /* @__PURE__ */ React7.createElement(
      SidePanelContext.Provider,
      {
        value: { sidePanelId, isOpen, setIsOpen, i18nCloseSidePanelTitle, i18nOpenSidePanelTitle }
      },
      /* @__PURE__ */ React7.createElement(Box6, { ...safelySpreadBoxProps6(props), position: "relative", ref, element }, children)
    );
  }
);
SidePanelContainer.displayName = "SidePanelContainer";

// src/SidePanelButton.tsx
import { Button as Button2 } from "@twilio-paste/button";
import * as React8 from "react";
var SidePanelButton = React8.forwardRef(
  ({ children, element = "SIDE_PANEL_BUTTON", ...sidePanelButtonProps }, ref) => {
    const { i18nCloseSidePanelTitle, i18nOpenSidePanelTitle, isOpen, setIsOpen, sidePanelId } = React8.useContext(SidePanelContext);
    return /* @__PURE__ */ React8.createElement(
      Button2,
      {
        element,
        "aria-label": isOpen ? i18nCloseSidePanelTitle : i18nOpenSidePanelTitle,
        onClick: () => setIsOpen(!isOpen),
        "aria-expanded": isOpen,
        "aria-controls": sidePanelId,
        ...sidePanelButtonProps,
        ref
      },
      children
    );
  }
);
SidePanelButton.displayName = "SidePanelButton";

// src/SidePanelBadgeButton.tsx
import { Badge } from "@twilio-paste/badge";
import * as React9 from "react";
var ButtonBadge = React9.forwardRef(function ButtonBadge2({ children, ...props }, ref) {
  return /* @__PURE__ */ React9.createElement(Badge, { ...props, as: "button", ref }, children);
});
ButtonBadge.displayName = "ButtonBadge";
var SidePanelBadgeButton = React9.forwardRef(
  ({ children, element = "SIDE_PANEL_BADGE", ...sidePanelButtonProps }, ref) => {
    const { i18nCloseSidePanelTitle, i18nOpenSidePanelTitle, isOpen, setIsOpen, sidePanelId } = React9.useContext(SidePanelContext);
    return /* @__PURE__ */ React9.createElement(
      ButtonBadge,
      {
        ...sidePanelButtonProps,
        as: "button",
        element,
        "aria-label": isOpen ? i18nCloseSidePanelTitle : i18nOpenSidePanelTitle,
        onClick: () => setIsOpen(!isOpen),
        "aria-expanded": isOpen,
        "aria-controls": sidePanelId,
        ref
      },
      children
    );
  }
);
SidePanelBadgeButton.displayName = "SidePanelBadgeButton";

// src/SidePanelFooter.tsx
import { Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
import * as React10 from "react";
var SidePanelFooter = React10.forwardRef(
  ({ element = "SIDE_PANEL_FOOTER", variant = "default", children, justifyContent = "flex-start", ...props }, ref) => {
    return /* @__PURE__ */ React10.createElement(
      Box7,
      {
        width: "100%",
        paddingX: variant === "chat" ? "space50" : "space70",
        paddingBottom: "space50",
        paddingTop: variant === "chat" ? "space0" : "space50",
        boxShadow: variant === "chat" ? "none" : "shadow",
        marginBottom: "spaceNegative70",
        zIndex: "zIndex20",
        display: "flex",
        columnGap: "space40",
        rowGap: "space40",
        justifyContent,
        flexWrap: "wrap",
        ...safelySpreadBoxProps7(props),
        ref,
        element
      },
      children
    );
  }
);
SidePanelFooter.displayName = "SidePanelFooter";
export {
  SidePanel,
  SidePanelBadgeButton,
  SidePanelBody,
  SidePanelButton,
  SidePanelContainer,
  SidePanelContext,
  SidePanelFooter,
  SidePanelHeader,
  SidePanelHeaderActions,
  SidePanelPushContentWrapper
};
