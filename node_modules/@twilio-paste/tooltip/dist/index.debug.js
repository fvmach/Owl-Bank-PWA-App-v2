"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Tooltip: () => Tooltip,
  useTooltipState: () => import_tooltip_primitive2.useTooltipPrimitiveState
});
module.exports = __toCommonJS(src_exports);

// src/Tooltip.tsx
var import_box = require("@twilio-paste/box");
var import_keyboard_key = require("@twilio-paste/keyboard-key");
var import_stack = require("@twilio-paste/stack");
var import_text = require("@twilio-paste/text");
var import_theme2 = require("@twilio-paste/theme");
var import_tooltip_primitive2 = require("@twilio-paste/tooltip-primitive");
var import_uid_library = require("@twilio-paste/uid-library");
var React2 = __toESM(require("react"));

// src/TooltipArrow.tsx
var import_theme = require("@twilio-paste/theme");
var import_tooltip_primitive = require("@twilio-paste/tooltip-primitive");
var React = __toESM(require("react"));
var TooltipArrow = (props) => {
  const theme = (0, import_theme.useTheme)();
  return /* @__PURE__ */ React.createElement(
    import_tooltip_primitive.TooltipPrimitiveArrow,
    {
      ...props,
      size: theme.fontSizes.fontSize50,
      stroke: theme.borderColors.colorBorderInverse,
      fill: theme.backgroundColors.colorBackgroundBodyInverse
    }
  );
};
TooltipArrow.displayName = "TooltipArrow";

// src/Tooltip.tsx
var StyledTooltip = React2.forwardRef(({ style, element, ...props }, ref) => {
  return /* @__PURE__ */ React2.createElement(
    import_box.Box,
    {
      ...(0, import_box.safelySpreadBoxProps)(props),
      backgroundColor: "colorBackgroundBodyInverse",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderColor: "colorBorderInverse",
      element,
      maxWidth: "size30",
      paddingX: "space50",
      paddingY: "space40",
      zIndex: "zIndex90",
      _focus: { outline: "none" },
      style,
      ref
    }
  );
});
StyledTooltip.displayName = "StyledTooltip";
var Tooltip = React2.forwardRef(
  ({ baseId, children, element = "TOOLTIP", state, text, actionHeader, keyCombinationsActions, ...props }, ref) => {
    const tooltip = state || (0, import_tooltip_primitive2.useTooltipPrimitiveState)({ baseId: `paste-tooltip-${(0, import_uid_library.useUID)()}`, ...props });
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, React2.Children.only(
      /* @__PURE__ */ React2.createElement(import_tooltip_primitive2.TooltipPrimitiveReference, { ...tooltip, ref, ...children.props }, (referenceProps) => React2.cloneElement(children, referenceProps))
    ), /* @__PURE__ */ React2.createElement(import_tooltip_primitive2.TooltipPrimitive, { element, ...tooltip, ...props, as: StyledTooltip }, /* @__PURE__ */ React2.createElement(import_theme2.StyledBase, null, /* @__PURE__ */ React2.createElement(TooltipArrow, { ...tooltip }), text && !keyCombinationsActions && /* @__PURE__ */ React2.createElement(
      import_text.Text,
      {
        element: `${element}_TEXT`,
        as: "span",
        color: "colorTextInverse",
        fontSize: "fontSize20",
        lineHeight: "lineHeight10"
      },
      text
    ), keyCombinationsActions && !text && /* @__PURE__ */ React2.createElement(import_box.Box, { color: "colorTextInverse", fontSize: "fontSize20", lineHeight: "lineHeight10" }, /* @__PURE__ */ React2.createElement(import_stack.Stack, { orientation: "vertical", spacing: "space40" }, actionHeader && /* @__PURE__ */ React2.createElement(
      import_text.Text,
      {
        element: `${element}_HEADER`,
        fontWeight: "fontWeightSemibold",
        as: "p",
        color: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit"
      },
      actionHeader
    ), keyCombinationsActions.map((action, idx) => /* @__PURE__ */ React2.createElement(import_box.Box, { display: "flex", key: `action-${idx}`, justifyContent: "space-between" }, action.name && /* @__PURE__ */ React2.createElement(
      import_text.Text,
      {
        element: `${element}_ACTION_TEXT`,
        as: "span",
        color: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        marginRight: "space70"
      },
      action.name
    ), /* @__PURE__ */ React2.createElement(
      import_keyboard_key.KeyboardKeyGroup,
      {
        variant: "inverse",
        element: `${element}_ACTION_KEY_GROUP`,
        disabled: action.disabled
      },
      action.eventKeyCombination.map((key, i) => /* @__PURE__ */ React2.createElement(import_keyboard_key.KeyboardKey, { key: `key-${idx}-${i}`, element: `${element}_ACTION_KEY` }, key))
    ))))))));
  }
);
Tooltip.displayName = "Tooltip";
