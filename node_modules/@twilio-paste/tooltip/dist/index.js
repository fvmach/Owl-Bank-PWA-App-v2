"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var src_exports={};__export(src_exports,{Tooltip:()=>Tooltip,useTooltipState:()=>import_tooltip_primitive2.useTooltipPrimitiveState});module.exports=__toCommonJS(src_exports);var import_box=require("@twilio-paste/box"),import_keyboard_key=require("@twilio-paste/keyboard-key"),import_stack=require("@twilio-paste/stack"),import_text=require("@twilio-paste/text"),import_theme2=require("@twilio-paste/theme"),import_tooltip_primitive2=require("@twilio-paste/tooltip-primitive"),import_uid_library=require("@twilio-paste/uid-library"),React2=__toESM(require("react"));var import_theme=require("@twilio-paste/theme"),import_tooltip_primitive=require("@twilio-paste/tooltip-primitive"),React=__toESM(require("react")),TooltipArrow=props=>{let theme=(0,import_theme.useTheme)();return React.createElement(import_tooltip_primitive.TooltipPrimitiveArrow,{...props,size:theme.fontSizes.fontSize50,stroke:theme.borderColors.colorBorderInverse,fill:theme.backgroundColors.colorBackgroundBodyInverse})};TooltipArrow.displayName="TooltipArrow";var StyledTooltip=React2.forwardRef(({style,element,...props},ref)=>React2.createElement(import_box.Box,{...(0,import_box.safelySpreadBoxProps)(props),backgroundColor:"colorBackgroundBodyInverse",borderRadius:"borderRadius30",borderStyle:"solid",borderWidth:"borderWidth10",borderColor:"colorBorderInverse",element,maxWidth:"size30",paddingX:"space50",paddingY:"space40",zIndex:"zIndex90",_focus:{outline:"none"},style,ref}));StyledTooltip.displayName="StyledTooltip";var Tooltip=React2.forwardRef(({baseId,children,element="TOOLTIP",state,text,actionHeader,keyCombinationsActions,...props},ref)=>{let tooltip=state||(0,import_tooltip_primitive2.useTooltipPrimitiveState)({baseId:`paste-tooltip-${(0,import_uid_library.useUID)()}`,...props});return React2.createElement(React2.Fragment,null,React2.Children.only(React2.createElement(import_tooltip_primitive2.TooltipPrimitiveReference,{...tooltip,ref,...children.props},referenceProps=>React2.cloneElement(children,referenceProps))),React2.createElement(import_tooltip_primitive2.TooltipPrimitive,{element,...tooltip,...props,as:StyledTooltip},React2.createElement(import_theme2.StyledBase,null,React2.createElement(TooltipArrow,{...tooltip}),text&&!keyCombinationsActions&&React2.createElement(import_text.Text,{element:`${element}_TEXT`,as:"span",color:"colorTextInverse",fontSize:"fontSize20",lineHeight:"lineHeight10"},text),keyCombinationsActions&&!text&&React2.createElement(import_box.Box,{color:"colorTextInverse",fontSize:"fontSize20",lineHeight:"lineHeight10"},React2.createElement(import_stack.Stack,{orientation:"vertical",spacing:"space40"},actionHeader&&React2.createElement(import_text.Text,{element:`${element}_HEADER`,fontWeight:"fontWeightSemibold",as:"p",color:"inherit",fontSize:"inherit",lineHeight:"inherit"},actionHeader),keyCombinationsActions.map((action,idx)=>React2.createElement(import_box.Box,{display:"flex",key:`action-${idx}`,justifyContent:"space-between"},action.name&&React2.createElement(import_text.Text,{element:`${element}_ACTION_TEXT`,as:"span",color:"inherit",fontSize:"inherit",lineHeight:"inherit",marginRight:"space70"},action.name),React2.createElement(import_keyboard_key.KeyboardKeyGroup,{variant:"inverse",element:`${element}_ACTION_KEY_GROUP`,disabled:action.disabled},action.eventKeyCombination.map((key,i)=>React2.createElement(import_keyboard_key.KeyboardKey,{key:`key-${idx}-${i}`,element:`${element}_ACTION_KEY`},key))))))))))});Tooltip.displayName="Tooltip";
