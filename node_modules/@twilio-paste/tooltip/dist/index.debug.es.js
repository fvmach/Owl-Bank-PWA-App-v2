// src/Tooltip.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { KeyboardKey, KeyboardKeyGroup } from "@twilio-paste/keyboard-key";
import { Stack } from "@twilio-paste/stack";
import { Text } from "@twilio-paste/text";
import { StyledBase } from "@twilio-paste/theme";
import { TooltipPrimitive, TooltipPrimitiveReference, useTooltipPrimitiveState } from "@twilio-paste/tooltip-primitive";
import { useUID } from "@twilio-paste/uid-library";
import * as React2 from "react";

// src/TooltipArrow.tsx
import { useTheme } from "@twilio-paste/theme";
import { TooltipPrimitiveArrow } from "@twilio-paste/tooltip-primitive";
import * as React from "react";
var TooltipArrow = (props) => {
  const theme = useTheme();
  return /* @__PURE__ */ React.createElement(
    TooltipPrimitiveArrow,
    {
      ...props,
      size: theme.fontSizes.fontSize50,
      stroke: theme.borderColors.colorBorderInverse,
      fill: theme.backgroundColors.colorBackgroundBodyInverse
    }
  );
};
TooltipArrow.displayName = "TooltipArrow";

// src/Tooltip.tsx
var StyledTooltip = React2.forwardRef(({ style, element, ...props }, ref) => {
  return /* @__PURE__ */ React2.createElement(
    Box,
    {
      ...safelySpreadBoxProps(props),
      backgroundColor: "colorBackgroundBodyInverse",
      borderRadius: "borderRadius30",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderColor: "colorBorderInverse",
      element,
      maxWidth: "size30",
      paddingX: "space50",
      paddingY: "space40",
      zIndex: "zIndex90",
      _focus: { outline: "none" },
      style,
      ref
    }
  );
});
StyledTooltip.displayName = "StyledTooltip";
var Tooltip = React2.forwardRef(
  ({ baseId, children, element = "TOOLTIP", state, text, actionHeader, keyCombinationsActions, ...props }, ref) => {
    const tooltip = state || useTooltipPrimitiveState({ baseId: `paste-tooltip-${useUID()}`, ...props });
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, React2.Children.only(
      /* @__PURE__ */ React2.createElement(TooltipPrimitiveReference, { ...tooltip, ref, ...children.props }, (referenceProps) => React2.cloneElement(children, referenceProps))
    ), /* @__PURE__ */ React2.createElement(TooltipPrimitive, { element, ...tooltip, ...props, as: StyledTooltip }, /* @__PURE__ */ React2.createElement(StyledBase, null, /* @__PURE__ */ React2.createElement(TooltipArrow, { ...tooltip }), text && !keyCombinationsActions && /* @__PURE__ */ React2.createElement(
      Text,
      {
        element: `${element}_TEXT`,
        as: "span",
        color: "colorTextInverse",
        fontSize: "fontSize20",
        lineHeight: "lineHeight10"
      },
      text
    ), keyCombinationsActions && !text && /* @__PURE__ */ React2.createElement(Box, { color: "colorTextInverse", fontSize: "fontSize20", lineHeight: "lineHeight10" }, /* @__PURE__ */ React2.createElement(Stack, { orientation: "vertical", spacing: "space40" }, actionHeader && /* @__PURE__ */ React2.createElement(
      Text,
      {
        element: `${element}_HEADER`,
        fontWeight: "fontWeightSemibold",
        as: "p",
        color: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit"
      },
      actionHeader
    ), keyCombinationsActions.map((action, idx) => /* @__PURE__ */ React2.createElement(Box, { display: "flex", key: `action-${idx}`, justifyContent: "space-between" }, action.name && /* @__PURE__ */ React2.createElement(
      Text,
      {
        element: `${element}_ACTION_TEXT`,
        as: "span",
        color: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        marginRight: "space70"
      },
      action.name
    ), /* @__PURE__ */ React2.createElement(
      KeyboardKeyGroup,
      {
        variant: "inverse",
        element: `${element}_ACTION_KEY_GROUP`,
        disabled: action.disabled
      },
      action.eventKeyCombination.map((key, i) => /* @__PURE__ */ React2.createElement(KeyboardKey, { key: `key-${idx}-${i}`, element: `${element}_ACTION_KEY` }, key))
    ))))))));
  }
);
Tooltip.displayName = "Tooltip";
export {
  Tooltip,
  useTooltipPrimitiveState as useTooltipState
};
