import type { BoxProps } from "@twilio-paste/box";
import { useTooltipPrimitiveState } from "@twilio-paste/tooltip-primitive";
import type { TooltipPrimitiveInitialState, TooltipPrimitiveStateReturn } from "@twilio-paste/tooltip-primitive";
import * as React from "react";
export type UseTooltipInitialStateProps = TooltipPrimitiveInitialState;
export interface TooltipStateReturn extends TooltipPrimitiveStateReturn {
    [key: string]: any;
}
export interface TooltipProps extends TooltipPrimitiveInitialState {
    /**
     * Overrides the default element name to apply unique styles with the Customization Provider.
     *
     * @default "TOOLTIP"
     * @type {BoxProps["element"]}
     * @memberof TooltipProps
     */
    element?: BoxProps["element"];
    children: NonNullable<React.ReactElement>;
    /**
     * The returned state from the `useTooltipState` hook.
     *
     * @type {TooltipStateReturn}
     * @memberof TooltipProps
     */
    state?: TooltipStateReturn;
    /**
     * The text content of the Tooltip.
     *
     * @type {string}
     * @memberof TooltipProps
     */
    text: string;
    actionHeader?: never;
    keyCombinationsActions?: never;
}
interface KeyboardActions {
    name: string;
    eventKeyCombination: string[];
    disabled?: boolean;
}
export interface KeyboardKeyTooltipProps extends Omit<TooltipProps, "text" | "keyCombinationsActions" | "actionHeader"> {
    text?: never;
    /**
     * The mapping of action names to their respective key combinations.
     *
     * @type {Array<KeyboardActions>}
     * @memberof KeyboardKeyTooltipProps
     */
    keyCombinationsActions: Array<KeyboardActions>;
    /**
     * The header content of the Tooltip.
     *
     * @type {string}
     * @memberof KeyboardKeyTooltipProps
     */
    actionHeader?: string;
}
export type TooltipVariantProps = TooltipProps | KeyboardKeyTooltipProps;
declare const Tooltip: React.ForwardRefExoticComponent<TooltipVariantProps & React.RefAttributes<HTMLDivElement>>;
export { Tooltip };
export { useTooltipPrimitiveState as useTooltipState };
//# sourceMappingURL=Tooltip.d.ts.map