// src/Slider.tsx
import { Box as Box3 } from "@twilio-paste/box";
import { useSlider, useSliderState, useSliderThumb } from "@twilio-paste/react-spectrum-library";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { useMergeRefs } from "@twilio-paste/utils";
import * as React3 from "react";

// src/SliderThumb.tsx
import { Box } from "@twilio-paste/box";
import * as React from "react";

// src/helpers.ts
var getColorToken = (states) => {
  if (states.disabled) {
    return "colorBackgroundStrong";
  } else if (states.error) {
    if (states.hovered) {
      return "colorBackgroundErrorStrong";
    }
    return "colorBackgroundError";
  } else if (states.dragging) {
    return "colorBackgroundPrimary";
  } else if (states.focused) {
    return "colorBackgroundPrimaryStronger";
  } else if (states.hovered) {
    return "colorBackgroundPrimary";
  }
  return "colorBackgroundPrimaryStronger";
};

// src/SliderThumb.tsx
var SliderThumb = ({ element = "SLIDER_THUMB", left = "0%", ...props }) => {
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      ...props,
      backgroundColor: getColorToken(props),
      boxShadow: props.dragging || props.focused ? "shadowFocus" : "none",
      borderRadius: "borderRadiusCircle",
      transition: "background-color 150ms ease, box-shadow 150ms ease",
      width: "20px",
      height: "20px",
      marginTop: "space10",
      cursor: props.disabled ? "not-allowed" : "pointer",
      left,
      element
    }
  );
};
SliderThumb.displayName = "SliderThumb";

// src/SliderTrack.tsx
import { Box as Box2 } from "@twilio-paste/box";
import * as React2 from "react";
var SliderTrack = ({
  element = "SLIDER_TRACK",
  fillPercent = "0%",
  children,
  ...props
}) => {
  return /* @__PURE__ */ React2.createElement(Box2, { ...props, position: "relative", height: "4px", width: "100%", element }, /* @__PURE__ */ React2.createElement(
    Box2,
    {
      element: `${element}_BACKGROUND`,
      borderRadius: "borderRadius20",
      position: "absolute",
      top: 0,
      left: 0,
      backgroundColor: "colorBackgroundStrong",
      height: "100%",
      width: "100%"
    }
  ), /* @__PURE__ */ React2.createElement(
    Box2,
    {
      element: `${element}_FILL`,
      borderRadius: "borderRadius20",
      position: "absolute",
      top: 0,
      left: 0,
      backgroundColor: getColorToken(props),
      height: "100%",
      width: fillPercent,
      transition: "background-color 150ms ease"
    }
  ), children);
};
SliderTrack.displayName = "SliderTrack";

// src/Slider.tsx
var DefaultNumberFormatter = new Intl.NumberFormat("en-US");
var Slider = React3.forwardRef((props, ref) => {
  const inputRef = React3.useRef(null);
  const trackRef = React3.useRef(null);
  const mergedInputRef = useMergeRefs(inputRef, ref);
  const [hovered, setHovered] = React3.useState(false);
  const [focused, setFocused] = React3.useState(false);
  const {
    element = "SLIDER",
    minValue = 0,
    maxValue = 100,
    hideRangeLabels = false,
    disabled: isDisabled = false,
    id,
    i18nMaxRangeLabel = "Maximum value:",
    i18nMinRangeLabel = "Minimum value:"
  } = props;
  const remappedProps = {
    ...props,
    id,
    isDisabled,
    "aria-labelledby": id,
    numberFormatter: props.numberFormatter || DefaultNumberFormatter
  };
  const state = useSliderState(remappedProps);
  const { trackProps } = useSlider(remappedProps, state, trackRef);
  const { thumbProps, inputProps, isDragging } = useSliderThumb(
    {
      index: 0,
      trackRef,
      inputRef
    },
    state
  );
  const uiStateProps = React3.useMemo(() => {
    return {
      disabled: isDisabled,
      error: props.hasError,
      hovered,
      focused,
      dragging: isDragging
    };
  }, [isDisabled, props.hasError, hovered, focused, isDragging]);
  const onClickHandler = React3.useCallback(() => {
    inputRef?.current?.focus();
  }, [inputRef]);
  return /* @__PURE__ */ React3.createElement(Box3, { element }, /* @__PURE__ */ React3.createElement(
    Box3,
    {
      ...trackProps,
      element: `${element}_TRACK_CONTAINER`,
      ref: trackRef,
      onMouseEnter: () => setHovered(true),
      onMouseLeave: () => setHovered(false),
      display: "flex",
      alignItems: "center",
      height: "20px",
      width: "100%",
      cursor: isDisabled ? "not-allowed" : "pointer",
      onClick: onClickHandler
    },
    /* @__PURE__ */ React3.createElement(
      SliderTrack,
      {
        ...uiStateProps,
        fillPercent: thumbProps?.style?.left,
        element: `${element}_TRACK`,
        onClick: onClickHandler
      },
      /* @__PURE__ */ React3.createElement(SliderThumb, { ...thumbProps, ...uiStateProps, element: `${element}_THUMB`, onClick: onClickHandler }, /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, /* @__PURE__ */ React3.createElement(
        "input",
        {
          ref: mergedInputRef,
          ...inputProps,
          "aria-labelledby": props["aria-labelledby"],
          "aria-describedby": props["aria-describedby"],
          id: inputProps.id?.replace("-0", ""),
          onFocus: () => setFocused(true),
          onBlur: () => setFocused(false)
        }
      )))
    )
  ), !hideRangeLabels && /* @__PURE__ */ React3.createElement(
    Box3,
    {
      element: `${element}_RANGE_LABELS`,
      display: "flex",
      justifyContent: "space-between",
      columnGap: "space20",
      fontSize: "fontSize30",
      lineHeight: "lineHeight30",
      fontWeight: "fontWeightNormal",
      color: "colorTextWeak",
      overflowWrap: "anywhere"
    },
    /* @__PURE__ */ React3.createElement(Box3, { element: `${element}_RANGE_LABELS_MIN` }, /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, i18nMinRangeLabel), remappedProps.numberFormatter.format(minValue)),
    /* @__PURE__ */ React3.createElement(Box3, { element: `${element}_RANGE_LABELS_MAX`, textAlign: "end" }, /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, i18nMaxRangeLabel), remappedProps.numberFormatter.format(maxValue))
  ));
});
Slider.displayName = "Slider";
export {
  Slider
};
