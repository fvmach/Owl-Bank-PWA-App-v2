import{Box as Box3}from"@twilio-paste/box";import{useSlider,useSliderState,useSliderThumb}from"@twilio-paste/react-spectrum-library";import{ScreenReaderOnly}from"@twilio-paste/screen-reader-only";import{useMergeRefs}from"@twilio-paste/utils";import*as React3 from"react";import{Box}from"@twilio-paste/box";import*as React from"react";var getColorToken=states=>states.disabled?"colorBackgroundStrong":states.error?states.hovered?"colorBackgroundErrorStrong":"colorBackgroundError":states.dragging?"colorBackgroundPrimary":states.focused?"colorBackgroundPrimaryStronger":states.hovered?"colorBackgroundPrimary":"colorBackgroundPrimaryStronger";var SliderThumb=({element="SLIDER_THUMB",left="0%",...props})=>React.createElement(Box,{...props,backgroundColor:getColorToken(props),boxShadow:props.dragging||props.focused?"shadowFocus":"none",borderRadius:"borderRadiusCircle",transition:"background-color 150ms ease, box-shadow 150ms ease",width:"20px",height:"20px",marginTop:"space10",cursor:props.disabled?"not-allowed":"pointer",left,element});SliderThumb.displayName="SliderThumb";import{Box as Box2}from"@twilio-paste/box";import*as React2 from"react";var SliderTrack=({element="SLIDER_TRACK",fillPercent="0%",children,...props})=>React2.createElement(Box2,{...props,position:"relative",height:"4px",width:"100%",element},React2.createElement(Box2,{element:`${element}_BACKGROUND`,borderRadius:"borderRadius20",position:"absolute",top:0,left:0,backgroundColor:"colorBackgroundStrong",height:"100%",width:"100%"}),React2.createElement(Box2,{element:`${element}_FILL`,borderRadius:"borderRadius20",position:"absolute",top:0,left:0,backgroundColor:getColorToken(props),height:"100%",width:fillPercent,transition:"background-color 150ms ease"}),children);SliderTrack.displayName="SliderTrack";var DefaultNumberFormatter=new Intl.NumberFormat("en-US"),Slider=React3.forwardRef((props,ref)=>{let inputRef=React3.useRef(null),trackRef=React3.useRef(null),mergedInputRef=useMergeRefs(inputRef,ref),[hovered,setHovered]=React3.useState(!1),[focused,setFocused]=React3.useState(!1),{element="SLIDER",minValue=0,maxValue=100,hideRangeLabels=!1,disabled:isDisabled=!1,id,i18nMaxRangeLabel="Maximum value:",i18nMinRangeLabel="Minimum value:"}=props,remappedProps={...props,id,isDisabled,"aria-labelledby":id,numberFormatter:props.numberFormatter||DefaultNumberFormatter},state=useSliderState(remappedProps),{trackProps}=useSlider(remappedProps,state,trackRef),{thumbProps,inputProps,isDragging}=useSliderThumb({index:0,trackRef,inputRef},state),uiStateProps=React3.useMemo(()=>({disabled:isDisabled,error:props.hasError,hovered,focused,dragging:isDragging}),[isDisabled,props.hasError,hovered,focused,isDragging]),onClickHandler=React3.useCallback(()=>{inputRef?.current?.focus()},[inputRef]);return React3.createElement(Box3,{element},React3.createElement(Box3,{...trackProps,element:`${element}_TRACK_CONTAINER`,ref:trackRef,onMouseEnter:()=>setHovered(!0),onMouseLeave:()=>setHovered(!1),display:"flex",alignItems:"center",height:"20px",width:"100%",cursor:isDisabled?"not-allowed":"pointer",onClick:onClickHandler},React3.createElement(SliderTrack,{...uiStateProps,fillPercent:thumbProps?.style?.left,element:`${element}_TRACK`,onClick:onClickHandler},React3.createElement(SliderThumb,{...thumbProps,...uiStateProps,element:`${element}_THUMB`,onClick:onClickHandler},React3.createElement(ScreenReaderOnly,null,React3.createElement("input",{ref:mergedInputRef,...inputProps,"aria-labelledby":props["aria-labelledby"],"aria-describedby":props["aria-describedby"],id:inputProps.id?.replace("-0",""),onFocus:()=>setFocused(!0),onBlur:()=>setFocused(!1)}))))),!hideRangeLabels&&React3.createElement(Box3,{element:`${element}_RANGE_LABELS`,display:"flex",justifyContent:"space-between",columnGap:"space20",fontSize:"fontSize30",lineHeight:"lineHeight30",fontWeight:"fontWeightNormal",color:"colorTextWeak",overflowWrap:"anywhere"},React3.createElement(Box3,{element:`${element}_RANGE_LABELS_MIN`},React3.createElement(ScreenReaderOnly,null,i18nMinRangeLabel),remappedProps.numberFormatter.format(minValue)),React3.createElement(Box3,{element:`${element}_RANGE_LABELS_MAX`,textAlign:"end"},React3.createElement(ScreenReaderOnly,null,i18nMaxRangeLabel),remappedProps.numberFormatter.format(maxValue))))});Slider.displayName="Slider";export{Slider};
