"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  PageHeader: () => PageHeader,
  PageHeaderActions: () => PageHeaderActions,
  PageHeaderDetails: () => PageHeaderDetails,
  PageHeaderHeading: () => PageHeaderHeading,
  PageHeaderInPageNavigation: () => PageHeaderInPageNavigation,
  PageHeaderKeyword: () => PageHeaderKeyword,
  PageHeaderMeta: () => PageHeaderMeta,
  PageHeaderParagraph: () => PageHeaderParagraph,
  PageHeaderPrefix: () => PageHeaderPrefix,
  PageHeaderSeparator: () => PageHeaderSeparator,
  PageHeaderSetting: () => PageHeaderSetting
});
module.exports = __toCommonJS(src_exports);

// src/PageHeader.tsx
var import_box = require("@twilio-paste/box");
var React = __toESM(require("react"));
var PageHeaderContext = React.createContext({});
var PageHeader = React.forwardRef(
  ({ element = "PAGE_HEADER", size, children, ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(PageHeaderContext.Provider, { value: { size } }, /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        ref,
        element,
        display: "grid",
        gridTemplateRows: "auto auto auto",
        gridTemplateAreas: '"setting" "details" "content_barrier"'
      },
      children
    ));
  }
);
PageHeader.displayName = "PageHeader";

// src/PageHeaderSetting.tsx
var import_box2 = require("@twilio-paste/box");
var React2 = __toESM(require("react"));
var PageHeaderSetting = React2.forwardRef(
  ({ element = "PAGE_HEADER_SETTING", children, ...props }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        ref,
        element,
        gridArea: "setting",
        marginBottom: "space50",
        display: "flex",
        flexDirection: "column",
        rowGap: "space130"
      },
      children
    );
  }
);
PageHeaderSetting.displayName = "PageHeaderSetting";

// src/PageHeaderDetails.tsx
var import_box3 = require("@twilio-paste/box");
var React3 = __toESM(require("react"));
var defaultGridTemplateAreas = '"keyword keyword keyword" "prefix heading actions" "meta meta meta" "paragraph paragraph paragraph"';
var compactGridTemplateAreas = '"keyword keyword keyword" "prefix heading actions" "prefix meta ." "paragraph paragraph paragraph"';
var PageHeaderDetails = React3.forwardRef(
  ({ element = "PAGE_HEADER_DETAILS", children, ...props }, ref) => {
    const { size } = React3.useContext(PageHeaderContext);
    return /* @__PURE__ */ React3.createElement(
      import_box3.Box,
      {
        ...(0, import_box3.safelySpreadBoxProps)(props),
        ref,
        element,
        marginBottom: size === "compact" ? "space50" : "space130",
        display: "grid",
        gridTemplateColumns: "min-content auto 1fr",
        gridTemplateRows: "auto-fit",
        gridTemplateAreas: size === "compact" ? compactGridTemplateAreas : defaultGridTemplateAreas
      },
      children
    );
  }
);
PageHeaderDetails.displayName = "PageHeaderDetails";

// src/PageHeaderKeyword.tsx
var import_box4 = require("@twilio-paste/box");
var React4 = __toESM(require("react"));
var PageHeaderKeyword = React4.forwardRef(
  ({ element = "PAGE_HEADER_KEYWORD", children, ...props }, ref) => {
    return /* @__PURE__ */ React4.createElement(
      import_box4.Box,
      {
        ...(0, import_box4.safelySpreadBoxProps)(props),
        ref,
        element,
        marginBottom: "space30",
        gridArea: "keyword",
        display: "flex",
        alignItems: "center",
        columnGap: "space30",
        flexWrap: "wrap",
        rowGap: "space30",
        color: "colorTextWeak",
        fontSize: "fontSize20",
        lineHeight: "lineHeight20",
        fontWeight: "fontWeightMedium"
      },
      children
    );
  }
);
PageHeaderKeyword.displayName = "PageHeaderKeyword";

// src/PageHeaderPrefix.tsx
var import_box5 = require("@twilio-paste/box");
var React5 = __toESM(require("react"));
var PageHeaderPrefix = React5.forwardRef(
  ({ element = "PAGE_HEADER_PREFIX", children, ...props }, ref) => {
    const { size } = React5.useContext(PageHeaderContext);
    return /* @__PURE__ */ React5.createElement(
      import_box5.Box,
      {
        ...(0, import_box5.safelySpreadBoxProps)(props),
        ref,
        element,
        gridArea: "prefix",
        marginRight: size === "compact" ? "space30" : "space40",
        alignSelf: "start"
      },
      children
    );
  }
);
PageHeaderPrefix.displayName = "PageHeaderPrefix";

// src/PageHeaderHeading.tsx
var import_box6 = require("@twilio-paste/box");
var import_heading = require("@twilio-paste/heading");
var React6 = __toESM(require("react"));
var PageHeaderHeading = React6.forwardRef(
  ({ element = "PAGE_HEADER_HEADING", children, as = "h1", variant, ...props }, ref) => {
    const { size } = React6.useContext(PageHeaderContext);
    const defaultVariant = size === "compact" ? "heading30" : "heading10";
    return /* @__PURE__ */ React6.createElement(
      import_box6.Box,
      {
        ...(0, import_box6.safelySpreadBoxProps)(props),
        element: `${element}_WRAPPER`,
        gridArea: "heading",
        alignSelf: "center",
        maxWidth: "size70"
      },
      /* @__PURE__ */ React6.createElement(import_heading.Heading, { ref, element, as, variant: variant || defaultVariant, marginBottom: "space0" }, children)
    );
  }
);
PageHeaderHeading.displayName = "PageHeaderHeading";

// src/PageHeaderParagraph.tsx
var import_box7 = require("@twilio-paste/box");
var import_paragraph = require("@twilio-paste/paragraph");
var React7 = __toESM(require("react"));
var PageHeaderParagraph = React7.forwardRef(
  ({ element = "PAGE_HEADER_PARAGRAPH", children, ...props }, ref) => {
    const { size } = React7.useContext(PageHeaderContext);
    return /* @__PURE__ */ React7.createElement(
      import_box7.Box,
      {
        ...(0, import_box7.safelySpreadBoxProps)(props),
        ref,
        element: `${element}_WRAPPER`,
        marginTop: size === "compact" ? "space40" : "space70",
        gridArea: "paragraph",
        maxWidth: "size70"
      },
      /* @__PURE__ */ React7.createElement(import_paragraph.Paragraph, { element, ref, marginBottom: "space0" }, children)
    );
  }
);
PageHeaderParagraph.displayName = "PageHeaderParagraph";

// src/PageHeaderMeta.tsx
var import_box8 = require("@twilio-paste/box");
var React8 = __toESM(require("react"));
var PageHeaderMeta = React8.forwardRef(
  ({ element = "PAGE_HEADER_META", children, ...props }, ref) => {
    const { size } = React8.useContext(PageHeaderContext);
    return /* @__PURE__ */ React8.createElement(
      import_box8.Box,
      {
        ...(0, import_box8.safelySpreadBoxProps)(props),
        ref,
        element,
        gridArea: "meta",
        marginTop: size === "compact" ? "space10" : "space40",
        display: "flex",
        flexWrap: "wrap",
        columnGap: size === "compact" ? "space40" : "space50",
        rowGap: "space30",
        alignItems: "center",
        maxWidth: "size70",
        color: "colorTextWeak",
        fontSize: "fontSize20",
        lineHeight: "lineHeight20",
        fontWeight: "fontWeightMedium"
      },
      children
    );
  }
);
PageHeaderMeta.displayName = "PageHeaderMeta";

// src/PageHeaderActions.tsx
var import_box9 = require("@twilio-paste/box");
var React9 = __toESM(require("react"));
var PageHeaderActions = React9.forwardRef(
  ({ element = "PAGE_HEADER_ACTIONS", children, ...props }, ref) => {
    const { size } = React9.useContext(PageHeaderContext);
    return /* @__PURE__ */ React9.createElement(
      import_box9.Box,
      {
        ...(0, import_box9.safelySpreadBoxProps)(props),
        ref,
        element,
        gridArea: "actions",
        justifySelf: "end",
        alignSelf: "start",
        paddingLeft: "space70",
        lineHeight: size === "compact" ? "lineHeight60" : "lineHeight90",
        flexWrap: "wrap"
      },
      children
    );
  }
);
PageHeaderActions.displayName = "PageHeaderActions";

// src/PageHeaderInPageNavigation.tsx
var import_box10 = require("@twilio-paste/box");
var React10 = __toESM(require("react"));
var PageHeaderInPageNavigation = React10.forwardRef(
  ({ element = "PAGE_HEADER_IN_PAGE_NAVIGATION", children, ...props }, ref) => {
    return /* @__PURE__ */ React10.createElement(import_box10.Box, { ...(0, import_box10.safelySpreadBoxProps)(props), ref, element, gridArea: "content_barrier" }, children);
  }
);
PageHeaderInPageNavigation.displayName = "PageHeaderInPageNavigation";

// src/PageHeaderSeparator.tsx
var import_box11 = require("@twilio-paste/box");
var React11 = __toESM(require("react"));
var PageHeaderSeparator = React11.forwardRef(
  ({ element = "PAGE_HEADER_SEPARATOR", children, ...props }, ref) => {
    return /* @__PURE__ */ React11.createElement(
      import_box11.Box,
      {
        ...(0, import_box11.safelySpreadBoxProps)(props),
        ref,
        element,
        gridArea: "content_barrier",
        marginBottom: "space60"
      },
      children
    );
  }
);
PageHeaderSeparator.displayName = "PageHeaderSeparator";
