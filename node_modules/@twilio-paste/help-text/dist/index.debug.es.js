// src/HelpText.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { SuccessIcon } from "@twilio-paste/icons/esm/SuccessIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
import * as React from "react";
var HelpTextVariants = {
  DEFAULT: "default",
  ERROR: "error",
  ERROR_INVERSE: "error_inverse",
  INVERSE: "inverse",
  SUCCESS: "success",
  WARNING: "warning"
};
var VariantOptions = {
  [HelpTextVariants.DEFAULT]: {
    textColor: "colorTextWeak",
    icon: null
  },
  [HelpTextVariants.INVERSE]: {
    textColor: "colorTextInverseWeaker",
    icon: null
  },
  [HelpTextVariants.ERROR]: {
    textColor: "colorTextError",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(ErrorIcon, { color: "colorTextError", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.ERROR_INVERSE]: {
    textColor: "colorTextErrorWeak",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(ErrorIcon, { color: "colorTextErrorWeak", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.SUCCESS]: {
    textColor: "colorTextSuccess",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(SuccessIcon, { color: "colorTextIconSuccess", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.WARNING]: {
    textColor: "colorTextWarning",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(WarningIcon, { color: "colorTextWarning", decorative: true, size: "sizeIcon20" }))
  }
};
var HelpText = React.forwardRef(
  ({ marginTop, children, variant = "default", element = "HELP_TEXT", ...props }, ref) => {
    const { textColor, icon } = VariantOptions[variant];
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        ...safelySpreadBoxProps(props),
        display: "flex",
        columnGap: "space20",
        marginTop: marginTop || "space30",
        ref,
        element,
        variant,
        as: "div",
        color: textColor,
        fontSize: "fontSize30",
        lineHeight: "lineHeight30"
      },
      icon,
      /* @__PURE__ */ React.createElement("span", null, children)
    );
  }
);
HelpText.displayName = "HelpText";
export {
  HelpText
};
