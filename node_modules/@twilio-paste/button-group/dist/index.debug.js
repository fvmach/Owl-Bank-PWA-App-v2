"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ButtonGroup: () => ButtonGroup
});
module.exports = __toCommonJS(src_exports);

// src/ButtonGroup.tsx
var import_box = require("@twilio-paste/box");
var import_styling_library = require("@twilio-paste/styling-library");
var React = __toESM(require("react"));
var AttachedStyled = import_styling_library.styled.span(
  (0, import_styling_library.css)({
    "& > button": {
      zIndex: 1
    },
    "& > button:hover, & > button[aria-pressed=true]": {
      zIndex: 2
    },
    "& > button:focus": {
      zIndex: 3
    },
    "& > button:disabled": {
      zIndex: 0
    },
    "& > button:first-of-type": {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    "& > button:not(:first-of-type):not(:last-of-type)": {
      borderRadius: 0,
      marginLeft: "1px"
    },
    "& > button:last-of-type": {
      marginLeft: "1px",
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }
  })
);
var UnattachedStyled = import_styling_library.styled.span(
  (0, import_styling_library.css)({
    display: "flex",
    columnGap: "space40"
  })
);
var ButtonGroup = React.forwardRef(
  ({ element = "BUTTON_GROUP", children, attached = false, justifyContent = "flex-start", ...props }, ref) => {
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        ...(0, import_box.safelySpreadBoxProps)(props),
        as: attached ? AttachedStyled : UnattachedStyled,
        ref,
        element,
        display: "inline-flex",
        flexWrap: attached ? "nowrap" : "wrap",
        justifyContent: attached ? "flex-start" : justifyContent,
        rowGap: "space40",
        role: "group"
      },
      children
    );
  }
);
ButtonGroup.displayName = "ButtonGroup";
