// src/ProgressBar.tsx
import { animated, useSpring } from "@twilio-paste/animation-library";
import { Box } from "@twilio-paste/box";
import { useProgressBar } from "@twilio-paste/react-spectrum-library";
import { SkeletonLoader } from "@twilio-paste/skeleton-loader";
import * as React from "react";

// src/constants.ts
var LABEL_SUFFIX = "PROGRESS_BAR_LABEL";

// src/ProgressBar.tsx
var AnimatedBox = animated(Box);
var ProgressBar = React.forwardRef((props, ref) => {
  const {
    element = "PROGRESS_BAR",
    id,
    value = 0,
    maxValue = 100,
    disabled = false,
    hasError = false,
    isIndeterminate = false
  } = props;
  let labelledBy = props["aria-labelledby"];
  if (labelledBy == null && props["aria-label"] == null && id != null) {
    labelledBy = `${id}${LABEL_SUFFIX}`;
  }
  const { progressBarProps } = useProgressBar({
    ...props,
    "aria-labelledby": labelledBy
  });
  const springConfig = React.useMemo(() => {
    if (isIndeterminate) {
      return {};
    }
    const clampedValue = Math.min(Math.max(value, 0), maxValue);
    const percentage = Math.round(clampedValue / maxValue * 100);
    return { width: `${percentage}%`, config: { tension: 280, friction: 60 } };
  }, [isIndeterminate, value, maxValue]);
  const style = useSpring(springConfig);
  let barColor = "colorBackgroundPrimary";
  if (hasError) {
    barColor = "colorBackgroundError";
  } else if (disabled) {
    barColor = "colorBackgroundStronger";
  }
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      ...progressBarProps,
      ref,
      element,
      id,
      "aria-labelledby": labelledBy,
      height: "8px",
      width: "100%",
      backgroundColor: disabled ? "colorBackground" : "colorBackgroundStrong",
      borderRadius: "borderRadiusPill",
      position: "relative",
      overflow: "hidden"
    },
    isIndeterminate ? /* @__PURE__ */ React.createElement(SkeletonLoader, null) : /* @__PURE__ */ React.createElement(
      AnimatedBox,
      {
        style,
        element: `${element}_FILL`,
        position: "absolute",
        height: "100%",
        backgroundColor: barColor,
        borderRadius: "borderRadius30"
      }
    )
  );
});
ProgressBar.displayName = "ProgressBar";

// src/ProgressBarLabel.tsx
import { Box as Box2 } from "@twilio-paste/box";
import { Label } from "@twilio-paste/label";
import { Text } from "@twilio-paste/text";
import * as React2 from "react";
var ProgressBarLabel = React2.forwardRef(
  ({ element = "PROGRESS_BAR_LABEL", children, htmlFor, valueLabel, disabled, ...labelProps }, ref) => {
    return /* @__PURE__ */ React2.createElement(
      Box2,
      {
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "flex-end",
        element: `${element}_WRAPPER`
      },
      /* @__PURE__ */ React2.createElement(
        Label,
        {
          ...labelProps,
          as: "div",
          element,
          id: `${htmlFor}${LABEL_SUFFIX}`,
          ref,
          disabled
        },
        children
      ),
      valueLabel && /* @__PURE__ */ React2.createElement(
        Text,
        {
          as: "span",
          fontWeight: "fontWeightSemibold",
          textAlign: "end",
          marginBottom: "space20",
          marginLeft: "space20",
          "aria-hidden": "true",
          element: `${element}_VALUE_LABEL`,
          color: disabled ? "colorTextWeak" : void 0
        },
        valueLabel
      )
    );
  }
);
ProgressBarLabel.displayName = "ProgressBarLabel";
export {
  ProgressBar,
  ProgressBarLabel
};
