"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Switch: () => Switch,
  SwitchGroup: () => SwitchGroup
});
module.exports = __toCommonJS(src_exports);

// src/SwitchGroup.tsx
var import_inline_control_group = require("@twilio-paste/inline-control-group");
var React2 = __toESM(require("react"));

// src/SwitchContext.tsx
var React = __toESM(require("react"));
var SwitchContext = React.createContext({
  disabled: false,
  name: void 0,
  hasError: void 0,
  onChange: () => {
  }
});

// src/SwitchGroup.tsx
var SwitchGroup = React2.forwardRef(
  ({
    children,
    element = "SWITCH_GROUP",
    disabled = false,
    errorText,
    name,
    onChange,
    orientation = "vertical",
    i18nRequiredLabel = "(required)",
    ...props
  }, ref) => {
    const onChangeHandler = React2.useCallback(
      (event) => {
        if (onChange != null) {
          onChange(event.target.checked);
        }
      },
      [onChange]
    );
    const contextValue = React2.useMemo(() => {
      return {
        disabled,
        name,
        onChange: onChangeHandler,
        hasError: errorText ? true : void 0
      };
    }, [disabled, name, onChangeHandler]);
    return /* @__PURE__ */ React2.createElement(SwitchContext.Provider, { value: contextValue }, /* @__PURE__ */ React2.createElement(
      import_inline_control_group.InlineControlGroup,
      {
        ...props,
        element,
        disabled,
        errorText,
        name,
        orientation,
        ref,
        i18nRequiredLabel
      },
      children
    ));
  }
);
SwitchGroup.displayName = "SwitchGroup";

// src/Switch.tsx
var import_box2 = require("@twilio-paste/box");
var import_help_text = require("@twilio-paste/help-text");
var import_label = require("@twilio-paste/label");
var import_media_object = require("@twilio-paste/media-object");
var import_sibling_box = require("@twilio-paste/sibling-box");
var import_text = require("@twilio-paste/text");
var import_uid_library = require("@twilio-paste/uid-library");
var React4 = __toESM(require("react"));

// src/SwitchKnob.tsx
var import_box = require("@twilio-paste/box");
var import_SelectedIcon = require("@twilio-paste/icons/cjs/SelectedIcon");
var import_theme = require("@twilio-paste/theme");
var React3 = __toESM(require("react"));
var getSwitchKnobTransformValue = (disabled, checked, isHovering) => {
  if (!disabled) {
    if (!checked && isHovering)
      return "translateX(15%)";
    if (checked && !isHovering)
      return "translateX(105%)";
    if (checked && isHovering)
      return "translateX(100%)";
  } else if (disabled) {
    if (!checked)
      return "translate(10%)";
    if (checked)
      return "translateX(105%)";
  }
  return "translate(10%)";
};
var getSwitchKnobIconColor = (hasError, disabled, checked) => {
  if (hasError && !disabled)
    return "colorTextIconError";
  if (checked && disabled)
    return "colorTextWeaker";
  return "currentColor";
};
var SwitchKnob = React3.forwardRef(
  ({ element = "SWITCH", disabled = false, checked = false, isHovering, height, hasError = false, ...props }, ref) => {
    const theme = (0, import_theme.useTheme)();
    const SWITCH_PADDING = theme.space ? theme.space.space20 : "4px";
    const transformValue = React3.useMemo(
      () => getSwitchKnobTransformValue(disabled, checked, isHovering),
      [disabled, checked, isHovering]
    );
    return /* @__PURE__ */ React3.createElement(
      import_box.Box,
      {
        width: `calc(100% - ${SWITCH_PADDING})`,
        height: "100%",
        position: "absolute",
        transform: transformValue,
        transition: "transform .2s ease-in-out"
      },
      /* @__PURE__ */ React3.createElement(
        import_box.Box,
        {
          ...(0, import_box.safelySpreadBoxProps)(props),
          "aria-disabled": disabled,
          element: `${element}_KNOB`,
          ref,
          height,
          width: height,
          marginTop: "space10",
          transform: checked ? "translateX(-100%)" : "translateX(0%)",
          transition: "transform .2s ease-in-out",
          borderColor: "colorBorder",
          borderWidth: "borderWidth10",
          borderRadius: "borderRadiusCircle",
          backgroundColor: "colorBackgroundBody"
        },
        /* @__PURE__ */ React3.createElement(
          import_box.Box,
          {
            display: "flex",
            height: "100%",
            alignItems: "center",
            justifyContent: "center",
            opacity: checked ? "1" : "0",
            transition: "opacity .2s ease-in-out, color .2s ease-in-out"
          },
          /* @__PURE__ */ React3.createElement(
            import_SelectedIcon.SelectedIcon,
            {
              decorative: true,
              size: "sizeIcon05",
              element: `${element}_ICON`,
              color: getSwitchKnobIconColor(hasError, disabled, checked)
            }
          )
        )
      )
    );
  }
);
SwitchKnob.displayName = "SwitchKnob";

// src/constants.ts
var SWITCH_WIDTH = "1.75rem";
var SWITCH_HEIGHT = "1rem";
var SWITCH_KNOB_SIZE = "0.75rem";

// src/Switch.tsx
var HiddenSwitch = React4.forwardRef((props, ref) => /* @__PURE__ */ React4.createElement(
  import_box2.Box,
  {
    ...props,
    ref,
    as: "input",
    type: "checkbox",
    role: "switch",
    size: "size0",
    border: "none",
    overflow: "hidden",
    padding: "space0",
    margin: "space0",
    whiteSpace: "nowrap",
    textTransform: "none",
    position: "absolute",
    clip: "rect(0 0 0 0)"
  }
));
HiddenSwitch.displayName = "HiddenSwitch";
var Switch = React4.forwardRef(
  ({ checked, defaultChecked, element = "SWITCH", children, helpText, id, required, onChange, ...props }, ref) => {
    if (checked != null && defaultChecked != null) {
      throw new Error(
        `[Paste Switch] Do not provide both 'defaultChecked' and 'checked' to Switch at the same time. Please consider if you want this component to be controlled or uncontrolled.`
      );
    }
    const [checkedState, setCheckedState] = React4.useState(defaultChecked);
    const [isHovering, setIsHovering] = React4.useState(false);
    const SwitchGroupContext = React4.useContext(SwitchContext);
    const helpTextId = (0, import_uid_library.useUID)();
    const SwitchId = id ? id : (0, import_uid_library.useUID)();
    const isControlled = React4.useMemo(() => checked !== void 0, []);
    const mergedChecked = isControlled ? checked : checkedState;
    const disabled = props.disabled != null ? props.disabled : SwitchGroupContext.disabled;
    const name = props.name != null ? props.name : SwitchGroupContext.name;
    const hasError = props.hasError != null ? props.hasError : SwitchGroupContext.hasError;
    const handleChange = React4.useCallback(
      (event) => {
        if (disabled) {
          return;
        }
        if (!isControlled) {
          setCheckedState(event.currentTarget.checked);
        } else if (onChange) {
          onChange(event);
        } else {
          SwitchGroupContext.onChange(event);
        }
      },
      [onChange, SwitchGroupContext.onChange, disabled]
    );
    return /* @__PURE__ */ React4.createElement(import_box2.Box, { element, display: "inline-flex", position: "relative", flexDirection: "column" }, /* @__PURE__ */ React4.createElement(
      HiddenSwitch,
      {
        ...(0, import_box2.safelySpreadBoxProps)(props),
        checked,
        defaultChecked,
        disabled,
        name,
        onChange: handleChange,
        "aria-describedby": helpTextId,
        "aria-checked": mergedChecked,
        "aria-invalid": hasError,
        id: SwitchId,
        required,
        ref
      }
    ), /* @__PURE__ */ React4.createElement(import_label.Label, { disabled, htmlFor: SwitchId, marginBottom: "space0" }, /* @__PURE__ */ React4.createElement(import_box2.Box, { as: "span", display: "flex" }, /* @__PURE__ */ React4.createElement(
      import_sibling_box.SiblingBox,
      {
        element: `${element}_CONTROL`,
        as: "span",
        outline: "none",
        position: "relative",
        display: "inline-block",
        boxSizing: "content-box",
        height: SWITCH_HEIGHT,
        width: SWITCH_WIDTH,
        marginTop: "space10",
        overflow: "hidden",
        borderColor: "colorBorder",
        borderWidth: "borderWidth10",
        borderRadius: "borderRadiusPill",
        transition: "background-color .2s ease-in-out, box-shadow .2s ease-in-out",
        backgroundColor: "colorBackgroundStronger",
        cursor: "pointer",
        onMouseEnter: () => {
          setIsHovering(true);
        },
        onMouseLeave: () => {
          setIsHovering(false);
        },
        _hoverSibling: {
          backgroundColor: "colorBackgroundStrongest"
        },
        _focusSibling: {
          boxShadow: "shadowFocus"
        },
        _checkedSibling: {
          backgroundColor: "colorBackgroundPrimary",
          color: "colorTextPrimary"
        },
        _disabledSibling: {
          backgroundColor: "colorBackgroundStrong",
          color: "currentColor",
          cursor: "not-allowed"
        },
        _checkedAndHoverSibling: {
          color: "colorTextIcon",
          backgroundColor: "colorBackgroundStrongest"
        },
        _invalidSibling: {
          backgroundColor: "colorBackgroundError"
        },
        _invalidAndHoverSibling: {
          backgroundColor: "colorBackgroundErrorStrongest"
        },
        _invalidAndDisabledSibling: {
          backgroundColor: "colorBackgroundStrong"
        }
      },
      /* @__PURE__ */ React4.createElement(
        SwitchKnob,
        {
          element,
          disabled,
          checked: mergedChecked,
          isHovering,
          height: SWITCH_KNOB_SIZE,
          hasError
        }
      )
    ), /* @__PURE__ */ React4.createElement(
      import_text.Text,
      {
        element: `${element}_LABEL_TEXT`,
        as: "span",
        color: "currentColor",
        marginLeft: "space30",
        fontWeight: "fontWeightMedium"
      },
      /* @__PURE__ */ React4.createElement(import_media_object.MediaObject, { verticalAlign: "top" }, required && /* @__PURE__ */ React4.createElement(import_media_object.MediaFigure, { spacing: "space20" }, /* @__PURE__ */ React4.createElement(import_label.RequiredDot, null)), /* @__PURE__ */ React4.createElement(import_media_object.MediaBody, null, children))
    ))), helpText && /* @__PURE__ */ React4.createElement(import_box2.Box, { as: "span", display: "flex", element: `${element}_HELP_TEXT_WRAPPER` }, /* @__PURE__ */ React4.createElement(
      import_box2.Box,
      {
        as: "span",
        boxSizing: "content-box",
        width: SWITCH_WIDTH,
        height: SWITCH_HEIGHT,
        padding: "space10",
        "aria-hidden": true,
        role: "presentation",
        marginRight: "space20",
        display: "inline-block",
        element: `${element}_HELP_TEXT_SPACER`
      }
    ), /* @__PURE__ */ React4.createElement(import_help_text.HelpText, { id: helpTextId, marginTop: "space0", element: `${element}_HELP_TEXT` }, helpText)));
  }
);
Switch.displayName = "Switch";
