// src/AIChatMessage.tsx
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { useUID } from "@twilio-paste/uid-library";
import * as React2 from "react";

// src/AIMessageContext.tsx
import * as React from "react";
var AIMessageContext = React.createContext({});

// src/AIChatMessage.tsx
var AIChatMessage = React2.forwardRef(
  ({ children, element = "AI_CHAT_MESSAGE", variant, id, ...props }, ref) => {
    const AIChatMessageId = id || useUID();
    return /* @__PURE__ */ React2.createElement(AIMessageContext.Provider, { value: { variant, id: AIChatMessageId } }, /* @__PURE__ */ React2.createElement(
      Box,
      {
        role: "listitem",
        display: "flex",
        flexDirection: "column",
        rowGap: "space40",
        ref,
        element,
        ...safelySpreadBoxProps(props)
      },
      children
    ));
  }
);
AIChatMessage.displayName = "AIChatMessage";

// src/AIChatMessageActionGroup.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import * as React3 from "react";
var AIChatMessageActionGroup = React3.forwardRef(
  ({ children, element = "AI_CHAT_MESSAGE_ACTION_GROUP", ...props }, ref) => {
    return /* @__PURE__ */ React3.createElement(
      Box2,
      {
        ...safelySpreadBoxProps2(props),
        ref,
        element,
        display: "flex",
        flexWrap: "wrap",
        alignItems: "center",
        columnGap: "space40",
        fontWeight: "fontWeightMedium",
        marginTop: "space40"
      },
      children
    );
  }
);
AIChatMessageActionGroup.displayName = "AIChatMessageActionGroup";

// src/AIChatMessageBody.tsx
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import * as React5 from "react";

// src/utils.tsx
import React4, { useEffect, useState } from "react";
var useAnimatedText = (children, speed = 10, enabled = true) => {
  const [animatedChildren, setAnimatedChildren] = useState();
  const [textIndex, setTextIndex] = useState(0);
  useEffect(() => {
    const interval = setInterval(() => {
      setTextIndex((prevIndex) => prevIndex + 1);
    }, speed);
    return () => clearInterval(interval);
  }, [speed]);
  const calculateTotalTextLength = (nodes) => {
    let length = 0;
    React4.Children.forEach(nodes, (child) => {
      if (typeof child === "string") {
        length += child.length;
      } else if (React4.isValidElement(child)) {
        length += calculateTotalTextLength(child.props.children);
      }
    });
    return length;
  };
  const cloneChildren = (nodes, currentIndex) => {
    let currentTextIndex = currentIndex;
    return React4.Children.map(nodes, (child) => {
      if (typeof child === "string") {
        if (currentTextIndex > 0) {
          const visibleText = child.slice(0, currentTextIndex);
          currentTextIndex -= child.length;
          return visibleText;
        }
        return null;
      } else if (React4.isValidElement(child)) {
        const totalChildTextLength = calculateTotalTextLength(child.props.children);
        if (currentTextIndex > 0) {
          const clonedChild = React4.cloneElement(child, {}, cloneChildren(child.props.children, currentTextIndex));
          currentTextIndex -= totalChildTextLength;
          return clonedChild;
        } else if (currentTextIndex === 0 && totalChildTextLength === 0) {
          return child;
        }
        return null;
      }
      return child;
    });
  };
  useEffect(() => {
    if (enabled) {
      const totaLength = calculateTotalTextLength(children);
      if (textIndex <= totaLength) {
        setAnimatedChildren(cloneChildren(children, textIndex));
      }
    }
  }, [children, textIndex, enabled]);
  return {
    animatedChildren: enabled ? animatedChildren : children,
    isAnimating: enabled && textIndex < calculateTotalTextLength(children)
  };
};

// src/AIChatMessageBody.tsx
var Sizes = {
  default: {
    fontSize: "fontSize30",
    lineHeight: "lineHeight30"
  },
  fullScreen: {
    fontSize: "fontSize40",
    lineHeight: "lineHeight40"
  }
};
var AIChatMessageBody = React5.forwardRef(
  ({
    children,
    size = "default",
    element = "AI_CHAT_MESSAGE_BODY",
    animated: animated2 = false,
    onAnimationEnd,
    onAnimationStart,
    ...props
  }, ref) => {
    const { id } = React5.useContext(AIMessageContext);
    const [showAnimation] = React5.useState(animated2 && children !== void 0);
    const animationSpeed = size === "fullScreen" ? 8 : 10;
    const { animatedChildren, isAnimating } = useAnimatedText(children, animationSpeed, showAnimation);
    React5.useEffect(() => {
      if (onAnimationStart && animated2 && isAnimating) {
        onAnimationStart();
      }
      if (animated2 && !isAnimating && onAnimationEnd) {
        onAnimationEnd();
      }
    }, [isAnimating, showAnimation]);
    return /* @__PURE__ */ React5.createElement(
      Box3,
      {
        ...safelySpreadBoxProps3(props),
        ...Sizes[size],
        display: "inline-block",
        color: "colorText",
        wordWrap: "break-word",
        maxWidth: "100%",
        minWidth: 0,
        element,
        ref,
        whiteSpace: "pre-wrap",
        id
      },
      animatedChildren
    );
  }
);
AIChatMessageBody.displayName = "AIChatMessageBody";

// src/AIChatMessageAuthor.tsx
import { Avatar } from "@twilio-paste/avatar";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { ArtificialIntelligenceIcon } from "@twilio-paste/icons/esm/ArtificialIntelligenceIcon";
import * as React6 from "react";
var AIChatMessageAuthor = React6.forwardRef(
  ({ children, element = "AI_CHAT_MESSAGE_AUTHOR", avatarName, avatarIcon, avatarSrc, ...props }, ref) => {
    const { variant } = React6.useContext(AIMessageContext);
    return /* @__PURE__ */ React6.createElement(
      Box4,
      {
        ...safelySpreadBoxProps4(props),
        ref,
        "aria-label": props["aria-label"],
        element,
        display: "flex",
        alignItems: "center",
        columnGap: "space40",
        fontWeight: "fontWeightMedium"
      },
      variant === "bot" ? /* @__PURE__ */ React6.createElement(
        Avatar,
        {
          name: children,
          size: "sizeIcon50",
          color: "decorative20",
          icon: ArtificialIntelligenceIcon,
          element: `${element}_BOT_AVATAR`
        }
      ) : /* @__PURE__ */ React6.createElement(
        Avatar,
        {
          size: "sizeIcon50",
          color: "decorative30",
          element: `${element}_USER_AVATAR`,
          name: avatarName || children,
          icon: avatarIcon,
          src: avatarSrc
        }
      ),
      children
    );
  }
);
AIChatMessageAuthor.displayName = "AIChatMessageAuthor";

// src/AIChatMessageActionCard.tsx
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
import * as React7 from "react";
var AIChatMessageActionCard = React7.forwardRef(
  ({ children, element = "AI_CHAT_MESSAGE_ACTION_CARD", ...props }, ref) => /* @__PURE__ */ React7.createElement(
    Box5,
    {
      ...safelySpreadBoxProps5(props),
      ref,
      element,
      display: "inline-flex",
      alignItems: "flex-start",
      columnGap: "space30",
      color: "colorTextIcon",
      lineHeight: "lineHeight30",
      fontSize: "fontSize30",
      fontWeight: "fontWeightMedium",
      backgroundColor: "colorBackgroundBody",
      boxShadow: "shadowBorderWeaker",
      borderRadius: "borderRadius30",
      paddingX: "space30",
      paddingY: "space20"
    },
    children
  )
);
AIChatMessageActionCard.displayName = "AIChatMessageActionCard";

// src/AIChatMessageLoading.tsx
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { StopIcon } from "@twilio-paste/icons/esm/StopIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { SkeletonLoader } from "@twilio-paste/skeleton-loader";
import * as React8 from "react";
var clampedRandom = (min, max) => {
  return Math.min(Math.max(min, Math.random() * max), max);
};
var AIChatMessageLoading = React8.forwardRef(
  ({
    onStopLoading,
    i18nStopGeneratingLabel = "Stop generating",
    i18nAIScreenReaderText = "AI response",
    element = "AI_CHAT_MESSAGE_LOADING",
    ...props
  }, ref) => {
    const widths = React8.useRef([clampedRandom(40, 75), clampedRandom(65, 100), clampedRandom(55, 80)]).current;
    const { id: messageBodyID } = React8.useContext(AIMessageContext);
    return /* @__PURE__ */ React8.createElement(
      Box6,
      {
        ...safelySpreadBoxProps6(props),
        ref,
        element,
        display: "flex",
        flexDirection: "column",
        rowGap: "space40"
      },
      /* @__PURE__ */ React8.createElement(SkeletonLoader, { width: `${widths[0]}%`, height: "20px", element: `${element}_SKELETON` }),
      /* @__PURE__ */ React8.createElement(SkeletonLoader, { width: `${widths[1]}%`, height: "20px", element: `${element}_SKELETON` }),
      /* @__PURE__ */ React8.createElement(SkeletonLoader, { width: `${widths[2]}%`, height: "20px", element: `${element}_SKELETON` }),
      onStopLoading ? /* @__PURE__ */ React8.createElement(Box6, { display: "flex", justifyContent: "center", element: `${element}_STOP_LOADING` }, /* @__PURE__ */ React8.createElement(
        Button,
        {
          variant: "secondary",
          size: "rounded_small",
          onClick: onStopLoading,
          "aria-controls": messageBodyID,
          element: `${element}_STOP_BUTTON`
        },
        /* @__PURE__ */ React8.createElement(StopIcon, { decorative: true }),
        i18nStopGeneratingLabel,
        " ",
        /* @__PURE__ */ React8.createElement(ScreenReaderOnly, null, i18nAIScreenReaderText)
      )) : null
    );
  }
);
AIChatMessageLoading.displayName = "AIChatMessageLoading";

// src/AIChatLog.tsx
import { Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
import * as React9 from "react";
var AIChatLog = React9.forwardRef(
  ({ element = "AI_CHAT_LOG", children, ...props }, ref) => {
    return /* @__PURE__ */ React9.createElement(Box7, { role: "log", paddingY: "space70", element, ref, ...safelySpreadBoxProps7(props) }, /* @__PURE__ */ React9.createElement(
      Box7,
      {
        as: "div",
        role: "list",
        margin: "space0",
        padding: "space0",
        display: "flex",
        flexDirection: "column",
        rowGap: "space130",
        element: `${element}_LIST`
      },
      children
    ));
  }
);
AIChatLog.displayName = "AIChatLog";

// src/useAIChatLogger.tsx
import { uid } from "@twilio-paste/uid-library";
import * as React10 from "react";
var aiChatWithId = (chat) => ({ ...chat, id: chat.id || uid(chat.content) });
var useAIChatLogger = (...initialChats) => {
  const parsedInitialChats = React10.useMemo(() => initialChats.map(aiChatWithId), [initialChats]);
  const [aiChats, setAIChats] = React10.useState(parsedInitialChats);
  const push = React10.useCallback((next) => {
    setAIChats((prev) => prev.concat(aiChatWithId(next)));
  }, []);
  const pop = React10.useCallback((id) => {
    setAIChats((prev) => id ? prev.filter((chat) => chat.id !== id) : prev.slice(0, -1));
  }, []);
  const clear = React10.useCallback(() => setAIChats([]), []);
  return { push, pop, aiChats, clear };
};

// src/AIChatLogger.tsx
import { animated, useReducedMotion, useTransition } from "@twilio-paste/animation-library";
import { Box as Box8 } from "@twilio-paste/box";
import * as React11 from "react";
var AnimatedAI = animated(Box8);
var AIChatLogger = React11.forwardRef(({ aiChats, ...props }, ref) => {
  const transitions = useTransition(aiChats, {
    keys: (AIChat) => AIChat.id,
    from: () => ({ opacity: 0, x: 0 }),
    enter: { opacity: 1, x: 0 },
    leave: () => ({ opacity: 0, x: 0 }),
    config: {
      mass: 0.7,
      tension: 190,
      friction: 16
    }
  });
  const animatedAIs = useReducedMotion() ? aiChats.map((AIChat) => React11.cloneElement(AIChat.content, { key: AIChat.id })) : transitions((styles, AIChat, { key }) => /* @__PURE__ */ React11.createElement(AnimatedAI, { as: "div", style: styles, key }, AIChat.content));
  return /* @__PURE__ */ React11.createElement(AIChatLog, { ...props, ref }, animatedAIs);
});
AIChatLogger.displayName = "AIChatLogger";
export {
  AIChatLog,
  AIChatLogger,
  AIChatMessage,
  AIChatMessageActionCard,
  AIChatMessageActionGroup,
  AIChatMessageAuthor,
  AIChatMessageBody,
  AIChatMessageLoading,
  useAIChatLogger
};
