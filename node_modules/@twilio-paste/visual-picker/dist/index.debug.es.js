// src/VisualPickerRadioGroup.tsx
import { InlineControlGroup } from "@twilio-paste/inline-control-group";
import * as React2 from "react";

// src/VisualPickerContext.tsx
import * as React from "react";
var VisualPickerRadioContext = React.createContext({
  groupIsDisabled: false,
  name: "",
  groupHasError: false,
  onChange: () => {
  },
  value: "",
  orientation: "vertical"
});
var VisualPickerCheckboxContext = React.createContext({
  groupIsDisabled: false,
  name: "",
  groupHasError: false,
  orientation: "vertical"
});

// src/VisualPickerRadioGroup.tsx
var VisualPickerRadioGroup = React2.forwardRef(
  ({
    orientation = "vertical",
    children,
    disabled = false,
    legend,
    onChange,
    name,
    errorText,
    value,
    element = "VISUAL_PICKER_RADIO_GROUP",
    i18nRequiredLabel = "(required)",
    ...props
  }, ref) => {
    const onChangeHandler = React2.useCallback(
      (event) => {
        onChange(event.target.value);
      },
      [onChange]
    );
    const contextValue = React2.useMemo(() => {
      return {
        name,
        value: value || "",
        groupIsDisabled: disabled,
        groupHasError: errorText != null,
        onChange: onChangeHandler,
        orientation
      };
    }, [name, value, disabled, errorText, onChangeHandler, orientation]);
    return /* @__PURE__ */ React2.createElement(VisualPickerRadioContext.Provider, { value: contextValue }, /* @__PURE__ */ React2.createElement(
      InlineControlGroup,
      {
        ...props,
        legend,
        ref,
        name,
        element,
        errorText,
        orientation,
        disabled,
        i18nRequiredLabel,
        fieldStyleProps: {
          marginTop: orientation === "horizontal" ? "space40" : "space30",
          marginRight: orientation === "horizontal" ? "space30" : void 0
        }
      },
      children
    ));
  }
);
VisualPickerRadioGroup.displayName = "VisualPickerRadioGroup";

// src/VisualPickerRadio.tsx
import { BaseRadioCheckboxControl, BaseRadioCheckboxLabel } from "@twilio-paste/base-radio-checkbox";
import { Box } from "@twilio-paste/box";
import { HiddenRadio } from "@twilio-paste/radio-group";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { useUID } from "@twilio-paste/uid-library";
import { useMergeRefs } from "@twilio-paste/utils";
import * as React3 from "react";
var VisualPickerRadio = React3.forwardRef(
  ({ id, name, element = "VISUAL_PICKER_RADIO", value, disabled, hasError, onChange, children, labelText, ...props }, ref) => {
    const [isHovering, setIsHovering] = React3.useState(false);
    const visualPickerRadioGroupContext = React3.useContext(VisualPickerRadioContext);
    const helpTextId = useUID();
    const radioId = id ? id : useUID();
    const labelId = useUID();
    const handleChange = React3.useCallback(
      (event) => {
        if (onChange != null) {
          onChange(event);
        } else {
          visualPickerRadioGroupContext.onChange(event);
        }
      },
      [onChange, visualPickerRadioGroupContext.onChange]
    );
    const state = {
      name: visualPickerRadioGroupContext.name || name || visualPickerRadioGroupContext.name,
      disabled: disabled != null ? disabled : visualPickerRadioGroupContext.groupIsDisabled,
      hasError: hasError != null ? hasError : visualPickerRadioGroupContext.groupHasError,
      checked: visualPickerRadioGroupContext.value === value
    };
    const { groupHasError, groupIsDisabled } = visualPickerRadioGroupContext;
    const internalRef = React3.useRef();
    const mergedRef = useMergeRefs(internalRef, ref);
    let pickerBorderColor = "colorBorderWeak";
    if (disabled || groupIsDisabled)
      pickerBorderColor = "colorBorderWeak";
    else if (!state.checked) {
      if ((hasError || groupHasError) && !isHovering)
        pickerBorderColor = "colorBorderError";
      else if ((hasError || groupHasError) && isHovering)
        pickerBorderColor = "colorBorderErrorStrong";
      else if (isHovering)
        pickerBorderColor = "colorBorderPrimary";
    } else if (state.checked) {
      if (hasError || groupHasError)
        pickerBorderColor = "colorBorderError";
      else
        pickerBorderColor = "colorBorderPrimary";
    }
    return /* @__PURE__ */ React3.createElement(
      Box,
      {
        element,
        position: "relative",
        display: "inline-flex",
        alignItems: visualPickerRadioGroupContext.orientation === "vertical" ? "center" : "flex-start",
        flexDirection: "row",
        height: "100%",
        width: "100%",
        backgroundColor: disabled || groupIsDisabled ? "colorBackgroundWeak" : void 0,
        borderStyle: "solid",
        borderColor: pickerBorderColor,
        borderWidth: "borderWidth10",
        borderRadius: "borderRadius30",
        padding: "space50",
        onMouseEnter: () => setIsHovering(true),
        onMouseLeave: () => setIsHovering(false),
        onClick: (e) => {
          internalRef.current?.click();
          internalRef.current?.focus();
          e.stopPropagation();
        },
        _hover: { cursor: disabled || groupIsDisabled ? "not-allowed" : "pointer" }
      },
      /* @__PURE__ */ React3.createElement(
        HiddenRadio,
        {
          ...props,
          ...state,
          value,
          "aria-describedby": helpTextId,
          "aria-invalid": state.hasError,
          "aria-labelledby": labelId,
          onChange: (e) => {
            handleChange(e);
          },
          id: radioId,
          ref: mergedRef
        }
      ),
      /* @__PURE__ */ React3.createElement(BaseRadioCheckboxLabel, { disabled: state.disabled, htmlFor: radioId, id: labelId }, /* @__PURE__ */ React3.createElement(ScreenReaderOnly, null, labelText), /* @__PURE__ */ React3.createElement(
        BaseRadioCheckboxControl,
        {
          onClick: (e) => e.stopPropagation(),
          element: `${element}_CONTROL`,
          borderRadius: "borderRadiusCircle",
          disabled: state.disabled,
          type: "radio",
          applyHoverStyles: isHovering,
          _checkedAndDisabledSibling: {
            color: "colorTextWeaker"
          }
        },
        /* @__PURE__ */ React3.createElement(
          Box,
          {
            as: "span",
            element: `${element}_CONTROL_CIRCLE`,
            lineHeight: "lineHeight0",
            display: state.checked ? "block" : "none",
            color: "inherit",
            size: "sizeIcon10"
          },
          /* @__PURE__ */ React3.createElement("svg", { role: "img", "aria-hidden": true, width: "100%", height: "100%", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ React3.createElement("circle", { fill: "currentColor", cx: 8, cy: 8, r: 3 }))
        )
      )),
      /* @__PURE__ */ React3.createElement(Box, { element: `${element}_CONTENT`, id: helpTextId, paddingLeft: "space40", width: "100%" }, children)
    );
  }
);
VisualPickerRadio.displayName = "VisualPickerRadio";

// src/VisualPickerCheckboxGroup.tsx
import { InlineControlGroup as InlineControlGroup2 } from "@twilio-paste/inline-control-group";
import * as React4 from "react";
var VisualPickerCheckboxGroup = React4.forwardRef(
  ({
    orientation = "vertical",
    children,
    element = "VISUAL_PICKER_CHECKBOX_GROUP",
    disabled = false,
    errorText,
    name,
    i18nRequiredLabel = "(required)",
    ...props
  }, ref) => {
    const contextValue = React4.useMemo(() => {
      return {
        name,
        groupIsDisabled: disabled,
        groupHasError: errorText != null,
        orientation
      };
    }, [name, disabled, errorText, orientation]);
    return /* @__PURE__ */ React4.createElement(VisualPickerCheckboxContext.Provider, { value: contextValue }, /* @__PURE__ */ React4.createElement(
      InlineControlGroup2,
      {
        ...props,
        ref,
        name,
        element,
        errorText,
        disabled,
        orientation,
        i18nRequiredLabel,
        fieldStyleProps: {
          marginTop: orientation === "horizontal" ? "space40" : "space30",
          marginRight: orientation === "horizontal" ? "space30" : void 0
        }
      },
      children
    ));
  }
);
VisualPickerCheckboxGroup.displayName = "VisualPickerCheckboxGroup";

// src/VisualPickerCheckbox.tsx
import { BaseRadioCheckboxControl as BaseRadioCheckboxControl2, BaseRadioCheckboxLabel as BaseRadioCheckboxLabel2 } from "@twilio-paste/base-radio-checkbox";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { CheckboxIcon, HiddenCheckbox } from "@twilio-paste/checkbox";
import { ScreenReaderOnly as ScreenReaderOnly2 } from "@twilio-paste/screen-reader-only";
import { useUID as useUID2 } from "@twilio-paste/uid-library";
import { useMergeRefs as useMergeRefs2 } from "@twilio-paste/utils";
import * as React5 from "react";
var VisualPickerCheckbox = React5.forwardRef(
  ({ checked, element = "VISUAL_PICKER_CHECKBOX", children, id, indeterminate, labelText, onChange, ...props }, ref) => {
    const [isHovering, setIsHovering] = React5.useState(false);
    const visualPickerCheckboxGroupContext = React5.useContext(VisualPickerCheckboxContext);
    const helpTextId = useUID2();
    const labelId = useUID2();
    const checkboxId = id ? id : useUID2();
    const disabled = props.disabled != null ? props.disabled : visualPickerCheckboxGroupContext.groupIsDisabled;
    const name = visualPickerCheckboxGroupContext.name || props.name || visualPickerCheckboxGroupContext.name;
    const hasError = props.hasError != null ? props.hasError : visualPickerCheckboxGroupContext.groupHasError;
    const { groupHasError, groupIsDisabled } = visualPickerCheckboxGroupContext;
    const internalRef = React5.useRef();
    const mergedRef = useMergeRefs2(internalRef, ref);
    let pickerBorderColor = "colorBorderWeak";
    if (disabled || groupIsDisabled)
      pickerBorderColor = "colorBorderWeak";
    else if (hasError || groupHasError)
      pickerBorderColor = "colorBorderError";
    else if (checked)
      pickerBorderColor = "colorBorderPrimary";
    return /* @__PURE__ */ React5.createElement(
      Box2,
      {
        element,
        position: "relative",
        display: "inline-flex",
        alignItems: visualPickerCheckboxGroupContext.orientation === "vertical" ? "center" : "flex-start",
        flexDirection: "row",
        height: "100%",
        width: "100%",
        backgroundColor: disabled || groupIsDisabled ? "colorBackgroundWeak" : void 0,
        borderStyle: "solid",
        borderColor: pickerBorderColor,
        borderWidth: "borderWidth10",
        borderRadius: "borderRadius30",
        padding: "space50",
        onMouseEnter: () => setIsHovering(true),
        onMouseLeave: () => setIsHovering(false),
        onClick: (e) => {
          internalRef.current?.click();
          internalRef.current?.focus();
          e.stopPropagation();
        },
        _hover: disabled || groupIsDisabled ? { cursor: "not-allowed" } : {
          cursor: "pointer",
          borderColor: hasError || groupHasError ? "colorBorderErrorStronger" : "colorBorderPrimaryStrong"
        }
      },
      /* @__PURE__ */ React5.createElement(
        HiddenCheckbox,
        {
          ...safelySpreadBoxProps(props),
          checked,
          disabled,
          name,
          onChange: (e) => {
            onChange(e);
          },
          "aria-describedby": helpTextId,
          "aria-checked": indeterminate ? "mixed" : checked,
          "aria-labelledby": labelId,
          "aria-invalid": hasError,
          id: checkboxId,
          ref: mergedRef
        }
      ),
      /* @__PURE__ */ React5.createElement(BaseRadioCheckboxLabel2, { disabled, htmlFor: checkboxId, id: labelId }, /* @__PURE__ */ React5.createElement(ScreenReaderOnly2, null, labelText), /* @__PURE__ */ React5.createElement(
        BaseRadioCheckboxControl2,
        {
          onClick: (e) => e.preventDefault(),
          borderRadius: "borderRadius20",
          element: `${element}_CONTROL`,
          disabled,
          position: "relative",
          type: "checkbox",
          applyHoverStyles: isHovering
        },
        /* @__PURE__ */ React5.createElement(CheckboxIcon, { element: `${element}_ICON`, checked, indeterminate })
      )),
      /* @__PURE__ */ React5.createElement(Box2, { element: `${element}_CONTENT`, id: helpTextId, paddingLeft: "space40", width: "100%" }, children)
    );
  }
);
VisualPickerCheckbox.displayName = "VisualPickerCheckbox";
export {
  VisualPickerCheckbox,
  VisualPickerCheckboxGroup,
  VisualPickerRadio,
  VisualPickerRadioGroup
};
